{
  "author": {
    "name": "Amazon Web Services",
    "organization": true,
    "roles": [
      "author"
    ],
    "url": "https://aws.amazon.com"
  },
  "bin": {},
  "dependencies": {
    "@aws-cdk/aws-codebuild": "1.121.0",
    "@aws-cdk/aws-codecommit": "1.121.0",
    "@aws-cdk/aws-codepipeline": "1.121.0",
    "@aws-cdk/aws-codepipeline-actions": "1.121.0",
    "@aws-cdk/aws-ec2": "1.121.0",
    "@aws-cdk/aws-ecr": "1.121.0",
    "@aws-cdk/aws-events": "1.121.0",
    "@aws-cdk/aws-iam": "1.121.0",
    "@aws-cdk/aws-lambda": "1.121.0",
    "@aws-cdk/aws-s3": "1.121.0",
    "@aws-cdk/aws-s3-assets": "1.121.0",
    "@aws-cdk/aws-secretsmanager": "1.121.0",
    "@aws-cdk/aws-sns": "1.121.0",
    "@aws-cdk/cloud-assembly-schema": "1.121.0",
    "@aws-cdk/core": "1.121.0",
    "@aws-cdk/cx-api": "1.121.0",
    "constructs": "^3.3.69"
  },
  "dependencyClosure": {
    "@aws-cdk/assets": {
      "targets": {
        "dotnet": {
          "iconUrl": "https://raw.githubusercontent.com/aws/aws-cdk/master/logo/default-256-dark.png",
          "namespace": "Amazon.CDK.Assets",
          "packageId": "Amazon.CDK.Assets"
        },
        "java": {
          "maven": {
            "artifactId": "cdk-assets",
            "groupId": "software.amazon.awscdk"
          },
          "package": "software.amazon.awscdk.assets"
        },
        "js": {
          "npm": "@aws-cdk/assets"
        },
        "python": {
          "classifiers": [
            "Framework :: AWS CDK",
            "Framework :: AWS CDK :: 1"
          ],
          "distName": "aws-cdk.assets",
          "module": "aws_cdk.assets"
        }
      }
    },
    "@aws-cdk/aws-apigateway": {
      "targets": {
        "dotnet": {
          "iconUrl": "https://raw.githubusercontent.com/aws/aws-cdk/master/logo/default-256-dark.png",
          "namespace": "Amazon.CDK.AWS.APIGateway",
          "packageId": "Amazon.CDK.AWS.APIGateway"
        },
        "java": {
          "maven": {
            "artifactId": "apigateway",
            "groupId": "software.amazon.awscdk"
          },
          "package": "software.amazon.awscdk.services.apigateway"
        },
        "js": {
          "npm": "@aws-cdk/aws-apigateway"
        },
        "python": {
          "classifiers": [
            "Framework :: AWS CDK",
            "Framework :: AWS CDK :: 1"
          ],
          "distName": "aws-cdk.aws-apigateway",
          "module": "aws_cdk.aws_apigateway"
        }
      }
    },
    "@aws-cdk/aws-applicationautoscaling": {
      "targets": {
        "dotnet": {
          "iconUrl": "https://raw.githubusercontent.com/aws/aws-cdk/master/logo/default-256-dark.png",
          "namespace": "Amazon.CDK.AWS.ApplicationAutoScaling",
          "packageId": "Amazon.CDK.AWS.ApplicationAutoScaling"
        },
        "java": {
          "maven": {
            "artifactId": "applicationautoscaling",
            "groupId": "software.amazon.awscdk"
          },
          "package": "software.amazon.awscdk.services.applicationautoscaling"
        },
        "js": {
          "npm": "@aws-cdk/aws-applicationautoscaling"
        },
        "python": {
          "classifiers": [
            "Framework :: AWS CDK",
            "Framework :: AWS CDK :: 1"
          ],
          "distName": "aws-cdk.aws-applicationautoscaling",
          "module": "aws_cdk.aws_applicationautoscaling"
        }
      }
    },
    "@aws-cdk/aws-autoscaling": {
      "targets": {
        "dotnet": {
          "iconUrl": "https://raw.githubusercontent.com/aws/aws-cdk/master/logo/default-256-dark.png",
          "namespace": "Amazon.CDK.AWS.AutoScaling",
          "packageId": "Amazon.CDK.AWS.AutoScaling"
        },
        "java": {
          "maven": {
            "artifactId": "autoscaling",
            "groupId": "software.amazon.awscdk"
          },
          "package": "software.amazon.awscdk.services.autoscaling"
        },
        "js": {
          "npm": "@aws-cdk/aws-autoscaling"
        },
        "python": {
          "classifiers": [
            "Framework :: AWS CDK",
            "Framework :: AWS CDK :: 1"
          ],
          "distName": "aws-cdk.aws-autoscaling",
          "module": "aws_cdk.aws_autoscaling"
        }
      }
    },
    "@aws-cdk/aws-autoscaling-common": {
      "targets": {
        "dotnet": {
          "iconUrl": "https://raw.githubusercontent.com/aws/aws-cdk/master/logo/default-256-dark.png",
          "namespace": "Amazon.CDK.AWS.AutoScaling.Common",
          "packageId": "Amazon.CDK.AWS.AutoScaling.Common"
        },
        "java": {
          "maven": {
            "artifactId": "autoscaling-common",
            "groupId": "software.amazon.awscdk"
          },
          "package": "software.amazon.awscdk.services.autoscaling.common"
        },
        "js": {
          "npm": "@aws-cdk/aws-autoscaling-common"
        },
        "python": {
          "classifiers": [
            "Framework :: AWS CDK",
            "Framework :: AWS CDK :: 1"
          ],
          "distName": "aws-cdk.aws-autoscaling-common",
          "module": "aws_cdk.aws_autoscaling_common"
        }
      }
    },
    "@aws-cdk/aws-autoscaling-hooktargets": {
      "targets": {
        "dotnet": {
          "iconUrl": "https://raw.githubusercontent.com/aws/aws-cdk/master/logo/default-256-dark.png",
          "namespace": "Amazon.CDK.AWS.AutoScaling.HookTargets",
          "packageId": "Amazon.CDK.AWS.AutoScaling.HookTargets"
        },
        "java": {
          "maven": {
            "artifactId": "autoscaling-hooktargets",
            "groupId": "software.amazon.awscdk"
          },
          "package": "software.amazon.awscdk.services.autoscaling.hooktargets"
        },
        "js": {
          "npm": "@aws-cdk/aws-autoscaling-hooktargets"
        },
        "python": {
          "classifiers": [
            "Framework :: AWS CDK",
            "Framework :: AWS CDK :: 1"
          ],
          "distName": "aws-cdk.aws-autoscaling-hooktargets",
          "module": "aws_cdk.aws_autoscaling_hooktargets"
        }
      }
    },
    "@aws-cdk/aws-certificatemanager": {
      "targets": {
        "dotnet": {
          "iconUrl": "https://raw.githubusercontent.com/aws/aws-cdk/master/logo/default-256-dark.png",
          "namespace": "Amazon.CDK.AWS.CertificateManager",
          "packageId": "Amazon.CDK.AWS.CertificateManager"
        },
        "java": {
          "maven": {
            "artifactId": "certificatemanager",
            "groupId": "software.amazon.awscdk"
          },
          "package": "software.amazon.awscdk.services.certificatemanager"
        },
        "js": {
          "npm": "@aws-cdk/aws-certificatemanager"
        },
        "python": {
          "classifiers": [
            "Framework :: AWS CDK",
            "Framework :: AWS CDK :: 1"
          ],
          "distName": "aws-cdk.aws-certificatemanager",
          "module": "aws_cdk.aws_certificatemanager"
        }
      }
    },
    "@aws-cdk/aws-cloudformation": {
      "targets": {
        "dotnet": {
          "iconUrl": "https://raw.githubusercontent.com/aws/aws-cdk/master/logo/default-256-dark.png",
          "namespace": "Amazon.CDK.AWS.CloudFormation",
          "packageId": "Amazon.CDK.AWS.CloudFormation"
        },
        "java": {
          "maven": {
            "artifactId": "cloudformation",
            "groupId": "software.amazon.awscdk"
          },
          "package": "software.amazon.awscdk.services.cloudformation"
        },
        "js": {
          "npm": "@aws-cdk/aws-cloudformation"
        },
        "python": {
          "classifiers": [
            "Framework :: AWS CDK",
            "Framework :: AWS CDK :: 1"
          ],
          "distName": "aws-cdk.aws-cloudformation",
          "module": "aws_cdk.aws_cloudformation"
        }
      }
    },
    "@aws-cdk/aws-cloudfront": {
      "submodules": {
        "@aws-cdk/aws-cloudfront.experimental": {
          "locationInModule": {
            "filename": "lib/index.ts",
            "line": 12
          }
        }
      },
      "targets": {
        "dotnet": {
          "iconUrl": "https://raw.githubusercontent.com/aws/aws-cdk/master/logo/default-256-dark.png",
          "namespace": "Amazon.CDK.AWS.CloudFront",
          "packageId": "Amazon.CDK.AWS.CloudFront"
        },
        "java": {
          "maven": {
            "artifactId": "cloudfront",
            "groupId": "software.amazon.awscdk"
          },
          "package": "software.amazon.awscdk.services.cloudfront"
        },
        "js": {
          "npm": "@aws-cdk/aws-cloudfront"
        },
        "python": {
          "classifiers": [
            "Framework :: AWS CDK",
            "Framework :: AWS CDK :: 1"
          ],
          "distName": "aws-cdk.aws-cloudfront",
          "module": "aws_cdk.aws_cloudfront"
        }
      }
    },
    "@aws-cdk/aws-cloudwatch": {
      "targets": {
        "dotnet": {
          "iconUrl": "https://raw.githubusercontent.com/aws/aws-cdk/master/logo/default-256-dark.png",
          "namespace": "Amazon.CDK.AWS.CloudWatch",
          "packageId": "Amazon.CDK.AWS.CloudWatch"
        },
        "java": {
          "maven": {
            "artifactId": "cloudwatch",
            "groupId": "software.amazon.awscdk"
          },
          "package": "software.amazon.awscdk.services.cloudwatch"
        },
        "js": {
          "npm": "@aws-cdk/aws-cloudwatch"
        },
        "python": {
          "classifiers": [
            "Framework :: AWS CDK",
            "Framework :: AWS CDK :: 1"
          ],
          "distName": "aws-cdk.aws-cloudwatch",
          "module": "aws_cdk.aws_cloudwatch"
        }
      }
    },
    "@aws-cdk/aws-codebuild": {
      "targets": {
        "dotnet": {
          "iconUrl": "https://raw.githubusercontent.com/aws/aws-cdk/master/logo/default-256-dark.png",
          "namespace": "Amazon.CDK.AWS.CodeBuild",
          "packageId": "Amazon.CDK.AWS.CodeBuild"
        },
        "java": {
          "maven": {
            "artifactId": "codebuild",
            "groupId": "software.amazon.awscdk"
          },
          "package": "software.amazon.awscdk.services.codebuild"
        },
        "js": {
          "npm": "@aws-cdk/aws-codebuild"
        },
        "python": {
          "classifiers": [
            "Framework :: AWS CDK",
            "Framework :: AWS CDK :: 1"
          ],
          "distName": "aws-cdk.aws-codebuild",
          "module": "aws_cdk.aws_codebuild"
        }
      }
    },
    "@aws-cdk/aws-codecommit": {
      "targets": {
        "dotnet": {
          "iconUrl": "https://raw.githubusercontent.com/aws/aws-cdk/master/logo/default-256-dark.png",
          "namespace": "Amazon.CDK.AWS.CodeCommit",
          "packageId": "Amazon.CDK.AWS.CodeCommit"
        },
        "java": {
          "maven": {
            "artifactId": "codecommit",
            "groupId": "software.amazon.awscdk"
          },
          "package": "software.amazon.awscdk.services.codecommit"
        },
        "js": {
          "npm": "@aws-cdk/aws-codecommit"
        },
        "python": {
          "classifiers": [
            "Framework :: AWS CDK",
            "Framework :: AWS CDK :: 1"
          ],
          "distName": "aws-cdk.aws-codecommit",
          "module": "aws_cdk.aws_codecommit"
        }
      }
    },
    "@aws-cdk/aws-codedeploy": {
      "targets": {
        "dotnet": {
          "iconUrl": "https://raw.githubusercontent.com/aws/aws-cdk/master/logo/default-256-dark.png",
          "namespace": "Amazon.CDK.AWS.CodeDeploy",
          "packageId": "Amazon.CDK.AWS.CodeDeploy"
        },
        "java": {
          "maven": {
            "artifactId": "codedeploy",
            "groupId": "software.amazon.awscdk"
          },
          "package": "software.amazon.awscdk.services.codedeploy"
        },
        "js": {
          "npm": "@aws-cdk/aws-codedeploy"
        },
        "python": {
          "classifiers": [
            "Framework :: AWS CDK",
            "Framework :: AWS CDK :: 1"
          ],
          "distName": "aws-cdk.aws-codedeploy",
          "module": "aws_cdk.aws_codedeploy"
        }
      }
    },
    "@aws-cdk/aws-codeguruprofiler": {
      "targets": {
        "dotnet": {
          "iconUrl": "https://raw.githubusercontent.com/aws/aws-cdk/master/logo/default-256-dark.png",
          "namespace": "Amazon.CDK.AWS.CodeGuruProfiler",
          "packageId": "Amazon.CDK.AWS.CodeGuruProfiler"
        },
        "java": {
          "maven": {
            "artifactId": "codeguruprofiler",
            "groupId": "software.amazon.awscdk"
          },
          "package": "software.amazon.awscdk.services.codeguruprofiler"
        },
        "js": {
          "npm": "@aws-cdk/aws-codeguruprofiler"
        },
        "python": {
          "classifiers": [
            "Framework :: AWS CDK",
            "Framework :: AWS CDK :: 1"
          ],
          "distName": "aws-cdk.aws-codeguruprofiler",
          "module": "aws_cdk.aws_codeguruprofiler"
        }
      }
    },
    "@aws-cdk/aws-codepipeline": {
      "targets": {
        "dotnet": {
          "iconUrl": "https://raw.githubusercontent.com/aws/aws-cdk/master/logo/default-256-dark.png",
          "namespace": "Amazon.CDK.AWS.CodePipeline",
          "packageId": "Amazon.CDK.AWS.CodePipeline"
        },
        "java": {
          "maven": {
            "artifactId": "codepipeline",
            "groupId": "software.amazon.awscdk"
          },
          "package": "software.amazon.awscdk.services.codepipeline"
        },
        "js": {
          "npm": "@aws-cdk/aws-codepipeline"
        },
        "python": {
          "classifiers": [
            "Framework :: AWS CDK",
            "Framework :: AWS CDK :: 1"
          ],
          "distName": "aws-cdk.aws-codepipeline",
          "module": "aws_cdk.aws_codepipeline"
        }
      }
    },
    "@aws-cdk/aws-codepipeline-actions": {
      "targets": {
        "dotnet": {
          "iconUrl": "https://raw.githubusercontent.com/aws/aws-cdk/master/logo/default-256-dark.png",
          "namespace": "Amazon.CDK.AWS.CodePipeline.Actions",
          "packageId": "Amazon.CDK.AWS.CodePipeline.Actions"
        },
        "java": {
          "maven": {
            "artifactId": "codepipeline-actions",
            "groupId": "software.amazon.awscdk"
          },
          "package": "software.amazon.awscdk.services.codepipeline.actions"
        },
        "js": {
          "npm": "@aws-cdk/aws-codepipeline-actions"
        },
        "python": {
          "classifiers": [
            "Framework :: AWS CDK",
            "Framework :: AWS CDK :: 1"
          ],
          "distName": "aws-cdk.aws-codepipeline-actions",
          "module": "aws_cdk.aws_codepipeline_actions"
        }
      }
    },
    "@aws-cdk/aws-codestarnotifications": {
      "targets": {
        "dotnet": {
          "iconUrl": "https://raw.githubusercontent.com/aws/aws-cdk/master/logo/default-256-dark.png",
          "namespace": "Amazon.CDK.AWS.CodeStarNotifications",
          "packageId": "Amazon.CDK.AWS.CodeStarNotifications"
        },
        "java": {
          "maven": {
            "artifactId": "codestarnotifications",
            "groupId": "software.amazon.awscdk"
          },
          "package": "software.amazon.awscdk.services.codestarnotifications"
        },
        "js": {
          "npm": "@aws-cdk/aws-codestarnotifications"
        },
        "python": {
          "classifiers": [
            "Framework :: AWS CDK",
            "Framework :: AWS CDK :: 1"
          ],
          "distName": "aws-cdk.aws-codestarnotifications",
          "module": "aws_cdk.aws_codestarnotifications"
        }
      }
    },
    "@aws-cdk/aws-cognito": {
      "targets": {
        "dotnet": {
          "iconUrl": "https://raw.githubusercontent.com/aws/aws-cdk/master/logo/default-256-dark.png",
          "namespace": "Amazon.CDK.AWS.Cognito",
          "packageId": "Amazon.CDK.AWS.Cognito"
        },
        "java": {
          "maven": {
            "artifactId": "cognito",
            "groupId": "software.amazon.awscdk"
          },
          "package": "software.amazon.awscdk.services.cognito"
        },
        "js": {
          "npm": "@aws-cdk/aws-cognito"
        },
        "python": {
          "classifiers": [
            "Framework :: AWS CDK",
            "Framework :: AWS CDK :: 1"
          ],
          "distName": "aws-cdk.aws-cognito",
          "module": "aws_cdk.aws_cognito"
        }
      }
    },
    "@aws-cdk/aws-ec2": {
      "targets": {
        "dotnet": {
          "iconUrl": "https://raw.githubusercontent.com/aws/aws-cdk/master/logo/default-256-dark.png",
          "namespace": "Amazon.CDK.AWS.EC2",
          "packageId": "Amazon.CDK.AWS.EC2"
        },
        "java": {
          "maven": {
            "artifactId": "ec2",
            "groupId": "software.amazon.awscdk"
          },
          "package": "software.amazon.awscdk.services.ec2"
        },
        "js": {
          "npm": "@aws-cdk/aws-ec2"
        },
        "python": {
          "classifiers": [
            "Framework :: AWS CDK",
            "Framework :: AWS CDK :: 1"
          ],
          "distName": "aws-cdk.aws-ec2",
          "module": "aws_cdk.aws_ec2"
        }
      }
    },
    "@aws-cdk/aws-ecr": {
      "targets": {
        "dotnet": {
          "iconUrl": "https://raw.githubusercontent.com/aws/aws-cdk/master/logo/default-256-dark.png",
          "namespace": "Amazon.CDK.AWS.ECR",
          "packageId": "Amazon.CDK.AWS.ECR"
        },
        "java": {
          "maven": {
            "artifactId": "ecr",
            "groupId": "software.amazon.awscdk"
          },
          "package": "software.amazon.awscdk.services.ecr"
        },
        "js": {
          "npm": "@aws-cdk/aws-ecr"
        },
        "python": {
          "classifiers": [
            "Framework :: AWS CDK",
            "Framework :: AWS CDK :: 1"
          ],
          "distName": "aws-cdk.aws-ecr",
          "module": "aws_cdk.aws_ecr"
        }
      }
    },
    "@aws-cdk/aws-ecr-assets": {
      "targets": {
        "dotnet": {
          "iconUrl": "https://raw.githubusercontent.com/aws/aws-cdk/master/logo/default-256-dark.png",
          "namespace": "Amazon.CDK.AWS.Ecr.Assets",
          "packageId": "Amazon.CDK.ECR.Assets"
        },
        "java": {
          "maven": {
            "artifactId": "ecr-assets",
            "groupId": "software.amazon.awscdk"
          },
          "package": "software.amazon.awscdk.services.ecr.assets"
        },
        "js": {
          "npm": "@aws-cdk/aws-ecr-assets"
        },
        "python": {
          "classifiers": [
            "Framework :: AWS CDK",
            "Framework :: AWS CDK :: 1"
          ],
          "distName": "aws-cdk.aws-ecr-assets",
          "module": "aws_cdk.aws_ecr_assets"
        }
      }
    },
    "@aws-cdk/aws-ecs": {
      "targets": {
        "dotnet": {
          "iconUrl": "https://raw.githubusercontent.com/aws/aws-cdk/master/logo/default-256-dark.png",
          "namespace": "Amazon.CDK.AWS.ECS",
          "packageId": "Amazon.CDK.AWS.ECS"
        },
        "java": {
          "maven": {
            "artifactId": "ecs",
            "groupId": "software.amazon.awscdk"
          },
          "package": "software.amazon.awscdk.services.ecs"
        },
        "js": {
          "npm": "@aws-cdk/aws-ecs"
        },
        "python": {
          "classifiers": [
            "Framework :: AWS CDK",
            "Framework :: AWS CDK :: 1"
          ],
          "distName": "aws-cdk.aws-ecs",
          "module": "aws_cdk.aws_ecs"
        }
      }
    },
    "@aws-cdk/aws-efs": {
      "targets": {
        "dotnet": {
          "iconUrl": "https://raw.githubusercontent.com/aws/aws-cdk/master/logo/default-256-dark.png",
          "namespace": "Amazon.CDK.AWS.EFS",
          "packageId": "Amazon.CDK.AWS.EFS"
        },
        "java": {
          "maven": {
            "artifactId": "efs",
            "groupId": "software.amazon.awscdk"
          },
          "package": "software.amazon.awscdk.services.efs"
        },
        "js": {
          "npm": "@aws-cdk/aws-efs"
        },
        "python": {
          "classifiers": [
            "Framework :: AWS CDK",
            "Framework :: AWS CDK :: 1"
          ],
          "distName": "aws-cdk.aws-efs",
          "module": "aws_cdk.aws_efs"
        }
      }
    },
    "@aws-cdk/aws-elasticloadbalancing": {
      "targets": {
        "dotnet": {
          "iconUrl": "https://raw.githubusercontent.com/aws/aws-cdk/master/logo/default-256-dark.png",
          "namespace": "Amazon.CDK.AWS.ElasticLoadBalancing",
          "packageId": "Amazon.CDK.AWS.ElasticLoadBalancing"
        },
        "java": {
          "maven": {
            "artifactId": "elasticloadbalancing",
            "groupId": "software.amazon.awscdk"
          },
          "package": "software.amazon.awscdk.services.elasticloadbalancing"
        },
        "js": {
          "npm": "@aws-cdk/aws-elasticloadbalancing"
        },
        "python": {
          "classifiers": [
            "Framework :: AWS CDK",
            "Framework :: AWS CDK :: 1"
          ],
          "distName": "aws-cdk.aws-elasticloadbalancing",
          "module": "aws_cdk.aws_elasticloadbalancing"
        }
      }
    },
    "@aws-cdk/aws-elasticloadbalancingv2": {
      "targets": {
        "dotnet": {
          "iconUrl": "https://raw.githubusercontent.com/aws/aws-cdk/master/logo/default-256-dark.png",
          "namespace": "Amazon.CDK.AWS.ElasticLoadBalancingV2",
          "packageId": "Amazon.CDK.AWS.ElasticLoadBalancingV2"
        },
        "java": {
          "maven": {
            "artifactId": "elasticloadbalancingv2",
            "groupId": "software.amazon.awscdk"
          },
          "package": "software.amazon.awscdk.services.elasticloadbalancingv2"
        },
        "js": {
          "npm": "@aws-cdk/aws-elasticloadbalancingv2"
        },
        "python": {
          "classifiers": [
            "Framework :: AWS CDK",
            "Framework :: AWS CDK :: 1"
          ],
          "distName": "aws-cdk.aws-elasticloadbalancingv2",
          "module": "aws_cdk.aws_elasticloadbalancingv2"
        }
      }
    },
    "@aws-cdk/aws-events": {
      "targets": {
        "dotnet": {
          "iconUrl": "https://raw.githubusercontent.com/aws/aws-cdk/master/logo/default-256-dark.png",
          "namespace": "Amazon.CDK.AWS.Events",
          "packageId": "Amazon.CDK.AWS.Events"
        },
        "java": {
          "maven": {
            "artifactId": "events",
            "groupId": "software.amazon.awscdk"
          },
          "package": "software.amazon.awscdk.services.events"
        },
        "js": {
          "npm": "@aws-cdk/aws-events"
        },
        "python": {
          "classifiers": [
            "Framework :: AWS CDK",
            "Framework :: AWS CDK :: 1"
          ],
          "distName": "aws-cdk.aws-events",
          "module": "aws_cdk.aws_events"
        }
      }
    },
    "@aws-cdk/aws-events-targets": {
      "targets": {
        "dotnet": {
          "iconUrl": "https://raw.githubusercontent.com/aws/aws-cdk/master/logo/default-256-dark.png",
          "namespace": "Amazon.CDK.AWS.Events.Targets",
          "packageId": "Amazon.CDK.AWS.Events.Targets"
        },
        "java": {
          "maven": {
            "artifactId": "events-targets",
            "groupId": "software.amazon.awscdk"
          },
          "package": "software.amazon.awscdk.services.events.targets"
        },
        "js": {
          "npm": "@aws-cdk/aws-events-targets"
        },
        "python": {
          "classifiers": [
            "Framework :: AWS CDK",
            "Framework :: AWS CDK :: 1"
          ],
          "distName": "aws-cdk.aws-events-targets",
          "module": "aws_cdk.aws_events_targets"
        }
      }
    },
    "@aws-cdk/aws-globalaccelerator": {
      "targets": {
        "dotnet": {
          "iconUrl": "https://raw.githubusercontent.com/aws/aws-cdk/master/logo/default-256-dark.png",
          "namespace": "Amazon.CDK.AWS.GlobalAccelerator",
          "packageId": "Amazon.CDK.AWS.GlobalAccelerator"
        },
        "java": {
          "maven": {
            "artifactId": "globalaccelerator",
            "groupId": "software.amazon.awscdk"
          },
          "package": "software.amazon.awscdk.services.globalaccelerator"
        },
        "js": {
          "npm": "@aws-cdk/aws-globalaccelerator"
        },
        "python": {
          "classifiers": [
            "Framework :: AWS CDK",
            "Framework :: AWS CDK :: 1"
          ],
          "distName": "aws-cdk.aws-globalaccelerator",
          "module": "aws_cdk.aws_globalaccelerator"
        }
      }
    },
    "@aws-cdk/aws-iam": {
      "targets": {
        "dotnet": {
          "iconUrl": "https://raw.githubusercontent.com/aws/aws-cdk/master/logo/default-256-dark.png",
          "namespace": "Amazon.CDK.AWS.IAM",
          "packageId": "Amazon.CDK.AWS.IAM"
        },
        "java": {
          "maven": {
            "artifactId": "iam",
            "groupId": "software.amazon.awscdk"
          },
          "package": "software.amazon.awscdk.services.iam"
        },
        "js": {
          "npm": "@aws-cdk/aws-iam"
        },
        "python": {
          "classifiers": [
            "Framework :: AWS CDK",
            "Framework :: AWS CDK :: 1"
          ],
          "distName": "aws-cdk.aws-iam",
          "module": "aws_cdk.aws_iam"
        }
      }
    },
    "@aws-cdk/aws-kinesis": {
      "targets": {
        "dotnet": {
          "iconUrl": "https://raw.githubusercontent.com/aws/aws-cdk/master/logo/default-256-dark.png",
          "namespace": "Amazon.CDK.AWS.Kinesis",
          "packageId": "Amazon.CDK.AWS.Kinesis"
        },
        "java": {
          "maven": {
            "artifactId": "kinesis",
            "groupId": "software.amazon.awscdk"
          },
          "package": "software.amazon.awscdk.services.kinesis"
        },
        "js": {
          "npm": "@aws-cdk/aws-kinesis"
        },
        "python": {
          "classifiers": [
            "Framework :: AWS CDK",
            "Framework :: AWS CDK :: 1"
          ],
          "distName": "aws-cdk.aws-kinesis",
          "module": "aws_cdk.aws_kinesis"
        }
      }
    },
    "@aws-cdk/aws-kinesisfirehose": {
      "targets": {
        "dotnet": {
          "iconUrl": "https://raw.githubusercontent.com/aws/aws-cdk/master/logo/default-256-dark.png",
          "namespace": "Amazon.CDK.AWS.KinesisFirehose",
          "packageId": "Amazon.CDK.AWS.KinesisFirehose"
        },
        "java": {
          "maven": {
            "artifactId": "kinesisfirehose",
            "groupId": "software.amazon.awscdk"
          },
          "package": "software.amazon.awscdk.services.kinesisfirehose"
        },
        "js": {
          "npm": "@aws-cdk/aws-kinesisfirehose"
        },
        "python": {
          "classifiers": [
            "Framework :: AWS CDK",
            "Framework :: AWS CDK :: 1"
          ],
          "distName": "aws-cdk.aws-kinesisfirehose",
          "module": "aws_cdk.aws_kinesisfirehose"
        }
      }
    },
    "@aws-cdk/aws-kms": {
      "targets": {
        "dotnet": {
          "iconUrl": "https://raw.githubusercontent.com/aws/aws-cdk/master/logo/default-256-dark.png",
          "namespace": "Amazon.CDK.AWS.KMS",
          "packageId": "Amazon.CDK.AWS.KMS"
        },
        "java": {
          "maven": {
            "artifactId": "kms",
            "groupId": "software.amazon.awscdk"
          },
          "package": "software.amazon.awscdk.services.kms"
        },
        "js": {
          "npm": "@aws-cdk/aws-kms"
        },
        "python": {
          "classifiers": [
            "Framework :: AWS CDK",
            "Framework :: AWS CDK :: 1"
          ],
          "distName": "aws-cdk.aws-kms",
          "module": "aws_cdk.aws_kms"
        }
      }
    },
    "@aws-cdk/aws-lambda": {
      "targets": {
        "dotnet": {
          "iconUrl": "https://raw.githubusercontent.com/aws/aws-cdk/master/logo/default-256-dark.png",
          "namespace": "Amazon.CDK.AWS.Lambda",
          "packageId": "Amazon.CDK.AWS.Lambda"
        },
        "java": {
          "maven": {
            "artifactId": "lambda",
            "groupId": "software.amazon.awscdk"
          },
          "package": "software.amazon.awscdk.services.lambda"
        },
        "js": {
          "npm": "@aws-cdk/aws-lambda"
        },
        "python": {
          "classifiers": [
            "Framework :: AWS CDK",
            "Framework :: AWS CDK :: 1"
          ],
          "distName": "aws-cdk.aws-lambda",
          "module": "aws_cdk.aws_lambda"
        }
      }
    },
    "@aws-cdk/aws-logs": {
      "targets": {
        "dotnet": {
          "iconUrl": "https://raw.githubusercontent.com/aws/aws-cdk/master/logo/default-256-dark.png",
          "namespace": "Amazon.CDK.AWS.Logs",
          "packageId": "Amazon.CDK.AWS.Logs"
        },
        "java": {
          "maven": {
            "artifactId": "logs",
            "groupId": "software.amazon.awscdk"
          },
          "package": "software.amazon.awscdk.services.logs"
        },
        "js": {
          "npm": "@aws-cdk/aws-logs"
        },
        "python": {
          "classifiers": [
            "Framework :: AWS CDK",
            "Framework :: AWS CDK :: 1"
          ],
          "distName": "aws-cdk.aws-logs",
          "module": "aws_cdk.aws_logs"
        }
      }
    },
    "@aws-cdk/aws-route53": {
      "targets": {
        "dotnet": {
          "iconUrl": "https://raw.githubusercontent.com/aws/aws-cdk/master/logo/default-256-dark.png",
          "namespace": "Amazon.CDK.AWS.Route53",
          "packageId": "Amazon.CDK.AWS.Route53"
        },
        "java": {
          "maven": {
            "artifactId": "route53",
            "groupId": "software.amazon.awscdk"
          },
          "package": "software.amazon.awscdk.services.route53"
        },
        "js": {
          "npm": "@aws-cdk/aws-route53"
        },
        "python": {
          "classifiers": [
            "Framework :: AWS CDK",
            "Framework :: AWS CDK :: 1"
          ],
          "distName": "aws-cdk.aws-route53",
          "module": "aws_cdk.aws_route53"
        }
      }
    },
    "@aws-cdk/aws-route53-targets": {
      "targets": {
        "dotnet": {
          "iconUrl": "https://raw.githubusercontent.com/aws/aws-cdk/master/logo/default-256-dark.png",
          "namespace": "Amazon.CDK.AWS.Route53.Targets",
          "packageId": "Amazon.CDK.AWS.Route53.Targets"
        },
        "java": {
          "maven": {
            "artifactId": "route53-targets",
            "groupId": "software.amazon.awscdk"
          },
          "package": "software.amazon.awscdk.services.route53.targets"
        },
        "js": {
          "npm": "@aws-cdk/aws-route53-targets"
        },
        "python": {
          "classifiers": [
            "Framework :: AWS CDK",
            "Framework :: AWS CDK :: 1"
          ],
          "distName": "aws-cdk.aws-route53-targets",
          "module": "aws_cdk.aws_route53_targets"
        }
      }
    },
    "@aws-cdk/aws-s3": {
      "targets": {
        "dotnet": {
          "iconUrl": "https://raw.githubusercontent.com/aws/aws-cdk/master/logo/default-256-dark.png",
          "namespace": "Amazon.CDK.AWS.S3",
          "packageId": "Amazon.CDK.AWS.S3"
        },
        "java": {
          "maven": {
            "artifactId": "s3",
            "groupId": "software.amazon.awscdk"
          },
          "package": "software.amazon.awscdk.services.s3"
        },
        "js": {
          "npm": "@aws-cdk/aws-s3"
        },
        "python": {
          "classifiers": [
            "Framework :: AWS CDK",
            "Framework :: AWS CDK :: 1"
          ],
          "distName": "aws-cdk.aws-s3",
          "module": "aws_cdk.aws_s3"
        }
      }
    },
    "@aws-cdk/aws-s3-assets": {
      "targets": {
        "dotnet": {
          "iconUrl": "https://raw.githubusercontent.com/aws/aws-cdk/master/logo/default-256-dark.png",
          "namespace": "Amazon.CDK.AWS.S3.Assets",
          "packageId": "Amazon.CDK.AWS.S3.Assets"
        },
        "java": {
          "maven": {
            "artifactId": "s3-assets",
            "groupId": "software.amazon.awscdk"
          },
          "package": "software.amazon.awscdk.services.s3.assets"
        },
        "js": {
          "npm": "@aws-cdk/aws-s3-assets"
        },
        "python": {
          "classifiers": [
            "Framework :: AWS CDK",
            "Framework :: AWS CDK :: 1"
          ],
          "distName": "aws-cdk.aws-s3-assets",
          "module": "aws_cdk.aws_s3_assets"
        }
      }
    },
    "@aws-cdk/aws-sam": {
      "targets": {
        "dotnet": {
          "iconUrl": "https://raw.githubusercontent.com/aws/aws-cdk/master/logo/default-256-dark.png",
          "namespace": "Amazon.CDK.AWS.SAM",
          "packageId": "Amazon.CDK.AWS.SAM"
        },
        "java": {
          "maven": {
            "artifactId": "sam",
            "groupId": "software.amazon.awscdk"
          },
          "package": "software.amazon.awscdk.services.sam"
        },
        "js": {
          "npm": "@aws-cdk/aws-sam"
        },
        "python": {
          "classifiers": [
            "Framework :: AWS CDK",
            "Framework :: AWS CDK :: 1"
          ],
          "distName": "aws-cdk.aws-sam",
          "module": "aws_cdk.aws_sam"
        }
      }
    },
    "@aws-cdk/aws-secretsmanager": {
      "targets": {
        "dotnet": {
          "iconUrl": "https://raw.githubusercontent.com/aws/aws-cdk/master/logo/default-256-dark.png",
          "namespace": "Amazon.CDK.AWS.SecretsManager",
          "packageId": "Amazon.CDK.AWS.SecretsManager"
        },
        "java": {
          "maven": {
            "artifactId": "secretsmanager",
            "groupId": "software.amazon.awscdk"
          },
          "package": "software.amazon.awscdk.services.secretsmanager"
        },
        "js": {
          "npm": "@aws-cdk/aws-secretsmanager"
        },
        "python": {
          "classifiers": [
            "Framework :: AWS CDK",
            "Framework :: AWS CDK :: 1"
          ],
          "distName": "aws-cdk.aws-secretsmanager",
          "module": "aws_cdk.aws_secretsmanager"
        }
      }
    },
    "@aws-cdk/aws-servicediscovery": {
      "targets": {
        "dotnet": {
          "iconUrl": "https://raw.githubusercontent.com/aws/aws-cdk/master/logo/default-256-dark.png",
          "namespace": "Amazon.CDK.AWS.ServiceDiscovery",
          "packageId": "Amazon.CDK.AWS.ServiceDiscovery"
        },
        "java": {
          "maven": {
            "artifactId": "servicediscovery",
            "groupId": "software.amazon.awscdk"
          },
          "package": "software.amazon.awscdk.services.servicediscovery"
        },
        "js": {
          "npm": "@aws-cdk/aws-servicediscovery"
        },
        "python": {
          "classifiers": [
            "Framework :: AWS CDK",
            "Framework :: AWS CDK :: 1"
          ],
          "distName": "aws-cdk.aws-servicediscovery",
          "module": "aws_cdk.aws_servicediscovery"
        }
      }
    },
    "@aws-cdk/aws-signer": {
      "targets": {
        "dotnet": {
          "iconUrl": "https://raw.githubusercontent.com/aws/aws-cdk/master/logo/default-256-dark.png",
          "namespace": "Amazon.CDK.AWS.Signer",
          "packageId": "Amazon.CDK.AWS.Signer"
        },
        "java": {
          "maven": {
            "artifactId": "signer",
            "groupId": "software.amazon.awscdk"
          },
          "package": "software.amazon.awscdk.services.signer"
        },
        "js": {
          "npm": "@aws-cdk/aws-signer"
        },
        "python": {
          "classifiers": [
            "Framework :: AWS CDK",
            "Framework :: AWS CDK :: 1"
          ],
          "distName": "aws-cdk.aws-signer",
          "module": "aws_cdk.aws_signer"
        }
      }
    },
    "@aws-cdk/aws-sns": {
      "targets": {
        "dotnet": {
          "iconUrl": "https://raw.githubusercontent.com/aws/aws-cdk/master/logo/default-256-dark.png",
          "namespace": "Amazon.CDK.AWS.SNS",
          "packageId": "Amazon.CDK.AWS.SNS"
        },
        "java": {
          "maven": {
            "artifactId": "sns",
            "groupId": "software.amazon.awscdk"
          },
          "package": "software.amazon.awscdk.services.sns"
        },
        "js": {
          "npm": "@aws-cdk/aws-sns"
        },
        "python": {
          "classifiers": [
            "Framework :: AWS CDK",
            "Framework :: AWS CDK :: 1"
          ],
          "distName": "aws-cdk.aws-sns",
          "module": "aws_cdk.aws_sns"
        }
      }
    },
    "@aws-cdk/aws-sns-subscriptions": {
      "targets": {
        "dotnet": {
          "iconUrl": "https://raw.githubusercontent.com/aws/aws-cdk/master/logo/default-256-dark.png",
          "namespace": "Amazon.CDK.AWS.SNS.Subscriptions",
          "packageId": "Amazon.CDK.AWS.SNS.Subscriptions"
        },
        "java": {
          "maven": {
            "artifactId": "sns-subscriptions",
            "groupId": "software.amazon.awscdk"
          },
          "package": "software.amazon.awscdk.services.sns.subscriptions"
        },
        "js": {
          "npm": "@aws-cdk/aws-sns-subscriptions"
        },
        "python": {
          "classifiers": [
            "Framework :: AWS CDK",
            "Framework :: AWS CDK :: 1"
          ],
          "distName": "aws-cdk.aws-sns-subscriptions",
          "module": "aws_cdk.aws_sns_subscriptions"
        }
      }
    },
    "@aws-cdk/aws-sqs": {
      "targets": {
        "dotnet": {
          "iconUrl": "https://raw.githubusercontent.com/aws/aws-cdk/master/logo/default-256-dark.png",
          "namespace": "Amazon.CDK.AWS.SQS",
          "packageId": "Amazon.CDK.AWS.SQS"
        },
        "java": {
          "maven": {
            "artifactId": "sqs",
            "groupId": "software.amazon.awscdk"
          },
          "package": "software.amazon.awscdk.services.sqs"
        },
        "js": {
          "npm": "@aws-cdk/aws-sqs"
        },
        "python": {
          "classifiers": [
            "Framework :: AWS CDK",
            "Framework :: AWS CDK :: 1"
          ],
          "distName": "aws-cdk.aws-sqs",
          "module": "aws_cdk.aws_sqs"
        }
      }
    },
    "@aws-cdk/aws-ssm": {
      "targets": {
        "dotnet": {
          "iconUrl": "https://raw.githubusercontent.com/aws/aws-cdk/master/logo/default-256-dark.png",
          "namespace": "Amazon.CDK.AWS.SSM",
          "packageId": "Amazon.CDK.AWS.SSM"
        },
        "java": {
          "maven": {
            "artifactId": "ssm",
            "groupId": "software.amazon.awscdk"
          },
          "package": "software.amazon.awscdk.services.ssm"
        },
        "js": {
          "npm": "@aws-cdk/aws-ssm"
        },
        "python": {
          "classifiers": [
            "Framework :: AWS CDK",
            "Framework :: AWS CDK :: 1"
          ],
          "distName": "aws-cdk.aws-ssm",
          "module": "aws_cdk.aws_ssm"
        }
      }
    },
    "@aws-cdk/aws-stepfunctions": {
      "targets": {
        "dotnet": {
          "iconUrl": "https://raw.githubusercontent.com/aws/aws-cdk/master/logo/default-256-dark.png",
          "namespace": "Amazon.CDK.AWS.StepFunctions",
          "packageId": "Amazon.CDK.AWS.StepFunctions"
        },
        "java": {
          "maven": {
            "artifactId": "stepfunctions",
            "groupId": "software.amazon.awscdk"
          },
          "package": "software.amazon.awscdk.services.stepfunctions"
        },
        "js": {
          "npm": "@aws-cdk/aws-stepfunctions"
        },
        "python": {
          "classifiers": [
            "Framework :: AWS CDK",
            "Framework :: AWS CDK :: 1"
          ],
          "distName": "aws-cdk.aws-stepfunctions",
          "module": "aws_cdk.aws_stepfunctions"
        }
      }
    },
    "@aws-cdk/cloud-assembly-schema": {
      "targets": {
        "dotnet": {
          "iconUrl": "https://raw.githubusercontent.com/aws/aws-cdk/master/logo/default-256-dark.png",
          "namespace": "Amazon.CDK.CloudAssembly.Schema",
          "packageId": "Amazon.CDK.CloudAssembly.Schema"
        },
        "java": {
          "maven": {
            "artifactId": "cdk-cloud-assembly-schema",
            "groupId": "software.amazon.awscdk"
          },
          "package": "software.amazon.awscdk.cloudassembly.schema"
        },
        "js": {
          "npm": "@aws-cdk/cloud-assembly-schema"
        },
        "python": {
          "classifiers": [
            "Framework :: AWS CDK",
            "Framework :: AWS CDK :: 1"
          ],
          "distName": "aws-cdk.cloud-assembly-schema",
          "module": "aws_cdk.cloud_assembly_schema"
        }
      }
    },
    "@aws-cdk/core": {
      "targets": {
        "dotnet": {
          "iconUrl": "https://raw.githubusercontent.com/aws/aws-cdk/master/logo/default-256-dark.png",
          "namespace": "Amazon.CDK",
          "packageId": "Amazon.CDK"
        },
        "java": {
          "maven": {
            "artifactId": "core",
            "groupId": "software.amazon.awscdk"
          },
          "package": "software.amazon.awscdk.core"
        },
        "js": {
          "npm": "@aws-cdk/core"
        },
        "python": {
          "classifiers": [
            "Framework :: AWS CDK",
            "Framework :: AWS CDK :: 1"
          ],
          "distName": "aws-cdk.core",
          "module": "aws_cdk.core"
        }
      }
    },
    "@aws-cdk/custom-resources": {
      "targets": {
        "dotnet": {
          "iconUrl": "https://raw.githubusercontent.com/aws/aws-cdk/master/logo/default-256-dark.png",
          "namespace": "Amazon.CDK.CustomResources",
          "packageId": "Amazon.CDK.AWS.CustomResources"
        },
        "java": {
          "maven": {
            "artifactId": "cdk-customresources",
            "groupId": "software.amazon.awscdk"
          },
          "package": "software.amazon.awscdk.customresources"
        },
        "js": {
          "npm": "@aws-cdk/custom-resources"
        },
        "python": {
          "classifiers": [
            "Framework :: AWS CDK",
            "Framework :: AWS CDK :: 1"
          ],
          "distName": "aws-cdk.custom-resources",
          "module": "aws_cdk.custom_resources"
        }
      }
    },
    "@aws-cdk/cx-api": {
      "targets": {
        "dotnet": {
          "iconUrl": "https://raw.githubusercontent.com/aws/aws-cdk/master/logo/default-256-dark.png",
          "namespace": "Amazon.CDK.CXAPI",
          "packageId": "Amazon.CDK.CXAPI"
        },
        "java": {
          "maven": {
            "artifactId": "cdk-cx-api",
            "groupId": "software.amazon.awscdk"
          },
          "package": "software.amazon.awscdk.cxapi"
        },
        "js": {
          "npm": "@aws-cdk/cx-api"
        },
        "python": {
          "classifiers": [
            "Framework :: AWS CDK",
            "Framework :: AWS CDK :: 1"
          ],
          "distName": "aws-cdk.cx-api",
          "module": "aws_cdk.cx_api"
        }
      }
    },
    "@aws-cdk/region-info": {
      "targets": {
        "dotnet": {
          "iconUrl": "https://raw.githubusercontent.com/aws/aws-cdk/master/logo/default-256-dark.png",
          "namespace": "Amazon.CDK.RegionInfo",
          "packageId": "Amazon.CDK.RegionInfo"
        },
        "java": {
          "maven": {
            "artifactId": "cdk-region-info",
            "groupId": "software.amazon.awscdk"
          },
          "package": "software.amazon.awscdk.regioninfo"
        },
        "js": {
          "npm": "@aws-cdk/region-info"
        },
        "python": {
          "classifiers": [
            "Framework :: AWS CDK",
            "Framework :: AWS CDK :: 1"
          ],
          "distName": "aws-cdk.region-info",
          "module": "aws_cdk.region_info"
        }
      }
    },
    "constructs": {
      "targets": {
        "dotnet": {
          "namespace": "Constructs",
          "packageId": "Constructs"
        },
        "go": {
          "moduleName": "github.com/aws/constructs-go"
        },
        "java": {
          "maven": {
            "artifactId": "constructs",
            "groupId": "software.constructs"
          },
          "package": "software.constructs"
        },
        "js": {
          "npm": "constructs"
        },
        "python": {
          "distName": "constructs",
          "module": "constructs"
        }
      }
    }
  },
  "description": "Continuous Delivery of CDK applications",
  "docs": {
    "stability": "stable"
  },
  "homepage": "https://github.com/aws/aws-cdk",
  "jsiiVersion": "1.34.0 (build 9b72778)",
  "keywords": [
    "aws",
    "cdk",
    "constructs",
    "pipelines",
    "cicd",
    "continuous",
    "delivery"
  ],
  "license": "Apache-2.0",
  "metadata": {
    "jsii": {
      "pacmak": {
        "hasDefaultInterfaces": true
      }
    }
  },
  "name": "@aws-cdk/pipelines",
  "readme": {
    "markdown": "# CDK Pipelines\n<!--BEGIN STABILITY BANNER-->\n\n---\n\n![cdk-constructs: Stable](https://img.shields.io/badge/cdk--constructs-stable-success.svg?style=for-the-badge)\n\n---\n\n<!--END STABILITY BANNER-->\n\nA construct library for painless Continuous Delivery of CDK applications.\n\n> This module contains two sets of APIs: an **original** and a **modern** version of\nCDK Pipelines. The *modern* API has been updated to be easier to work with and\ncustomize, and will be the preferred API going forward. The *original* version\nof the API is still available for backwards compatibility, but we recommend migrating\nto the new version if possible.\n>\n> Compared to the original API, the modern API: has more sensible defaults; is\n> more flexible; supports parallel deployments; supports multiple synth inputs;\n> allows more control of CodeBuild project generation; supports deployment\n> engines other than CodePipeline.\n>\n> The README for the original API, as well as a migration guide, can be found in [our GitHub repository](https://github.com/aws/aws-cdk/blob/master/packages/@aws-cdk/pipelines/ORIGINAL_API.md).\n\n## At a glance\n\nDeploying your application continuously starts by defining a\n`MyApplicationStage`, a subclass of `Stage` that contains the stacks that make\nup a single copy of your application.\n\nYou then define a `Pipeline`, instantiate as many instances of\n`MyApplicationStage` as you want for your test and production environments, with\ndifferent parameters for each, and calling `pipeline.addStage()` for each of\nthem. You can deploy to the same account and Region, or to a different one,\nwith the same amount of code. The *CDK Pipelines* library takes care of the\ndetails.\n\nCDK Pipelines supports multiple *deployment engines* (see below), and comes with\na deployment engine that deployes CDK apps using AWS CodePipeline. To use the\nCodePipeline engine, define a `CodePipeline` construct.  The following\nexample creates a CodePipeline that deploys an application from GitHub:\n\n```ts\n/** The stacks for our app are defined in my-stacks.ts.  The internals of these\n  * stacks aren't important, except that DatabaseStack exposes an attribute\n  * \"table\" for a database table it defines, and ComputeStack accepts a reference\n  * to this table in its properties.\n  */\nimport { DatabaseStack, ComputeStack } from '../lib/my-stacks';\nimport { Construct, Stage, Stack, StackProps, StageProps } from '@aws-cdk/core';\nimport { CodePipeline, CodePipelineSource, ShellStep } from '@aws-cdk/pipelines';\n\n/**\n * Stack to hold the pipeline\n */\nclass MyPipelineStack extends Stack {\n  constructor(scope: Construct, id: string, props?: StackProps) {\n    super(scope, id, props);\n\n    const pipeline = new CodePipeline(this, 'Pipeline', {\n      synth: new ShellStep('Synth', {\n        // Use a connection created using the AWS console to authenticate to GitHub\n        // Other sources are available.\n        input: CodePipelineSource.connection('my-org/my-app', 'main', {\n          connectionArn: 'arn:aws:codestar-connections:us-east-1:222222222222:connection/7d2469ff-514a-4e4f-9003-5ca4a43cdc41', // Created using the AWS console * });',\n        }),\n        commands: [\n          'npm ci',\n          'npm run build',\n          'npx cdk synth',\n        ],\n      }),\n    });\n\n    // 'MyApplication' is defined below. Call `addStage` as many times as\n    // necessary with any account and region (may be different from the\n    // pipeline's).\n    pipeline.addStage(new MyApplication(this, 'Prod', {\n      env: {\n        account: '123456789012',\n        region: 'eu-west-1',\n      }\n    }));\n  }\n}\n\n/**\n * Your application\n *\n * May consist of one or more Stacks (here, two)\n *\n * By declaring our DatabaseStack and our ComputeStack inside a Stage,\n * we make sure they are deployed together, or not at all.\n */\nclass MyApplication extends Stage {\n  constructor(scope: Construct, id: string, props?: StageProps) {\n    super(scope, id, props);\n\n    const dbStack = new DatabaseStack(this, 'Database');\n    new ComputeStack(this, 'Compute', {\n      table: dbStack.table,\n    });\n  }\n}\n\n// In your main file\nnew MyPipelineStack(app, 'PipelineStack', {\n  env: {\n    account: '123456789012',\n    region: 'eu-west-1',\n  }\n});\n```\n\nThe pipeline is **self-mutating**, which means that if you add new\napplication stages in the source code, or new stacks to `MyApplication`, the\npipeline will automatically reconfigure itself to deploy those new stages and\nstacks.\n\n(Note that have to *bootstrap* all environments before the above code\nwill work, see the section **CDK Environment Bootstrapping** below).\n\n## CDK Versioning\n\nThis library uses prerelease features of the CDK framework, which can be enabled\nby adding the following to `cdk.json`:\n\n```js\n{\n  // ...\n  \"context\": {\n    \"@aws-cdk/core:newStyleStackSynthesis\": true\n  }\n}\n```\n\n## Provisioning the pipeline\n\nTo provision the pipeline you have defined, making sure the target environment\nhas been bootstrapped (see below), and then executing deploying the\n`PipelineStack` *once*. Afterwards, the pipeline will keep itself up-to-date.\n\n> **Important**: be sure to `git commit` and `git push` before deploying the\n> Pipeline stack using `cdk deploy`!\n>\n> The reason is that the pipeline will start deploying and self-mutating\n> right away based on the sources in the repository, so the sources it finds\n> in there should be the ones you want it to find.\n\nRun the following commands to get the pipeline going:\n\n```console\n$ git commit -a\n$ git push\n$ cdk deploy PipelineStack\n```\n\nAdministrative permissions to the account are only necessary up until\nthis point. We recommend you shed access to these credentials after doing this.\n\n### Working on the pipeline\n\nThe self-mutation feature of the Pipeline might at times get in the way\nof the pipeline development workflow. Each change to the pipeline must be pushed\nto git, otherwise, after the pipeline was updated using `cdk deploy`, it will\nautomatically revert to the state found in git.\n\nTo make the development more convenient, the self-mutation feature can be turned\noff temporarily, by passing `selfMutation: false` property, example:\n\n```ts\n// Modern API\nconst pipeline = new CodePipeline(this, 'Pipeline', {\n  selfMutation: false,\n  ...\n});\n\n// Original API\nconst pipeline = new CdkPipeline(this, 'Pipeline', {\n  selfMutating: false,\n  ...\n});\n```\n\n## Definining the pipeline\n\nThis section of the documentation describes the AWS CodePipeline engine, which\ncomes with this library. If you want to use a different deployment engine, read\nthe section *Using a different deployment engine* below.\n\n### Synth and sources\n\nTo define a pipeline, instantiate a `CodePipeline` construct from the\n`@aws-cdk/pipelines` module. It takes one argument, a `synth` step, which is\nexpected to produce the CDK Cloud Assembly as its single output (the contents of\nthe `cdk.out` directory after running `cdk synth`). \"Steps\" are arbitrary\nactions in the pipeline, typically used to run scripts or commands.\n\nFor the synth, use a `ShellStep` and specify the commands necessary to install\ndependencies, the CDK CLI, build your project and run `cdk synth`; the specific\ncommands required will depend on the programming language you are using. For a\ntypical NPM-based project, the synth will look like this:\n\n```ts\nconst source = /* the repository source */;\n\nconst pipeline = new CodePipeline(this, 'Pipeline', {\n  synth: new ShellStep('Synth', {\n    input: source,\n    commands: [\n      'npm ci',\n      'npm run build',\n      'npx cdk synth',\n    ],\n  }),\n});\n```\n\nThe pipeline assumes that your `ShellStep` will produce a `cdk.out`\ndirectory in the root, containing the CDK cloud assembly. If your\nCDK project lives in a subdirectory, be sure to adjust the\n`primaryOutputDirectory` to match:\n\n```ts\nconst pipeline = new CodePipeline(this, 'Pipeline', {\n  synth: new ShellStep('Synth', {\n    input: source,\n    commands: [\n      'cd mysubdir',\n      'npm ci',\n      'npm run build',\n      'npx cdk synth',\n    ],\n    primaryOutputDirectory: 'mysubdir/cdk.out',\n  }),\n});\n```\n\nThe underlying `@aws-cdk/aws-codepipeline.Pipeline` construct will be produced\nwhen `app.synth()` is called. You can also force it to be produced\nearlier by calling `pipeline.buildPipeline()`. After you've called\nthat method, you can inspect the constructs that were produced by\naccessing the properties of the `pipeline` object.\n\n#### Commands for other languages and package managers\n\nThe commands you pass to `new ShellStep` will be very similar to the commands\nyou run on your own workstation to install dependencies and synth your CDK\nproject. Here are some (non-exhaustive) examples for what those commands might\nlook like in a number of different situations.\n\nFor Yarn, the install commands are different:\n\n```ts\nconst pipeline = new CodePipeline(this, 'Pipeline', {\n  synth: new ShellStep('Synth', {\n    input: source,\n    commands: [\n      'yarn install --frozen-lockfile',\n      'yarn build',\n      'npx cdk synth',\n    ],\n  })\n});\n```\n\nFor Python projects, remember to install the CDK CLI globally (as\nthere is no `package.json` to automatically install it for you):\n\n```ts\nconst pipeline = new CodePipeline(this, 'Pipeline', {\n  synth: new ShellStep('Synth', {\n    input: source,\n    commands: [\n      'pip install -r requirements.txt',\n      'npm install -g aws-cdk',\n      'cdk synth',\n    ],\n  })\n});\n```\n\nFor Java projects, remember to install the CDK CLI globally (as\nthere is no `package.json` to automatically install it for you),\nand the Maven compilation step is automatically executed for you\nas you run `cdk synth`:\n\n```ts\nconst pipeline = new CodePipeline(this, 'Pipeline', {\n  synth: new ShellStep('Synth', {\n    input: source,\n    commands: [\n      'npm install -g aws-cdk',\n      'cdk synth',\n    ],\n  })\n});\n```\n\nYou can adapt these examples to your own situation.\n\n#### CodePipeline Sources\n\nIn CodePipeline, *Sources* define where the source of your application lives.\nWhen a change to the source is detected, the pipeline will start executing.\nSource objects can be created by factory methods on the `CodePipelineSource` class:\n\n##### GitHub, GitHub Enterprise, BitBucket using a connection\n\nThe recommended way of connecting to GitHub or BitBucket is by using a *connection*.\nYou will first use the AWS Console to authenticate to the source control\nprovider, and then use the connection ARN in your pipeline definition:\n\n```ts\nCodePipelineSource.connection('org/repo', 'branch', {\n  connectionArn: 'arn:aws:codestar-connections:us-east-1:222222222222:connection/7d2469ff-514a-4e4f-9003-5ca4a43cdc41',\n});\n```\n\n##### GitHub using OAuth\n\nYou can also authenticate to GitHub using a personal access token. This expects\nthat you've created a personal access token and stored it in Secrets Manager.\nBy default, the source object will look for a secret named **github-token**, but\nyou can change the name. The token should have the **repo** and **admin:repo_hook**\nscopes.\n\n```ts\nCodePipelineSource.gitHub('org/repo', 'branch', {\n  // This is optional\n  authentication: SecretValue.secretsManager('my-token'),\n});\n```\n\n##### CodeCommit\n\nYou can use a CodeCommit repository as the source. Either create or import\nthat the CodeCommit repository and then use `CodePipelineSource.codeCommit`\nto reference it:\n\n```ts\nconst repository = codecommit.fromRepositoryName(this, 'Repository', 'my-repository');\nCodePipelineSource.codeCommit(repository);\n```\n\n##### S3\n\nYou can use a zip file in S3 as the source of the pipeline. The pipeline will be\ntriggered every time the file in S3 is changed:\n\n```ts\nconst bucket = s3.Bucket.fromBucketName(this, 'Bucket', 'my-bucket');\nCodePipelineSource.s3(bucket, 'my/source.zip');\n```\n\n#### Additional inputs\n\n`ShellStep` allows passing in more than one input: additional\ninputs will be placed in the directories you specify. Any step that produces an\noutput file set can be used as an input, such as a `CodePipelineSource`, but\nalso other `ShellStep`:\n\n```ts\nconst prebuild = new ShellStep('Prebuild', {\n  input: CodePipelineSource.gitHub('myorg/repo1'),\n  primaryOutputDirectory: './build',\n  commands: ['./build.sh'],\n});\n\nconst pipeline = new CodePipeline(this, 'Pipeline', {\n  synth: new ShellStep('Synth', {\n    input: CodePipelineSource.gitHub('myorg/repo2'),\n    additionalInputs: {\n      'subdir': CodePipelineSource.gitHub('myorg/repo3'),\n      '../siblingdir': prebuild,\n    },\n\n    commands: ['./build.sh'],\n  })\n});\n```\n\n### CDK application deployments\n\nAfter you have defined the pipeline and the `synth` step, you can add one or\nmore CDK `Stages` which will be deployed to their target environments. To do\nso, call `pipeline.addStage()` on the Stage object:\n\n```ts\n// Do this as many times as necessary with any account and region\n// Account and region may different from the pipeline's.\npipeline.addStage(new MyApplicationStage(this, 'Prod', {\n  env: {\n    account: '123456789012',\n    region: 'eu-west-1',\n  }\n}));\n```\n\nCDK Pipelines will automatically discover all `Stacks` in the given `Stage`\nobject, determine their dependency order, and add appropriate actions to the\npipeline to publish the assets referenced in those stacks and deploy the stacks\nin the right order.\n\nIf the `Stacks` are targeted at an environment in a different AWS account or\nRegion and that environment has been\n[bootstrapped](https://docs.aws.amazon.com/cdk/latest/guide/bootstrapping.html)\n, CDK Pipelines will transparently make sure the IAM roles are set up\ncorrectly and any requisite replication Buckets are created.\n\n#### Deploying in parallel\n\nBy default, all applications added to CDK Pipelines by calling `addStage()` will\nbe deployed in sequence, one after the other. If you have a lot of stages, you can\nspeed up the pipeline by choosing to deploy some stages in parallel. You do this\nby calling `addWave()` instead of `addStage()`: a *wave* is a set of stages that\nare all deployed in parallel instead of sequentially. Waves themselves are still\ndeployed in sequence. For example, the following will deploy two copies of your\napplication to `eu-west-1` and `eu-central-1` in parallel:\n\n```ts\nconst europeWave = pipeline.addWave('Europe');\neuropeWave.addStage(new MyApplicationStage(this, 'Ireland', {\n  env: { region: 'eu-west-1' }\n}));\neuropeWave.addStage(new MyApplicationStage(this, 'Germany', {\n  env: { region: 'eu-central-1' }\n}));\n```\n\n#### Deploying to other accounts / encrypting the Artifact Bucket\n\nCDK Pipelines can transparently deploy to other Regions and other accounts\n(provided those target environments have been\n[*bootstrapped*](https://docs.aws.amazon.com/cdk/latest/guide/bootstrapping.html)).\nHowever, deploying to another account requires one additional piece of\nconfiguration: you need to enable `crossAccountKeys: true` when creating the\npipeline.\n\nThis will encrypt the artifact bucket(s), but incurs a cost for maintaining the\nKMS key.\n\nExample:\n\n```ts\nconst pipeline = new CodePipeline(this, 'Pipeline', {\n  // Encrypt artifacts, required for cross-account deployments\n  crossAccountKeys: true,\n});\n```\n\n### Validation\n\nEvery `addStage()` and `addWave()` command takes additional options. As part of these options,\nyou can specify `pre` and `post` steps, which are arbitrary steps that run before or after\nthe contents of the stage or wave, respectively. You can use these to add validations like\nmanual or automated gates to your pipeline. We recommend putting manual approval gates in the set of `pre` steps, and automated approval gates in\nthe set of `post` steps.\n\nThe following example shows both an automated approval in the form of a `ShellStep`, and\na manual approvel in the form of a `ManualApprovalStep` added to the pipeline. Both must\npass in order to promote from the `PreProd` to the `Prod` environment:\n\n```ts\nconst preprod = new MyApplicationStage(this, 'PreProd', { ... });\nconst prod = new MyApplicationStage(this, 'Prod', { ... });\n\npipeline.addStage(preprod, {\n  post: [\n    new ShellStep('Validate Endpoint', {\n      commands: ['curl -Ssf https://my.webservice.com/'],\n    }),\n  ],\n});\npipeline.addStage(prod, {\n  pre: [\n    new ManualApprovalStep('PromoteToProd'),\n  ],\n});\n```\n\n#### Using CloudFormation Stack Outputs in approvals\n\nBecause many CloudFormation deployments result in the generation of resources with unpredictable\nnames, validations have support for reading back CloudFormation Outputs after a deployment. This\nmakes it possible to pass (for example) the generated URL of a load balancer to the test set.\n\nTo use Stack Outputs, expose the `CfnOutput` object you're interested in, and\npass it to `envFromCfnOutputs` of the `ShellStep`:\n\n```ts\nclass MyApplicationStage extends Stage {\n  public readonly loadBalancerAddress: CfnOutput;\n  // ...\n}\n\nconst lbApp = new MyApplicationStage(this, 'MyApp', { /* ... */ });\npipeline.addStage(lbApp, {\n  post: [\n    new ShellStep('HitEndpoint', {\n      envFromCfnOutputs: {\n        // Make the load balancer address available as $URL inside the commands\n        URL: lbApp.loadBalancerAddress,\n      },\n      commands: ['curl -Ssf $URL'],\n    });\n  ],\n});\n```\n\n#### Running scripts compiled during the synth step\n\nAs part of a validation, you probably want to run a test suite that's more\nelaborate than what can be expressed in a couple of lines of shell script.\nYou can bring additional files into the shell script validation by supplying\nthe `input` or `additionalInputs` property of `ShellStep`. The input can\nbe produced by the `Synth` step, or come from a source or any other build\nstep.\n\nHere's an example that captures an additional output directory in the synth\nstep and runs tests from there:\n\n```ts\nconst synth = new ShellStep('Synth', { /* ... */ });\nconst pipeline = new CodePipeline(this, 'Pipeline', { synth });\n\npipeline.addStage(/* ... */, {\n  post: [\n    new ShellStep('Approve', {\n      // Use the contents of the 'integ' directory from the synth step as the input\n      input: synth.addOutputDirectory('integ'),\n      commands: ['cd integ && ./run.sh'],\n    }),\n  ],\n});\n```\n\n### Customizing CodeBuild Projects\n\nCDK pipelines will generate CodeBuild projects for each `ShellStep` you use, and it\nwill also generate CodeBuild projects to publish assets and perform the self-mutation\nof the pipeline. To control the various aspects of the CodeBuild projects that get\ngenerated, use a `CodeBuildStep` instead of a `ShellStep`. This class has a number\nof properties that allow you to customize various aspects of the projects:\n\n```ts\nnew CodeBuildStep('Synth', {\n  // ...standard ShellStep props...\n  commands: [/* ... */],\n  env: { /* ... */ },\n\n  // If you are using a CodeBuildStep explicitly, set the 'cdk.out' directory\n  // to be the synth step's output.\n  primaryOutputDirectory: 'cdk.out',\n\n  // Control the name of the project\n  projectName: 'MyProject',\n\n  // Control parts of the BuildSpec other than the regular 'build' and 'install' commands\n  partialBuildSpec: codebuild.BuildSpec.fromObject({\n    version: '0.2',\n    // ...\n  }),\n\n  // Control the build environment\n  buildEnvironment: {\n    computeType: codebuild.ComputeType.LARGE,\n  },\n\n  // Control Elastic Network Interface creation\n  vpc: vpc,\n  subnetSelection: { subnetType: ec2.SubnetType.PRIVATE },\n  securityGroups: [mySecurityGroup],\n\n  // Additional policy statements for the execution role\n  rolePolicy: [\n    new iam.PolicyStatement({ /* ... */ }),\n  ],\n});\n```\n\nYou can also configure defaults for *all* CodeBuild projects by passing `codeBuildDefaults`,\nor just for the synth, asset publishing, and self-mutation projects by passing `synthCodeBuildDefaults`,\n`assetPublishingCodeBuildDefaults`, or `selfMutationCodeBuildDefaults`:\n\n```ts\nnew CodePipeline(this, 'Pipeline', {\n  // ...\n\n  // Defaults for all CodeBuild projects\n  codeBuildDefaults: {\n    // Prepend commands and configuration to all projects\n    partialBuildSpec: codebuild.BuildSpec.fromObject({\n      version: '0.2',\n      // ...\n    }),\n\n    // Control the build environment\n    buildEnvironment: {\n      computeType: codebuild.ComputeType.LARGE,\n    },\n\n    // Control Elastic Network Interface creation\n    vpc: vpc,\n    subnetSelection: { subnetType: ec2.SubnetType.PRIVATE },\n    securityGroups: [mySecurityGroup],\n\n    // Additional policy statements for the execution role\n    rolePolicy: [\n      new iam.PolicyStatement({ /* ... */ }),\n    ],\n  },\n\n  synthCodeBuildDefaults: { /* ... */ },\n  assetPublishingCodeBuildDefaults: { /* ... */ },\n  selfMutationCodeBuildDefaults: { /* ... */ },\n});\n```\n\n### Arbitrary CodePipeline actions\n\nIf you want to add a type of CodePipeline action to the CDK Pipeline that\ndoesn't have a matching class yet, you can define your own step class that extends\n`Step` and implements `ICodePipelineActionFactory`.\n\nHere's an example that adds a Jenkins step:\n\n```ts\nclass MyJenkinsStep extends Step implements ICodePipelineActionFactory {\n  constructor(private readonly provider: codepipeline_actions.JenkinsProvider, private readonly input: FileSet) {\n  }\n\n  public produceAction(stage: codepipeline.IStage, options: ProduceActionOptions): CodePipelineActionFactoryResult {\n\n    // This is where you control what type of Action gets added to the\n    // CodePipeline\n    stage.addAction(new codepipeline_actions.JenkinsAction({\n      // Copy 'actionName' and 'runOrder' from the options\n      actionName: options.actionName,\n      runOrder: options.runOrder,\n\n      // Jenkins-specific configuration\n      type: cpactions.JenkinsActionType.TEST,\n      jenkinsProvider: this.provider,\n      projectName: 'MyJenkinsProject',\n\n      // Translate the FileSet into a codepipeline.Artifact\n      inputs: [options.artifacts.toCodePipeline(this.input)],\n    }));\n\n    return { runOrdersConsumed: 1 };\n  }\n}\n```\n\n## Using Docker in the pipeline\n\nDocker can be used in 3 different places in the pipeline:\n\n* If you are using Docker image assets in your application stages: Docker will\n  run in the asset publishing projects.\n* If you are using Docker image assets in your stack (for example as\n  images for your CodeBuild projects): Docker will run in the self-mutate project.\n* If you are using Docker to bundle file assets anywhere in your project (for\n  example, if you are using such construct libraries as\n  `@aws-cdk/aws-lambda-nodejs`): Docker will run in the\n  *synth* project.\n\nFor the first case, you don't need to do anything special. For the other two cases,\nyou need to make sure that **privileged mode** is enabled on the correct CodeBuild\nprojects, so that Docker can run correctly. The follow sections describe how to do\nthat.\n\nYou may also need to authenticate to Docker registries to avoid being throttled.\nSee the section **Authenticating to Docker registries** below for information on how to do\nthat.\n\n### Using Docker image assets in the pipeline\n\nIf your `PipelineStack` is using Docker image assets (as opposed to the application\nstacks the pipeline is deploying), for example by the use of `LinuxBuildImage.fromAsset()`,\nyou need to pass `dockerEnabledForSelfMutation: true` to the pipeline. For example:\n\n```ts\nconst pipeline = new CodePipeline(this, 'Pipeline', {\n  // ...\n\n  // Turn this on because the pipeline uses Docker image assets\n  dockerEnabledForSelfMutation: true,\n});\n\npipeline.addWave('MyWave', {\n  post: [\n    new CodeBuildStep('RunApproval', {\n      commands: ['command-from-image'],\n      buildEnvironment: {\n        // The user of a Docker image asset in the pipeline requires turning on\n        // 'dockerEnabledForSelfMutation'.\n        buildImage: LinuxBuildImage.fromAsset(this, 'Image', {\n          directory: './docker-image',\n        })\n      },\n    })\n  ],\n});\n```\n\n> **Important**: You must turn on the `dockerEnabledForSelfMutation` flag,\n> commit and allow the pipeline to self-update *before* adding the actual\n> Docker asset.\n\n### Using bundled file assets\n\nIf you are using asset bundling anywhere (such as automatically done for you\nif you add a construct like `@aws-cdk/aws-lambda-nodejs`), you need to pass\n`dockerEnabledForSynth: true` to the pipeline. For example:\n\n```ts\nconst pipeline = new CodePipeline(this, 'Pipeline', {\n  // ...\n\n  // Turn this on because the application uses bundled file assets\n  dockerEnabledForSynth: true,\n});\n```\n\n> **Important**: You must turn on the `dockerEnabledForSynth` flag,\n> commit and allow the pipeline to self-update *before* adding the actual\n> Docker asset.\n\n### Authenticating to Docker registries\n\nYou can specify credentials to use for authenticating to Docker registries as part of the\npipeline definition. This can be useful if any Docker image assets — in the pipeline or\nany of the application stages — require authentication, either due to being in a\ndifferent environment (e.g., ECR repo) or to avoid throttling (e.g., DockerHub).\n\n```ts\nconst dockerHubSecret = secretsmanager.Secret.fromSecretCompleteArn(this, 'DHSecret', 'arn:aws:...');\nconst customRegSecret = secretsmanager.Secret.fromSecretCompleteArn(this, 'CRSecret', 'arn:aws:...');\nconst repo1 = ecr.Repository.fromRepositoryArn(stack, 'Repo', 'arn:aws:ecr:eu-west-1:0123456789012:repository/Repo1');\nconst repo2 = ecr.Repository.fromRepositoryArn(stack, 'Repo', 'arn:aws:ecr:eu-west-1:0123456789012:repository/Repo2');\n\nconst pipeline = new CodePipeline(this, 'Pipeline', {\n  dockerCredentials: [\n    DockerCredential.dockerHub(dockerHubSecret),\n    DockerCredential.customRegistry('dockerregistry.example.com', customRegSecret),\n    DockerCredential.ecr([repo1, repo2]);\n  ],\n  // ...\n});\n```\n\nFor authenticating to Docker registries that require a username and password combination\n(like DockerHub), create a Secrets Manager Secret with fields named `username`\nand `secret`, and import it (the field names change be customized).\n\nAuthentication to ECR repostories is done using the execution role of the\nrelevant CodeBuild job. Both types of credentials can be provided with an\noptional role to assume before requesting the credentials.\n\nBy default, the Docker credentials provided to the pipeline will be available to\nthe **Synth**, **Self-Update**, and **Asset Publishing** actions within the\n*pipeline. The scope of the credentials can be limited via the `DockerCredentialUsage` option.\n\n```ts\nconst dockerHubSecret = secretsmanager.Secret.fromSecretCompleteArn(this, 'DHSecret', 'arn:aws:...');\n// Only the image asset publishing actions will be granted read access to the secret.\nconst creds = DockerCredential.dockerHub(dockerHubSecret, { usages: [DockerCredentialUsage.ASSET_PUBLISHING] });\n```\n\n## CDK Environment Bootstrapping\n\nAn *environment* is an *(account, region)* pair where you want to deploy a\nCDK stack (see\n[Environments](https://docs.aws.amazon.com/cdk/latest/guide/environments.html)\nin the CDK Developer Guide). In a Continuous Deployment pipeline, there are\nat least two environments involved: the environment where the pipeline is\nprovisioned, and the environment where you want to deploy the application (or\ndifferent stages of the application). These can be the same, though best\npractices recommend you isolate your different application stages from each\nother in different AWS accounts or regions.\n\nBefore you can provision the pipeline, you have to *bootstrap* the environment you want\nto create it in. If you are deploying your application to different environments, you\nalso have to bootstrap those and be sure to add a *trust* relationship.\n\nAfter you have bootstrapped an environment and created a pipeline that deploys\nto it, it's important that you don't delete the stack or change its *Qualifier*,\nor future deployments to this environment will fail. If you want to upgrade\nthe bootstrap stack to a newer version, do that by updating it in-place.\n\n> This library requires the *modern* bootstrapping stack which has\n> been updated specifically to support cross-account continuous delivery. Starting,\n> in CDK v2 this new bootstrapping stack will become the default, but for now it is still\n> opt-in.\n>\n> The commands below assume you are running `cdk bootstrap` in a directory\n> where `cdk.json` contains the `\"@aws-cdk/core:newStyleStackSynthesis\": true`\n> setting in its context, which will switch to the new bootstrapping stack\n> automatically.\n>\n> If run from another directory, be sure to run the bootstrap command with\n> the environment variable `CDK_NEW_BOOTSTRAP=1` set.\n\nTo bootstrap an environment for provisioning the pipeline:\n\n```console\n$ env CDK_NEW_BOOTSTRAP=1 npx cdk bootstrap \\\n    [--profile admin-profile-1] \\\n    --cloudformation-execution-policies arn:aws:iam::aws:policy/AdministratorAccess \\\n    aws://111111111111/us-east-1\n```\n\nTo bootstrap a different environment for deploying CDK applications into using\na pipeline in account `111111111111`:\n\n```console\n$ env CDK_NEW_BOOTSTRAP=1 npx cdk bootstrap \\\n    [--profile admin-profile-2] \\\n    --cloudformation-execution-policies arn:aws:iam::aws:policy/AdministratorAccess \\\n    --trust 11111111111 \\\n    aws://222222222222/us-east-2\n```\n\nIf you only want to trust an account to do lookups (e.g, when your CDK application has a\n`Vpc.fromLookup()` call), use the option `--trust-for-lookup`:\n\n```console\n$ env CDK_NEW_BOOTSTRAP=1 npx cdk bootstrap \\\n    [--profile admin-profile-2] \\\n    --cloudformation-execution-policies arn:aws:iam::aws:policy/AdministratorAccess \\\n    --trust-for-lookup 11111111111 \\\n    aws://222222222222/us-east-2\n```\n\nThese command lines explained:\n\n* `npx`: means to use the CDK CLI from the current NPM install. If you are using\n  a global install of the CDK CLI, leave this out.\n* `--profile`: should indicate a profile with administrator privileges that has\n  permissions to provision a pipeline in the indicated account. You can leave this\n  flag out if either the AWS default credentials or the `AWS_*` environment\n  variables confer these permissions.\n* `--cloudformation-execution-policies`: ARN of the managed policy that future CDK\n  deployments should execute with. By default this is `AdministratorAccess`, but\n  if you also specify the `--trust` flag to give another Account permissions to\n  deploy into the current account, you must specify a value here.\n* `--trust`: indicates which other account(s) should have permissions to deploy\n  CDK applications into this account. In this case we indicate the Pipeline's account,\n  but you could also use this for developer accounts (don't do that for production\n  application accounts though!).\n* `--trust-for-lookup`: gives a more limited set of permissions to the\n  trusted account, only allowing it to look up values such as availability zones, EC2 images and\n  VPCs. `--trust-for-lookup` does not give permissions to modify anything in the account.\n  Note that `--trust` implies `--trust-for-lookup`, so you don't need to specify\n  the same acocunt twice.\n* `aws://222222222222/us-east-2`: the account and region we're bootstrapping.\n\n> Be aware that anyone who has access to the trusted Accounts **effectively has all\n> permissions conferred by the configured CloudFormation execution policies**,\n> allowing them to do things like read arbitrary S3 buckets and create arbitrary\n> infrastructure in the bootstrapped account.  Restrict the list of `--trust`ed Accounts,\n> or restrict the policies configured by `--cloudformation-execution-policies`.\n\n<br>\n\n> **Security tip**: we recommend that you use administrative credentials to an\n> account only to bootstrap it and provision the initial pipeline. Otherwise,\n> access to administrative credentials should be dropped as soon as possible.\n\n<br>\n\n> **On the use of AdministratorAccess**: The use of the `AdministratorAccess` policy\n> ensures that your pipeline can deploy every type of AWS resource to your account.\n> Make sure you trust all the code and dependencies that make up your CDK app.\n> Check with the appropriate department within your organization to decide on the\n> proper policy to use.\n>\n> If your policy includes permissions to create on attach permission to a role,\n> developers can escalate their privilege with more permissive permission.\n> Thus, we recommend implementing [permissions boundary](https://aws.amazon.com/premiumsupport/knowledge-center/iam-permission-boundaries/)\n> in the CDK Execution role. To do this, you can bootstrap with the `--template` option with\n> [a customized template](https://github.com/aws-samples/aws-bootstrap-kit-examples/blob/ba28a97d289128281bc9483bcba12c1793f2c27a/source/1-SDLC-organization/lib/cdk-bootstrap-template.yml#L395) that contains a permission boundary.\n\n### Migrating from old bootstrap stack\n\nThe bootstrap stack is a CloudFormation stack in your account named\n**CDKToolkit** that provisions a set of resources required for the CDK\nto deploy into that environment.\n\nThe \"new\" bootstrap stack (obtained by running `cdk bootstrap` with\n`CDK_NEW_BOOTSTRAP=1`) is slightly more elaborate than the \"old\" stack. It\ncontains:\n\n* An S3 bucket and ECR repository with predictable names, so that we can reference\n  assets in these storage locations *without* the use of CloudFormation template\n  parameters.\n* A set of roles with permissions to access these asset locations and to execute\n  CloudFormation, assumable from whatever accounts you specify under `--trust`.\n\nIt is possible and safe to migrate from the old bootstrap stack to the new\nbootstrap stack. This will create a new S3 file asset bucket in your account\nand orphan the old bucket. You should manually delete the orphaned bucket\nafter you are sure you have redeployed all CDK applications and there are no\nmore references to the old asset bucket.\n\n## Context Lookups\n\nYou might be using CDK constructs that need to look up [runtime\ncontext](https://docs.aws.amazon.com/cdk/latest/guide/context.html#context_methods),\nwhich is information from the target AWS Account and Region the CDK needs to\nsynthesize CloudFormation templates appropriate for that environment. Examples\nof this kind of context lookups are the number of Availability Zones available\nto you, a Route53 Hosted Zone ID, or the ID of an AMI in a given region. This\ninformation is automatically looked up when you run `cdk synth`.\n\nBy default, a `cdk synth` performed in a pipeline will not have permissions\nto perform these lookups, and the lookups will fail. This is by design.\n\n**Our recommended way of using lookups** is by running `cdk synth` on the\ndeveloper workstation and checking in the `cdk.context.json` file, which\ncontains the results of the context lookups. This will make sure your\nsynthesized infrastructure is consistent and repeatable. If you do not commit\n`cdk.context.json`, the results of the lookups may suddenly be different in\nunexpected ways, and even produce results that cannot be deployed or will cause\ndata loss.  To give an account permissions to perform lookups against an\nenvironment, without being able to deploy to it and make changes, run\n`cdk bootstrap --trust-for-lookup=<account>`.\n\nIf you want to use lookups directly from the pipeline, you either need to accept\nthe risk of nondeterminism, or make sure you save and load the\n`cdk.context.json` file somewhere between synth runs. Finally, you should\ngive the synth CodeBuild execution role permissions to assume the bootstrapped\nlookup roles. As an example, doing so would look like this:\n\n```ts\nnew CodePipeline(this, 'Pipeline', {\n  synth: new CodeBuildStep('Synth', {\n    input: // ...input...\n    commands: [\n      // Commands to load cdk.context.json from somewhere here\n      '...',\n      'npm ci',\n      'npm run build',\n      'npx cdk synth',\n      // Commands to store cdk.context.json back here\n      '...',\n    ],\n    rolePolicyStatements: [\n      new iam.PolicyStatement({\n        actions: ['sts:AssumeRole'],\n        resources: ['*'],\n        conditions: {\n          StringEquals: {\n            'iam:ResourceTag/aws-cdk:bootstrap-role': 'lookup',\n          },\n        },\n      }),\n    ],\n  }),\n});\n```\n\nThe above example requires that the target environments have all\nbeen bootstrapped with bootstrap stack version `8`, released with\nCDK CLI `1.114.0`.\n\n## Security Considerations\n\nIt's important to stay safe while employing Continuous Delivery. The CDK Pipelines\nlibrary comes with secure defaults to the best of our ability, but by its\nvery nature the library cannot take care of everything.\n\nWe therefore expect you to mind the following:\n\n* Maintain dependency hygiene and vet 3rd-party software you use. Any software you\n  run on your build machine has the ability to change the infrastructure that gets\n  deployed. Be careful with the software you depend on.\n\n* Use dependency locking to prevent accidental upgrades! The default `CdkSynths` that\n  come with CDK Pipelines will expect `package-lock.json` and `yarn.lock` to\n  ensure your dependencies are the ones you expect.\n\n* Credentials to production environments should be short-lived. After\n  bootstrapping and the initial pipeline provisioning, there is no more need for\n  developers to have access to any of the account credentials; all further\n  changes can be deployed through git. Avoid the chances of credentials leaking\n  by not having them in the first place!\n\n### Confirm permissions broadening\n\nTo keep tabs on the security impact of changes going out through your pipeline,\nyou can insert a security check before any stage deployment. This security check\nwill check if the upcoming deployment would add any new IAM permissions or\nsecurity group rules, and if so pause the pipeline and require you to confirm\nthe changes.\n\nThe security check will appear as two distinct actions in your pipeline: first\na CodeBuild project that runs `cdk diff` on the stage that's about to be deployed,\nfollowed by a Manual Approval action that pauses the pipeline. If it so happens\nthat there no new IAM permissions or security group rules will be added by the deployment,\nthe manual approval step is automatically satisfied. The pipeline will look like this:\n\n```txt\nPipeline\n├── ...\n├── MyApplicationStage\n│    ├── MyApplicationSecurityCheck       // Security Diff Action\n│    ├── MyApplicationManualApproval      // Manual Approval Action\n│    ├── Stack.Prepare\n│    └── Stack.Deploy\n└── ...\n```\n\nYou can insert the security check by using a `ConfirmPermissionsBroadening` step:\n\n```ts\nconst stage = new MyApplicationStage(this, 'MyApplication');\npipeline.addStage(stage, {\n  pre: [\n    new ConfirmPermissionsBroadening('Check', { stage }),\n  ],\n});\n```\n\nTo get notified when there is a change that needs your manual approval,\ncreate an SNS Topic, subscribe your own email address, and pass it in as\nas the `notificationTopic` property:\n\n```ts\nimport * as sns from '@aws-cdk/aws-sns';\nimport * as subscriptions from '@aws-cdk/aws-sns-subscriptions';\nimport * as pipelines from '@aws-cdk/pipelines';\n\nconst topic = new sns.Topic(this, 'SecurityChangesTopic');\ntopic.addSubscription(new subscriptions.EmailSubscription('test@email.com'));\n\nconst stage = new MyApplicationStage(this, 'MyApplication');\npipeline.addStage(stage, {\n  pre: [\n    new ConfirmPermissionsBroadening('Check', {\n      stage,\n      notificationTopic: topic,\n    }),\n  ],\n});\n```\n\n**Note**: Manual Approvals notifications only apply when an application has security\ncheck enabled.\n\n## Troubleshooting\n\nHere are some common errors you may encounter while using this library.\n\n### Pipeline: Internal Failure\n\nIf you see the following error during deployment of your pipeline:\n\n```plaintext\nCREATE_FAILED  | AWS::CodePipeline::Pipeline | Pipeline/Pipeline\nInternal Failure\n```\n\nThere's something wrong with your GitHub access token. It might be missing, or not have the\nright permissions to access the repository you're trying to access.\n\n### Key: Policy contains a statement with one or more invalid principals\n\nIf you see the following error during deployment of your pipeline:\n\n```plaintext\nCREATE_FAILED | AWS::KMS::Key | Pipeline/Pipeline/ArtifactsBucketEncryptionKey\nPolicy contains a statement with one or more invalid principals.\n```\n\nOne of the target (account, region) environments has not been bootstrapped\nwith the new bootstrap stack. Check your target environments and make sure\nthey are all bootstrapped.\n\n### Message: no matching base directory path found for cdk.out\n\nIf you see this error during the **Synth** step, it means that CodeBuild\nis expecting to find a `cdk.out` directory in the root of your CodeBuild project,\nbut the directory wasn't there. There are two common causes for this:\n\n* `cdk synth` is not being executed: `cdk synth` used to be run\n  implicitly for you, but you now have to explicitly include the command.\n  For NPM-based projects, add `npx cdk synth` to the end of the `commands`\n  property, for other languages add `npm install -g aws-cdk` and `cdk synth`.\n* Your CDK project lives in a subdirectory: you added a `cd <somedirectory>` command\n  to the list of commands; don't forget to tell the `ScriptStep` about the\n  different location of `cdk.out`, by passing `primaryOutputDirectory: '<somedirectory>/cdk.out'`.\n\n### <Stack> is in ROLLBACK_COMPLETE state and can not be updated\n\nIf  you see the following error during execution of your pipeline:\n\n```plaintext\nStack ... is in ROLLBACK_COMPLETE state and can not be updated. (Service:\nAmazonCloudFormation; Status Code: 400; Error Code: ValidationError; Request\nID: ...)\n```\n\nThe stack failed its previous deployment, and is in a non-retryable state.\nGo into the CloudFormation console, delete the stack, and retry the deployment.\n\n### Cannot find module 'xxxx' or its corresponding type declarations\n\nYou may see this if you are using TypeScript or other NPM-based languages,\nwhen using NPM 7 on your workstation (where you generate `package-lock.json`)\nand NPM 6 on the CodeBuild image used for synthesizing.\n\nIt looks like NPM 7 has started writing less information to `package-lock.json`,\nleading NPM 6 reading that same file to not install all required packages anymore.\n\nMake sure you are using the same NPM version everywhere, either downgrade your\nworkstation's version or upgrade the CodeBuild version.\n\n### Cannot find module '.../check-node-version.js' (MODULE_NOT_FOUND)\n\nThe above error may be produced by `npx` when executing the CDK CLI, or any\nproject that uses the AWS SDK for JavaScript, without the target application\nhaving been installed yet. For example, it can be triggered by `npx cdk synth`\nif `aws-cdk` is not in your `package.json`.\n\nWork around this by either installing the target application using NPM *before*\nrunning `npx`, or set the environment variable `NPM_CONFIG_UNSAFE_PERM=true`.\n\n### Cannot connect to the Docker daemon at unix:///var/run/docker.sock\n\nIf, in the 'Synth' action (inside the 'Build' stage) of your pipeline, you get an error like this:\n\n```console\nstderr: docker: Cannot connect to the Docker daemon at unix:///var/run/docker.sock. Is the docker daemon running?.\nSee 'docker run --help'.\n```\n\nIt means that the AWS CodeBuild project for 'Synth' is not configured to run in privileged mode,\nwhich prevents Docker builds from happening. This typically happens if you use a CDK construct\nthat bundles asset using tools run via Docker, like `aws-lambda-nodejs`, `aws-lambda-python`,\n`aws-lambda-go` and others.\n\nMake sure you set the `privileged` environment variable to `true` in the synth definition:\n\n```typescript\n    const pipeline = new CdkPipeline(this, 'MyPipeline', {\n      ...\n\n      synthAction: SimpleSynthAction.standardNpmSynth({\n        sourceArtifact: ...,\n        cloudAssemblyArtifact: ...,\n\n        environment: {\n          privileged: true,\n        },\n      }),\n    });\n```\n\nAfter turning on `privilegedMode: true`, you will need to do a one-time manual cdk deploy of your\npipeline to get it going again (as with a broken 'synth' the pipeline will not be able to self\nupdate to the right state).\n\n### S3 error: Access Denied\n\nAn \"S3 Access Denied\" error can have two causes:\n\n* Asset hashes have changed, but self-mutation has been disabled in the pipeline.\n* You have deleted and recreated the bootstrap stack, or changed its qualifier.\n\n#### Self-mutation step has been removed\n\nSome constructs, such as EKS clusters, generate nested stacks. When CloudFormation tries\nto deploy those stacks, it may fail with this error:\n\n```console\nS3 error: Access Denied For more information check http://docs.aws.amazon.com/AmazonS3/latest/API/ErrorResponses.html\n```\n\nThis happens because the pipeline is not self-mutating and, as a consequence, the `FileAssetX`\nbuild projects get out-of-sync with the generated templates. To fix this, make sure the\n`selfMutating` property is set to `true`:\n\n```typescript\nconst pipeline = new CdkPipeline(this, 'MyPipeline', {\n  selfMutating: true,\n  ...\n});\n```\n\n#### Bootstrap roles have been renamed or recreated\n\nWhile attempting to deploy an application stage, the \"Prepare\" or \"Deploy\" stage may fail with a cryptic error like:\n\n`Action execution failed\nAccess Denied (Service: Amazon S3; Status Code: 403; Error Code: AccessDenied; Request ID: 0123456ABCDEFGH;\nS3 Extended Request ID: 3hWcrVkhFGxfiMb/rTJO0Bk7Qn95x5ll4gyHiFsX6Pmk/NT+uX9+Z1moEcfkL7H3cjH7sWZfeD0=; Proxy: null)`\n\nThis generally indicates that the roles necessary to deploy have been deleted (or deleted and re-created);\nfor example, if the bootstrap stack has been deleted and re-created, this scenario will happen. Under the hood,\nthe resources that rely on these roles (e.g., `cdk-$qualifier-deploy-role-$account-$region`) point to different\ncanonical IDs than the recreated versions of these roles, which causes the errors. There are no simple solutions\nto this issue, and for that reason we **strongly recommend** that bootstrap stacks not be deleted and re-created\nonce created.\n\nThe most automated way to solve the issue is to introduce a secondary bootstrap stack. By changing the qualifier\nthat the pipeline stack looks for, a change will be detected and the impacted policies and resources will be updated.\nA hypothetical recovery workflow would look something like this:\n\n* First, for all impacted environments, create a secondary bootstrap stack:\n\n```sh\n$ env CDK_NEW_BOOTSTRAP=1 npx cdk bootstrap \\\n    --qualifier randchars1234\n    --toolkit-stack-name CDKToolkitTemp\n    aws://111111111111/us-east-1\n```\n\n* Update all impacted stacks in the pipeline to use this new qualifier.\nSee https://docs.aws.amazon.com/cdk/latest/guide/bootstrapping.html for more info.\n\n```ts\nnew MyStack(this, 'MyStack', {\n  // Update this qualifier to match the one used above.\n  synthesizer: new DefaultStackSynthesizer({\n    qualifier: 'randchars1234',\n  }),\n});\n```\n\n* Deploy the updated stacks. This will update the stacks to use the roles created in the new bootstrap stack.\n* (Optional) Restore back to the original state:\n  * Revert the change made in step #2 above\n  * Re-deploy the pipeline to use the original qualifier.\n  * Delete the temporary bootstrap stack(s)\n\n##### Manual Alternative\n\nAlternatively, the errors can be resolved by finding each impacted resource and policy, and correcting the policies\nby replacing the canonical IDs (e.g., `AROAYBRETNYCYV6ZF2R93`) with the appropriate ARNs. As an example, the KMS\nencryption key policy for the artifacts bucket may have a statement that looks like the following:\n\n```json\n{\n  \"Effect\" : \"Allow\",\n  \"Principal\" : {\n    // \"AWS\" : \"AROAYBRETNYCYV6ZF2R93\"  // Indicates this issue; replace this value\n    \"AWS\": \"arn:aws:iam::0123456789012:role/cdk-hnb659fds-deploy-role-0123456789012-eu-west-1\", // Correct value\n  },\n  \"Action\" : [ \"kms:Decrypt\", \"kms:DescribeKey\" ],\n  \"Resource\" : \"*\"\n}\n```\n\nAny resource or policy that references the qualifier (`hnb659fds` by default) will need to be updated.\n\n## Known Issues\n\nThere are some usability issues that are caused by underlying technology, and\ncannot be remedied by CDK at this point. They are reproduced here for completeness.\n\n* **Console links to other accounts will not work**: the AWS CodePipeline\n  console will assume all links are relative to the current account. You will\n  not be able to use the pipeline console to click through to a CloudFormation\n  stack in a different account.\n* **If a change set failed to apply the pipeline must restarted**: if a change\n  set failed to apply, it cannot be retried. The pipeline must be restarted from\n  the top by clicking **Release Change**.\n* **A stack that failed to create must be deleted manually**: if a stack\n  failed to create on the first attempt, you must delete it using the\n  CloudFormation console before starting the pipeline again by clicking\n  **Release Change**.\n"
  },
  "repository": {
    "directory": "packages/@aws-cdk/pipelines",
    "type": "git",
    "url": "https://github.com/aws/aws-cdk.git"
  },
  "schema": "jsii/0.10.0",
  "targets": {
    "dotnet": {
      "iconUrl": "https://raw.githubusercontent.com/aws/aws-cdk/master/logo/default-256-dark.png",
      "namespace": "Amazon.CDK.Pipelines",
      "packageId": "Amazon.CDK.Pipelines"
    },
    "java": {
      "maven": {
        "artifactId": "cdk-pipelines",
        "groupId": "software.amazon.awscdk"
      },
      "package": "software.amazon.awscdk.pipelines"
    },
    "js": {
      "npm": "@aws-cdk/pipelines"
    },
    "python": {
      "classifiers": [
        "Framework :: AWS CDK",
        "Framework :: AWS CDK :: 1"
      ],
      "distName": "aws-cdk.pipelines",
      "module": "aws_cdk.pipelines"
    }
  },
  "types": {
    "@aws-cdk/pipelines.AddManualApprovalOptions": {
      "assembly": "@aws-cdk/pipelines",
      "datatype": true,
      "docs": {
        "stability": "stable",
        "summary": "Options for addManualApproval."
      },
      "fqn": "@aws-cdk/pipelines.AddManualApprovalOptions",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/legacy/stage.ts",
        "line": 550
      },
      "name": "AddManualApprovalOptions",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "default": "'ManualApproval' with a rolling counter",
            "stability": "stable",
            "summary": "The name of the manual approval action."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/legacy/stage.ts",
            "line": 556
          },
          "name": "actionName",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- The next sequential runOrder",
            "stability": "stable",
            "summary": "The runOrder for this action."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/legacy/stage.ts",
            "line": 563
          },
          "name": "runOrder",
          "optional": true,
          "type": {
            "primitive": "number"
          }
        }
      ]
    },
    "@aws-cdk/pipelines.AddStackOptions": {
      "assembly": "@aws-cdk/pipelines",
      "datatype": true,
      "docs": {
        "stability": "stable",
        "summary": "Additional options for adding a stack deployment."
      },
      "fqn": "@aws-cdk/pipelines.AddStackOptions",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/legacy/stage.ts",
        "line": 400
      },
      "name": "AddStackOptions",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "default": "- runOrder + 1",
            "stability": "stable",
            "summary": "Base runorder."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/legacy/stage.ts",
            "line": 413
          },
          "name": "executeRunOrder",
          "optional": true,
          "type": {
            "primitive": "number"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- Next sequential runorder",
            "stability": "stable",
            "summary": "Base runorder."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/legacy/stage.ts",
            "line": 406
          },
          "name": "runOrder",
          "optional": true,
          "type": {
            "primitive": "number"
          }
        }
      ]
    },
    "@aws-cdk/pipelines.AddStageOptions": {
      "assembly": "@aws-cdk/pipelines",
      "datatype": true,
      "docs": {
        "stability": "stable",
        "summary": "Options for adding an application stage to a pipeline."
      },
      "fqn": "@aws-cdk/pipelines.AddStageOptions",
      "interfaces": [
        "@aws-cdk/pipelines.BaseStageOptions"
      ],
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/legacy/stage.ts",
        "line": 526
      },
      "name": "AddStageOptions",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "default": "0",
            "remarks": "You can use this to make extra room in the runOrder sequence between the\nchangeset 'prepare' and 'execute' actions and insert your own actions there.",
            "stability": "stable",
            "summary": "Add room for extra actions."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/legacy/stage.ts",
            "line": 544
          },
          "name": "extraRunOrderSpace",
          "optional": true,
          "type": {
            "primitive": "number"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "false",
            "remarks": "This gives humans the opportunity to confirm the change set looks alright\nbefore deploying it.",
            "stability": "stable",
            "summary": "Add manual approvals before executing change sets."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/legacy/stage.ts",
            "line": 535
          },
          "name": "manualApprovals",
          "optional": true,
          "type": {
            "primitive": "boolean"
          }
        }
      ]
    },
    "@aws-cdk/pipelines.AddStageOpts": {
      "assembly": "@aws-cdk/pipelines",
      "datatype": true,
      "docs": {
        "stability": "stable",
        "summary": "Options to pass to `addStage`."
      },
      "fqn": "@aws-cdk/pipelines.AddStageOpts",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/blueprint/wave.ts",
        "line": 80
      },
      "name": "AddStageOpts",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "default": "- No additional steps",
            "stability": "stable",
            "summary": "Additional steps to run after all of the stacks in the stage."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/blueprint/wave.ts",
            "line": 93
          },
          "name": "post",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "fqn": "@aws-cdk/pipelines.Step"
              },
              "kind": "array"
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- No additional steps",
            "stability": "stable",
            "summary": "Additional steps to run before any of the stacks in the stage."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/blueprint/wave.ts",
            "line": 86
          },
          "name": "pre",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "fqn": "@aws-cdk/pipelines.Step"
              },
              "kind": "array"
            }
          }
        }
      ]
    },
    "@aws-cdk/pipelines.AdditionalArtifact": {
      "assembly": "@aws-cdk/pipelines",
      "datatype": true,
      "docs": {
        "stability": "stable",
        "summary": "Specification of an additional artifact to generate."
      },
      "fqn": "@aws-cdk/pipelines.AdditionalArtifact",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/legacy/synths/simple-synth-action.ts",
        "line": 196
      },
      "name": "AdditionalArtifact",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "stability": "stable",
            "summary": "Artifact to represent the build directory in the pipeline."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/legacy/synths/simple-synth-action.ts",
            "line": 205
          },
          "name": "artifact",
          "type": {
            "fqn": "@aws-cdk/aws-codepipeline.Artifact"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "stable",
            "summary": "Directory to be packaged."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/legacy/synths/simple-synth-action.ts",
            "line": 200
          },
          "name": "directory",
          "type": {
            "primitive": "string"
          }
        }
      ]
    },
    "@aws-cdk/pipelines.ArtifactMap": {
      "assembly": "@aws-cdk/pipelines",
      "docs": {
        "stability": "stable",
        "summary": "Translate FileSets to CodePipeline Artifacts."
      },
      "fqn": "@aws-cdk/pipelines.ArtifactMap",
      "initializer": {
        "docs": {
          "stability": "stable"
        }
      },
      "kind": "class",
      "locationInModule": {
        "filename": "lib/codepipeline/artifact-map.ts",
        "line": 9
      },
      "methods": [
        {
          "docs": {
            "stability": "stable",
            "summary": "Return the matching CodePipeline artifact for a FileSet."
          },
          "locationInModule": {
            "filename": "lib/codepipeline/artifact-map.ts",
            "line": 16
          },
          "name": "toCodePipeline",
          "parameters": [
            {
              "name": "x",
              "type": {
                "fqn": "@aws-cdk/pipelines.FileSet"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-codepipeline.Artifact"
            }
          }
        }
      ],
      "name": "ArtifactMap"
    },
    "@aws-cdk/pipelines.AssetPublishingCommand": {
      "assembly": "@aws-cdk/pipelines",
      "datatype": true,
      "docs": {
        "stability": "stable",
        "summary": "Instructions to publish certain assets."
      },
      "fqn": "@aws-cdk/pipelines.AssetPublishingCommand",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/legacy/stage.ts",
        "line": 467
      },
      "name": "AssetPublishingCommand",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "stability": "stable",
            "summary": "Asset identifier."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/legacy/stage.ts",
            "line": 476
          },
          "name": "assetId",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "stable",
            "summary": "Asset manifest path."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/legacy/stage.ts",
            "line": 471
          },
          "name": "assetManifestPath",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "stable",
            "summary": "ARN of the IAM Role used to publish this asset."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/legacy/stage.ts",
            "line": 491
          },
          "name": "assetPublishingRoleArn",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "stable",
            "summary": "Asset selector to pass to `cdk-assets`."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/legacy/stage.ts",
            "line": 481
          },
          "name": "assetSelector",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "stable",
            "summary": "Type of asset to publish."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/legacy/stage.ts",
            "line": 486
          },
          "name": "assetType",
          "type": {
            "fqn": "@aws-cdk/pipelines.AssetType"
          }
        }
      ]
    },
    "@aws-cdk/pipelines.AssetType": {
      "assembly": "@aws-cdk/pipelines",
      "docs": {
        "stability": "stable",
        "summary": "Type of the asset that is being published."
      },
      "fqn": "@aws-cdk/pipelines.AssetType",
      "kind": "enum",
      "locationInModule": {
        "filename": "lib/blueprint/asset-type.ts",
        "line": 4
      },
      "members": [
        {
          "docs": {
            "stability": "stable",
            "summary": "A file."
          },
          "name": "FILE"
        },
        {
          "docs": {
            "stability": "stable",
            "summary": "A Docker image."
          },
          "name": "DOCKER_IMAGE"
        }
      ],
      "name": "AssetType"
    },
    "@aws-cdk/pipelines.BaseStageOptions": {
      "assembly": "@aws-cdk/pipelines",
      "datatype": true,
      "docs": {
        "stability": "stable",
        "summary": "Base options for a pipelines stage."
      },
      "fqn": "@aws-cdk/pipelines.BaseStageOptions",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/legacy/stage.ts",
        "line": 497
      },
      "name": "BaseStageOptions",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "default": "false",
            "remarks": "If the stage is configured with `confirmBroadeningPermissions` enabled, you can use this\nproperty to override the stage configuration. For example, Pipeline Stage\n\"Prod\" has confirmBroadeningPermissions enabled, with applications \"A\", \"B\", \"C\". All three\napplications will run a security check, but if we want to disable the one for \"C\",\nwe run `stage.addApplication(C, { confirmBroadeningPermissions: false })` to override the pipeline\nstage behavior.\n\nAdds 1 to the run order space.",
            "stability": "stable",
            "summary": "Runs a `cdk diff --security-only --fail` to pause the pipeline if there are any security changes."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/legacy/stage.ts",
            "line": 513
          },
          "name": "confirmBroadeningPermissions",
          "optional": true,
          "type": {
            "primitive": "boolean"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "undefined no notification topic for security check manual approval action",
            "stability": "stable",
            "summary": "Optional SNS topic to send notifications to when the security check registers changes within the application."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/legacy/stage.ts",
            "line": 520
          },
          "name": "securityNotificationTopic",
          "optional": true,
          "type": {
            "fqn": "@aws-cdk/aws-sns.ITopic"
          }
        }
      ]
    },
    "@aws-cdk/pipelines.CdkPipeline": {
      "assembly": "@aws-cdk/pipelines",
      "base": "@aws-cdk/core.Construct",
      "docs": {
        "remarks": "Defines an AWS CodePipeline-based Pipeline to deploy CDK applications.\n\nAutomatically manages the following:\n\n- Stack dependency order.\n- Asset publishing.\n- Keeping the pipeline up-to-date as the CDK apps change.\n- Using stack outputs later on in the pipeline.",
        "stability": "stable",
        "summary": "A Pipeline to deploy CDK apps."
      },
      "fqn": "@aws-cdk/pipelines.CdkPipeline",
      "initializer": {
        "docs": {
          "stability": "stable"
        },
        "locationInModule": {
          "filename": "lib/legacy/pipeline.ts",
          "line": 206
        },
        "parameters": [
          {
            "name": "scope",
            "type": {
              "fqn": "constructs.Construct"
            }
          },
          {
            "name": "id",
            "type": {
              "primitive": "string"
            }
          },
          {
            "name": "props",
            "type": {
              "fqn": "@aws-cdk/pipelines.CdkPipelineProps"
            }
          }
        ]
      },
      "kind": "class",
      "locationInModule": {
        "filename": "lib/legacy/pipeline.ts",
        "line": 197
      },
      "methods": [
        {
          "docs": {
            "remarks": "The application construct should subclass `Stage` and can contain any\nnumber of `Stacks` inside it that may have dependency relationships\non one another.\n\nAll stacks in the application will be deployed in the appropriate order,\nand all assets found in the application will be added to the asset\npublishing stage.",
            "stability": "stable",
            "summary": "Add pipeline stage that will deploy the given application stage."
          },
          "locationInModule": {
            "filename": "lib/legacy/pipeline.ts",
            "line": 338
          },
          "name": "addApplicationStage",
          "parameters": [
            {
              "name": "appStage",
              "type": {
                "fqn": "@aws-cdk/core.Stage"
              }
            },
            {
              "name": "options",
              "optional": true,
              "type": {
                "fqn": "@aws-cdk/pipelines.AddStageOptions"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/pipelines.CdkStage"
            }
          }
        },
        {
          "docs": {
            "remarks": "Prefer to use `addApplicationStage` if you are intended to deploy a CDK\napplication, but you can use this method if you want to add other kinds of\nActions to a pipeline.",
            "stability": "stable",
            "summary": "Add a new, empty stage to the pipeline."
          },
          "locationInModule": {
            "filename": "lib/legacy/pipeline.ts",
            "line": 351
          },
          "name": "addStage",
          "parameters": [
            {
              "name": "stageName",
              "type": {
                "primitive": "string"
              }
            },
            {
              "name": "options",
              "optional": true,
              "type": {
                "fqn": "@aws-cdk/pipelines.BaseStageOptions"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/pipelines.CdkStage"
            }
          }
        },
        {
          "docs": {
            "remarks": "`StackOutput` can be used in validation actions later in the pipeline.",
            "stability": "stable",
            "summary": "Get the StackOutput object that holds this CfnOutput's value in this pipeline."
          },
          "locationInModule": {
            "filename": "lib/legacy/pipeline.ts",
            "line": 375
          },
          "name": "stackOutput",
          "parameters": [
            {
              "name": "cfnOutput",
              "type": {
                "fqn": "@aws-cdk/core.CfnOutput"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/pipelines.StackOutput"
            }
          }
        },
        {
          "docs": {
            "remarks": "You can use this to add more Actions to a stage.",
            "stability": "stable",
            "summary": "Access one of the pipeline's stages by stage name."
          },
          "locationInModule": {
            "filename": "lib/legacy/pipeline.ts",
            "line": 307
          },
          "name": "stage",
          "parameters": [
            {
              "name": "stageName",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-codepipeline.IStage"
            }
          }
        },
        {
          "docs": {
            "remarks": "Our own convenience methods will never generate a pipeline that does that (although\nthis is a nice verification), but a user can also add the stacks by hand.",
            "stability": "stable",
            "summary": "Validate that we don't have any stacks violating dependency order in the pipeline."
          },
          "locationInModule": {
            "filename": "lib/legacy/pipeline.ts",
            "line": 395
          },
          "name": "validate",
          "overrides": "@aws-cdk/core.Construct",
          "protected": true,
          "returns": {
            "type": {
              "collection": {
                "elementtype": {
                  "primitive": "string"
                },
                "kind": "array"
              }
            }
          }
        }
      ],
      "name": "CdkPipeline",
      "properties": [
        {
          "docs": {
            "remarks": "You can use this to add more Stages to the pipeline, or Actions\nto Stages.",
            "stability": "stable",
            "summary": "The underlying CodePipeline object."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/legacy/pipeline.ts",
            "line": 298
          },
          "name": "codePipeline",
          "type": {
            "fqn": "@aws-cdk/aws-codepipeline.Pipeline"
          }
        }
      ]
    },
    "@aws-cdk/pipelines.CdkPipelineProps": {
      "assembly": "@aws-cdk/pipelines",
      "datatype": true,
      "docs": {
        "stability": "stable",
        "summary": "Properties for a CdkPipeline."
      },
      "fqn": "@aws-cdk/pipelines.CdkPipelineProps",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/legacy/pipeline.ts",
        "line": 25
      },
      "name": "CdkPipelineProps",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "stability": "stable",
            "summary": "The artifact you have defined to be the artifact to hold the cloudAssemblyArtifact for the synth action."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/legacy/pipeline.ts",
            "line": 43
          },
          "name": "cloudAssemblyArtifact",
          "type": {
            "fqn": "@aws-cdk/aws-codepipeline.Artifact"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- none",
            "stability": "stable",
            "summary": "Custom BuildSpec that is merged with generated one (for asset publishing actions)."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/legacy/pipeline.ts",
            "line": 157
          },
          "name": "assetBuildSpec",
          "optional": true,
          "type": {
            "fqn": "@aws-cdk/aws-codebuild.BuildSpec"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "-",
            "stability": "stable",
            "summary": "Additional commands to run before installing cdk-assets during the asset publishing step Use this to setup proxies or npm mirrors."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/legacy/pipeline.ts",
            "line": 150
          },
          "name": "assetPreInstallCommands",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "string"
              },
              "kind": "array"
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- Latest version",
            "remarks": "Some Actions in the pipeline will download and run a version of the CDK\nCLI. Specify the version here.",
            "stability": "stable",
            "summary": "CDK CLI version to use in pipeline."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/legacy/pipeline.ts",
            "line": 98
          },
          "name": "cdkCliVersion",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- A new CodePipeline is automatically generated",
            "remarks": "Use this if you want more control over the CodePipeline that gets created.\nYou can choose to not pass this value, in which case a new CodePipeline is\ncreated with default settings.\n\nIf you pass an existing CodePipeline, it should should have been created\nwith `restartExecutionOnUpdate: true`.\n\n[disable-awslint:ref-via-interface]",
            "stability": "stable",
            "summary": "Existing CodePipeline to add deployment stages to."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/legacy/pipeline.ts",
            "line": 59
          },
          "name": "codePipeline",
          "optional": true,
          "type": {
            "fqn": "@aws-cdk/aws-codepipeline.Pipeline"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "true",
            "remarks": "This controls whether the pipeline is enabled for cross-account deployments.\n\nCan only be set if `codePipeline` is not set.\n\nBy default cross-account deployments are enabled, but this feature requires\nthat KMS Customer Master Keys are created which have a cost of $1/month.\n\nIf you do not need cross-account deployments, you can set this to `false` to\nnot create those keys and save on that cost (the artifact bucket will be\nencrypted with an AWS-managed key). However, cross-account deployments will\nno longer be possible.",
            "stability": "stable",
            "summary": "Create KMS keys for cross-account deployments."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/legacy/pipeline.ts",
            "line": 87
          },
          "name": "crossAccountKeys",
          "optional": true,
          "type": {
            "primitive": "boolean"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "[]",
            "remarks": "Specify any credentials necessary within the pipeline to build, synth, update, or publish assets.",
            "stability": "stable",
            "summary": "A list of credentials used to authenticate to Docker registries."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/legacy/pipeline.ts",
            "line": 182
          },
          "name": "dockerCredentials",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "fqn": "@aws-cdk/pipelines.DockerCredential"
              },
              "kind": "array"
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- A name is automatically generated",
            "remarks": "Can only be set if `codePipeline` is not set.",
            "stability": "stable",
            "summary": "Name of the pipeline."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/legacy/pipeline.ts",
            "line": 68
          },
          "name": "pipelineName",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "true",
            "remarks": "This needs to be set to `true` to allow the pipeline to reconfigure\nitself when assets or stages are being added to it, and `true` is the\nrecommended setting.\n\nYou can temporarily set this to `false` while you are iterating\non the pipeline itself and prefer to deploy changes using `cdk deploy`.",
            "stability": "stable",
            "summary": "Whether the pipeline will update itself."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/legacy/pipeline.ts",
            "line": 128
          },
          "name": "selfMutating",
          "optional": true,
          "type": {
            "primitive": "boolean"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- none",
            "stability": "stable",
            "summary": "Custom BuildSpec that is merged with generated one (for self-mutation stage)."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/legacy/pipeline.ts",
            "line": 135
          },
          "name": "selfMutationBuildSpec",
          "optional": true,
          "type": {
            "fqn": "@aws-cdk/aws-codebuild.BuildSpec"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "false",
            "stability": "stable",
            "summary": "Whether this pipeline creates one asset upload action per asset type or one asset upload per asset."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/legacy/pipeline.ts",
            "line": 142
          },
          "name": "singlePublisherPerType",
          "optional": true,
          "type": {
            "primitive": "boolean"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- Required unless `codePipeline` is given",
            "stability": "stable",
            "summary": "The CodePipeline action used to retrieve the CDK app's source."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/legacy/pipeline.ts",
            "line": 31
          },
          "name": "sourceAction",
          "optional": true,
          "type": {
            "fqn": "@aws-cdk/aws-codepipeline.IAction"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- All private subnets.",
            "remarks": "Only used if 'vpc' is supplied.",
            "stability": "stable",
            "summary": "Which subnets to use."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/legacy/pipeline.ts",
            "line": 114
          },
          "name": "subnetSelection",
          "optional": true,
          "type": {
            "fqn": "@aws-cdk/aws-ec2.SubnetSelection"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- false",
            "remarks": "If the UpdatePipeline stage tries to build a Docker image and this flag is not\nset to `true`, the build step will run in non-privileged mode and consequently\nwill fail with a message like:\n\n> Cannot connect to the Docker daemon at unix:///var/run/docker.sock.\n> Is the docker daemon running?\n\nThis flag has an effect only if `selfMutating` is also `true`.",
            "stability": "stable",
            "summary": "Whether the pipeline needs to build Docker images in the UpdatePipeline stage."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/legacy/pipeline.ts",
            "line": 173
          },
          "name": "supportDockerAssets",
          "optional": true,
          "type": {
            "primitive": "boolean"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- Required unless `codePipeline` or `sourceAction` is given",
            "stability": "stable",
            "summary": "The CodePipeline action build and synthesis step of the CDK app."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/legacy/pipeline.ts",
            "line": 38
          },
          "name": "synthAction",
          "optional": true,
          "type": {
            "fqn": "@aws-cdk/aws-codepipeline.IAction"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- No VPC",
            "stability": "stable",
            "summary": "The VPC where to execute the CdkPipeline actions."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/legacy/pipeline.ts",
            "line": 105
          },
          "name": "vpc",
          "optional": true,
          "type": {
            "fqn": "@aws-cdk/aws-ec2.IVpc"
          }
        }
      ]
    },
    "@aws-cdk/pipelines.CdkStackActionFromArtifactOptions": {
      "assembly": "@aws-cdk/pipelines",
      "datatype": true,
      "docs": {
        "stability": "stable",
        "summary": "Options for the 'fromStackArtifact' operation."
      },
      "fqn": "@aws-cdk/pipelines.CdkStackActionFromArtifactOptions",
      "interfaces": [
        "@aws-cdk/pipelines.DeployCdkStackActionOptions"
      ],
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/legacy/actions/deploy-cdk-stack-action.ts",
        "line": 133
      },
      "name": "CdkStackActionFromArtifactOptions",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "default": "- Same as stack artifact",
            "stability": "stable",
            "summary": "The name of the stack that should be created/updated."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/legacy/actions/deploy-cdk-stack-action.ts",
            "line": 139
          },
          "name": "stackName",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        }
      ]
    },
    "@aws-cdk/pipelines.CdkStage": {
      "assembly": "@aws-cdk/pipelines",
      "base": "@aws-cdk/core.Construct",
      "docs": {
        "remarks": "You don't need to instantiate this class directly. Use\n`cdkPipeline.addStage()` instead.",
        "stability": "stable",
        "summary": "Stage in a CdkPipeline."
      },
      "fqn": "@aws-cdk/pipelines.CdkStage",
      "initializer": {
        "docs": {
          "stability": "stable"
        },
        "locationInModule": {
          "filename": "lib/legacy/stage.ts",
          "line": 88
        },
        "parameters": [
          {
            "name": "scope",
            "type": {
              "fqn": "constructs.Construct"
            }
          },
          {
            "name": "id",
            "type": {
              "primitive": "string"
            }
          },
          {
            "name": "props",
            "type": {
              "fqn": "@aws-cdk/pipelines.CdkStageProps"
            }
          }
        ]
      },
      "kind": "class",
      "locationInModule": {
        "filename": "lib/legacy/stage.ts",
        "line": 74
      },
      "methods": [
        {
          "docs": {
            "remarks": "You need to make sure it is created with the right runOrder. Call `nextSequentialRunOrder()`\nfor every action to get actions to execute in sequence.",
            "stability": "stable",
            "summary": "Add one or more CodePipeline Actions."
          },
          "locationInModule": {
            "filename": "lib/legacy/stage.ts",
            "line": 223
          },
          "name": "addActions",
          "parameters": [
            {
              "name": "actions",
              "type": {
                "fqn": "@aws-cdk/aws-codepipeline.IAction"
              },
              "variadic": true
            }
          ],
          "variadic": true
        },
        {
          "docs": {
            "remarks": "The application construct should subclass `Stage` and can contain any\nnumber of `Stacks` inside it that may have dependency relationships\non one another.\n\nAll stacks in the application will be deployed in the appropriate order,\nand all assets found in the application will be added to the asset\npublishing stage.",
            "stability": "stable",
            "summary": "Add all stacks in the application Stage to this stage."
          },
          "locationInModule": {
            "filename": "lib/legacy/stage.ts",
            "line": 116
          },
          "name": "addApplication",
          "parameters": [
            {
              "name": "appStage",
              "type": {
                "fqn": "@aws-cdk/core.Stage"
              }
            },
            {
              "name": "options",
              "optional": true,
              "type": {
                "fqn": "@aws-cdk/pipelines.AddStageOptions"
              }
            }
          ]
        },
        {
          "docs": {
            "remarks": "If you need more flexibility than what this method offers,\nuse `addAction` with a `ManualApprovalAction`.",
            "stability": "stable",
            "summary": "Add a manual approval action."
          },
          "locationInModule": {
            "filename": "lib/legacy/stage.ts",
            "line": 204
          },
          "name": "addManualApprovalAction",
          "parameters": [
            {
              "name": "options",
              "optional": true,
              "type": {
                "fqn": "@aws-cdk/pipelines.AddManualApprovalOptions"
              }
            }
          ]
        },
        {
          "docs": {
            "stability": "stable",
            "summary": "Add a deployment action based on a stack artifact."
          },
          "locationInModule": {
            "filename": "lib/legacy/stage.ts",
            "line": 180
          },
          "name": "addStackArtifactDeployment",
          "parameters": [
            {
              "name": "stackArtifact",
              "type": {
                "fqn": "@aws-cdk/cx-api.CloudFormationStackArtifact"
              }
            },
            {
              "name": "options",
              "optional": true,
              "type": {
                "fqn": "@aws-cdk/pipelines.AddStackOptions"
              }
            }
          ]
        },
        {
          "docs": {
            "stability": "stable",
            "summary": "Whether this Stage contains an action to deploy the given stack, identified by its artifact ID."
          },
          "locationInModule": {
            "filename": "lib/legacy/stage.ts",
            "line": 245
          },
          "name": "deploysStack",
          "parameters": [
            {
              "name": "artifactId",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "primitive": "boolean"
            }
          }
        },
        {
          "docs": {
            "remarks": "FIXME: This is here because Actions are immutable and can't be reordered\nafter creation, nor is there a way to specify relative priorities, which\nis a limitation that we should take away in the base library.",
            "stability": "stable",
            "summary": "Return the runOrder number necessary to run the next Action in sequence with the rest."
          },
          "locationInModule": {
            "filename": "lib/legacy/stage.ts",
            "line": 236
          },
          "name": "nextSequentialRunOrder",
          "parameters": [
            {
              "name": "count",
              "optional": true,
              "type": {
                "primitive": "number"
              }
            }
          ],
          "returns": {
            "type": {
              "primitive": "number"
            }
          }
        }
      ],
      "name": "CdkStage"
    },
    "@aws-cdk/pipelines.CdkStageProps": {
      "assembly": "@aws-cdk/pipelines",
      "datatype": true,
      "docs": {
        "stability": "stable",
        "summary": "Construction properties for a CdkStage."
      },
      "fqn": "@aws-cdk/pipelines.CdkStageProps",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/legacy/stage.ts",
        "line": 24
      },
      "name": "CdkStageProps",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "stability": "stable",
            "summary": "The CodePipeline Artifact with the Cloud Assembly."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/legacy/stage.ts",
            "line": 38
          },
          "name": "cloudAssemblyArtifact",
          "type": {
            "fqn": "@aws-cdk/aws-codepipeline.Artifact"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "stable",
            "summary": "Features the Stage needs from its environment."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/legacy/stage.ts",
            "line": 43
          },
          "name": "host",
          "type": {
            "fqn": "@aws-cdk/pipelines.IStageHost"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "stable",
            "summary": "The underlying Pipeline Stage associated with thisCdkStage."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/legacy/stage.ts",
            "line": 33
          },
          "name": "pipelineStage",
          "type": {
            "fqn": "@aws-cdk/aws-codepipeline.IStage"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "stable",
            "summary": "Name of the stage that should be created."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/legacy/stage.ts",
            "line": 28
          },
          "name": "stageName",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "false",
            "remarks": "Note: Stage level security check can be overriden per application as follows:\n   `stage.addApplication(app, { confirmBroadeningPermissions: false })`",
            "stability": "stable",
            "summary": "Run a security check before every application prepare/deploy actions."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/legacy/stage.ts",
            "line": 53
          },
          "name": "confirmBroadeningPermissions",
          "optional": true,
          "type": {
            "primitive": "boolean"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "undefined no stage level notification topic",
            "remarks": "Note: The Stage Notification Topic can be overriden per application as follows:\n   `stage.addApplication(app, { securityNotificationTopic: newTopic })`",
            "stability": "stable",
            "summary": "Optional SNS topic to send notifications to when any security check registers changes within a application."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/legacy/stage.ts",
            "line": 64
          },
          "name": "securityNotificationTopic",
          "optional": true,
          "type": {
            "fqn": "@aws-cdk/aws-sns.ITopic"
          }
        }
      ]
    },
    "@aws-cdk/pipelines.CodeBuildOptions": {
      "assembly": "@aws-cdk/pipelines",
      "datatype": true,
      "docs": {
        "stability": "stable",
        "summary": "Options for customizing a single CodeBuild project."
      },
      "fqn": "@aws-cdk/pipelines.CodeBuildOptions",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/codepipeline/codepipeline.ts",
        "line": 193
      },
      "name": "CodeBuildOptions",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "default": "- Non-privileged build, SMALL instance, LinuxBuildImage.STANDARD_5_0",
            "stability": "stable",
            "summary": "Partial build environment, will be combined with other build environments that apply."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/codepipeline/codepipeline.ts",
            "line": 199
          },
          "name": "buildEnvironment",
          "optional": true,
          "type": {
            "fqn": "@aws-cdk/aws-codebuild.BuildEnvironment"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- No initial BuildSpec",
            "remarks": "The BuildSpec must be available inline--it cannot reference a file\non disk.",
            "stability": "stable",
            "summary": "Partial buildspec, will be combined with other buildspecs that apply."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/codepipeline/codepipeline.ts",
            "line": 216
          },
          "name": "partialBuildSpec",
          "optional": true,
          "type": {
            "fqn": "@aws-cdk/aws-codebuild.BuildSpec"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- No policy statements added to CodeBuild Project Role",
            "stability": "stable",
            "summary": "Policy statements to add to role."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/codepipeline/codepipeline.ts",
            "line": 206
          },
          "name": "rolePolicy",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "fqn": "@aws-cdk/aws-iam.PolicyStatement"
              },
              "kind": "array"
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- Security group will be automatically created.",
            "remarks": "Only used if 'vpc' is supplied.",
            "stability": "stable",
            "summary": "Which security group(s) to associate with the project network interfaces."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/codepipeline/codepipeline.ts",
            "line": 225
          },
          "name": "securityGroups",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "fqn": "@aws-cdk/aws-ec2.ISecurityGroup"
              },
              "kind": "array"
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- All private subnets.",
            "remarks": "Only used if 'vpc' is supplied.",
            "stability": "stable",
            "summary": "Which subnets to use."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/codepipeline/codepipeline.ts",
            "line": 241
          },
          "name": "subnetSelection",
          "optional": true,
          "type": {
            "fqn": "@aws-cdk/aws-ec2.SubnetSelection"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- No VPC",
            "stability": "stable",
            "summary": "The VPC where to create the CodeBuild network interfaces in."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/codepipeline/codepipeline.ts",
            "line": 232
          },
          "name": "vpc",
          "optional": true,
          "type": {
            "fqn": "@aws-cdk/aws-ec2.IVpc"
          }
        }
      ]
    },
    "@aws-cdk/pipelines.CodeBuildStep": {
      "assembly": "@aws-cdk/pipelines",
      "base": "@aws-cdk/pipelines.ShellStep",
      "docs": {
        "stability": "stable",
        "summary": "Run a script as a CodeBuild Project."
      },
      "fqn": "@aws-cdk/pipelines.CodeBuildStep",
      "initializer": {
        "docs": {
          "stability": "stable"
        },
        "locationInModule": {
          "filename": "lib/codepipeline/codebuild-step.ts",
          "line": 149
        },
        "parameters": [
          {
            "name": "id",
            "type": {
              "primitive": "string"
            }
          },
          {
            "name": "props",
            "type": {
              "fqn": "@aws-cdk/pipelines.CodeBuildStepProps"
            }
          }
        ]
      },
      "kind": "class",
      "locationInModule": {
        "filename": "lib/codepipeline/codebuild-step.ts",
        "line": 90
      },
      "name": "CodeBuildStep",
      "properties": [
        {
          "docs": {
            "stability": "stable",
            "summary": "The CodeBuild Project's principal."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/codepipeline/codebuild-step.ts",
            "line": 177
          },
          "name": "grantPrincipal",
          "type": {
            "fqn": "@aws-cdk/aws-iam.IPrincipal"
          }
        },
        {
          "docs": {
            "remarks": "Will only be available after the pipeline has been built.",
            "stability": "stable",
            "summary": "CodeBuild Project generated for the pipeline."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/codepipeline/codebuild-step.ts",
            "line": 167
          },
          "name": "project",
          "type": {
            "fqn": "@aws-cdk/aws-codebuild.IProject"
          }
        },
        {
          "docs": {
            "default": "- No value specified at construction time, use defaults",
            "stability": "stable",
            "summary": "Build environment."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/codepipeline/codebuild-step.ts",
            "line": 138
          },
          "name": "buildEnvironment",
          "optional": true,
          "type": {
            "fqn": "@aws-cdk/aws-codebuild.BuildEnvironment"
          }
        },
        {
          "docs": {
            "default": "- No value specified at construction time, use defaults",
            "stability": "stable",
            "summary": "Additional configuration that can only be configured via BuildSpec."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/codepipeline/codebuild-step.ts",
            "line": 103
          },
          "name": "partialBuildSpec",
          "optional": true,
          "type": {
            "fqn": "@aws-cdk/aws-codebuild.BuildSpec"
          }
        },
        {
          "docs": {
            "default": "- No value specified at construction time, use defaults",
            "stability": "stable",
            "summary": "Name for the generated CodeBuild project."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/codepipeline/codebuild-step.ts",
            "line": 96
          },
          "name": "projectName",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "default": "- No value specified at construction time, use defaults",
            "stability": "stable",
            "summary": "Custom execution role to be used for the CodeBuild project."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/codepipeline/codebuild-step.ts",
            "line": 131
          },
          "name": "role",
          "optional": true,
          "type": {
            "fqn": "@aws-cdk/aws-iam.IRole"
          }
        },
        {
          "docs": {
            "default": "- No value specified at construction time, use defaults",
            "stability": "stable",
            "summary": "Policy statements to add to role used during the synth."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/codepipeline/codebuild-step.ts",
            "line": 124
          },
          "name": "rolePolicyStatements",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "fqn": "@aws-cdk/aws-iam.PolicyStatement"
              },
              "kind": "array"
            }
          }
        },
        {
          "docs": {
            "default": "- No value specified at construction time, use defaults",
            "stability": "stable",
            "summary": "Which security group to associate with the script's project network interfaces."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/codepipeline/codebuild-step.ts",
            "line": 145
          },
          "name": "securityGroups",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "fqn": "@aws-cdk/aws-ec2.ISecurityGroup"
              },
              "kind": "array"
            }
          }
        },
        {
          "docs": {
            "default": "- No value specified at construction time, use defaults",
            "stability": "stable",
            "summary": "Which subnets to use."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/codepipeline/codebuild-step.ts",
            "line": 117
          },
          "name": "subnetSelection",
          "optional": true,
          "type": {
            "fqn": "@aws-cdk/aws-ec2.SubnetSelection"
          }
        },
        {
          "docs": {
            "default": "- No value specified at construction time, use defaults",
            "stability": "stable",
            "summary": "The VPC where to execute the SimpleSynth."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/codepipeline/codebuild-step.ts",
            "line": 110
          },
          "name": "vpc",
          "optional": true,
          "type": {
            "fqn": "@aws-cdk/aws-ec2.IVpc"
          }
        }
      ]
    },
    "@aws-cdk/pipelines.CodeBuildStepProps": {
      "assembly": "@aws-cdk/pipelines",
      "datatype": true,
      "docs": {
        "stability": "stable",
        "summary": "Construction props for a CodeBuildStep."
      },
      "fqn": "@aws-cdk/pipelines.CodeBuildStepProps",
      "interfaces": [
        "@aws-cdk/pipelines.ShellStepProps"
      ],
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/codepipeline/codebuild-step.ts",
        "line": 9
      },
      "name": "CodeBuildStepProps",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "default": "- Use the pipeline's default build environment",
            "remarks": "This environment will be combined with the pipeline's default\nenvironment.",
            "stability": "stable",
            "summary": "Changes to environment."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/codepipeline/codebuild-step.ts",
            "line": 74
          },
          "name": "buildEnvironment",
          "optional": true,
          "type": {
            "fqn": "@aws-cdk/aws-codebuild.BuildEnvironment"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- BuildSpec completely derived from other properties",
            "remarks": "You should not use this to specify output artifacts; those\nshould be supplied via the other properties of this class, otherwise\nCDK Pipelines won't be able to inspect the artifacts.\n\nSet the `commands` to an empty array if you want to fully specify\nthe BuildSpec using this field.\n\nThe BuildSpec must be available inline--it cannot reference a file\non disk.",
            "stability": "stable",
            "summary": "Additional configuration that can only be configured via BuildSpec."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/codepipeline/codebuild-step.ts",
            "line": 32
          },
          "name": "partialBuildSpec",
          "optional": true,
          "type": {
            "fqn": "@aws-cdk/aws-codebuild.BuildSpec"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- Automatically generated",
            "stability": "stable",
            "summary": "Name for the generated CodeBuild project."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/codepipeline/codebuild-step.ts",
            "line": 15
          },
          "name": "projectName",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- A role is automatically created",
            "stability": "stable",
            "summary": "Custom execution role to be used for the CodeBuild project."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/codepipeline/codebuild-step.ts",
            "line": 64
          },
          "name": "role",
          "optional": true,
          "type": {
            "fqn": "@aws-cdk/aws-iam.IRole"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- No policy statements added to CodeBuild Project Role",
            "remarks": "Can be used to add acces to a CodeArtifact repository etc.",
            "stability": "stable",
            "summary": "Policy statements to add to role used during the synth."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/codepipeline/codebuild-step.ts",
            "line": 57
          },
          "name": "rolePolicyStatements",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "fqn": "@aws-cdk/aws-iam.PolicyStatement"
              },
              "kind": "array"
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- Security group will be automatically created.",
            "remarks": "If no security group is identified, one will be created automatically.\n\nOnly used if 'vpc' is supplied.",
            "stability": "stable",
            "summary": "Which security group to associate with the script's project network interfaces."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/codepipeline/codebuild-step.ts",
            "line": 84
          },
          "name": "securityGroups",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "fqn": "@aws-cdk/aws-ec2.ISecurityGroup"
              },
              "kind": "array"
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- All private subnets.",
            "remarks": "Only used if 'vpc' is supplied.",
            "stability": "stable",
            "summary": "Which subnets to use."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/codepipeline/codebuild-step.ts",
            "line": 48
          },
          "name": "subnetSelection",
          "optional": true,
          "type": {
            "fqn": "@aws-cdk/aws-ec2.SubnetSelection"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- No VPC",
            "stability": "stable",
            "summary": "The VPC where to execute the SimpleSynth."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/codepipeline/codebuild-step.ts",
            "line": 39
          },
          "name": "vpc",
          "optional": true,
          "type": {
            "fqn": "@aws-cdk/aws-ec2.IVpc"
          }
        }
      ]
    },
    "@aws-cdk/pipelines.CodeCommitSourceOptions": {
      "assembly": "@aws-cdk/pipelines",
      "datatype": true,
      "docs": {
        "stability": "stable",
        "summary": "Configuration options for a CodeCommit source."
      },
      "fqn": "@aws-cdk/pipelines.CodeCommitSourceOptions",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/codepipeline/codepipeline-source.ts",
        "line": 314
      },
      "name": "CodeCommitSourceOptions",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "default": "false",
            "remarks": "**Note**: if this option is true,\nthen only CodeBuild actions can use the resulting {@link output}.",
            "see": "https://docs.aws.amazon.com/codepipeline/latest/userguide/action-reference-CodeCommit.html",
            "stability": "stable",
            "summary": "Whether the output should be the contents of the repository (which is the default), or a link that allows CodeBuild to clone the repository before building."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/codepipeline/codepipeline-source.ts",
            "line": 341
          },
          "name": "codeBuildCloneOutput",
          "optional": true,
          "type": {
            "primitive": "boolean"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "a new role will be created.",
            "remarks": "Used only when trigger value is CodeCommitTrigger.EVENTS.",
            "stability": "stable",
            "summary": "Role to be used by on commit event rule."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/codepipeline/codepipeline-source.ts",
            "line": 328
          },
          "name": "eventRole",
          "optional": true,
          "type": {
            "fqn": "@aws-cdk/aws-iam.IRole"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "CodeCommitTrigger.EVENTS",
            "stability": "stable",
            "summary": "How should CodePipeline detect source changes for this Action."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/codepipeline/codepipeline-source.ts",
            "line": 320
          },
          "name": "trigger",
          "optional": true,
          "type": {
            "fqn": "@aws-cdk/aws-codepipeline-actions.CodeCommitTrigger"
          }
        }
      ]
    },
    "@aws-cdk/pipelines.CodePipeline": {
      "assembly": "@aws-cdk/pipelines",
      "base": "@aws-cdk/pipelines.PipelineBase",
      "docs": {
        "remarks": "This is a `Pipeline` with its `engine` property set to\n`CodePipelineEngine`, and exists for nicer ergonomics for\nusers that don't need to switch out engines.",
        "stability": "stable",
        "summary": "A CDK Pipeline that uses CodePipeline to deploy CDK apps."
      },
      "fqn": "@aws-cdk/pipelines.CodePipeline",
      "initializer": {
        "docs": {
          "stability": "stable"
        },
        "locationInModule": {
          "filename": "lib/codepipeline/codepipeline.ts",
          "line": 279
        },
        "parameters": [
          {
            "name": "scope",
            "type": {
              "fqn": "constructs.Construct"
            }
          },
          {
            "name": "id",
            "type": {
              "primitive": "string"
            }
          },
          {
            "name": "props",
            "type": {
              "fqn": "@aws-cdk/pipelines.CodePipelineProps"
            }
          }
        ]
      },
      "kind": "class",
      "locationInModule": {
        "filename": "lib/codepipeline/codepipeline.ts",
        "line": 252
      },
      "methods": [
        {
          "docs": {
            "stability": "stable",
            "summary": "Implemented by subclasses to do the actual pipeline construction."
          },
          "locationInModule": {
            "filename": "lib/codepipeline/codepipeline.ts",
            "line": 312
          },
          "name": "doBuildPipeline",
          "overrides": "@aws-cdk/pipelines.PipelineBase",
          "protected": true
        }
      ],
      "name": "CodePipeline",
      "properties": [
        {
          "docs": {
            "remarks": "Only available after the pipeline has been built.",
            "stability": "stable",
            "summary": "The CodePipeline pipeline that deploys the CDK app."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/codepipeline/codepipeline.ts",
            "line": 304
          },
          "name": "pipeline",
          "type": {
            "fqn": "@aws-cdk/aws-codepipeline.Pipeline"
          }
        },
        {
          "docs": {
            "remarks": "Only available after the pipeline has been built.",
            "stability": "stable",
            "summary": "The CodeBuild project that performs the Synth."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/codepipeline/codepipeline.ts",
            "line": 292
          },
          "name": "synthProject",
          "type": {
            "fqn": "@aws-cdk/aws-codebuild.IProject"
          }
        }
      ]
    },
    "@aws-cdk/pipelines.CodePipelineActionFactoryResult": {
      "assembly": "@aws-cdk/pipelines",
      "datatype": true,
      "docs": {
        "stability": "stable",
        "summary": "The result of adding actions to the pipeline."
      },
      "fqn": "@aws-cdk/pipelines.CodePipelineActionFactoryResult",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/codepipeline/codepipeline-action-factory.ts",
        "line": 87
      },
      "name": "CodePipelineActionFactoryResult",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "stability": "stable",
            "summary": "How many RunOrders were consumed."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/codepipeline/codepipeline-action-factory.ts",
            "line": 91
          },
          "name": "runOrdersConsumed",
          "type": {
            "primitive": "number"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- This factory did not create a CodeBuild project",
            "stability": "stable",
            "summary": "If a CodeBuild project got created, the project."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/codepipeline/codepipeline-action-factory.ts",
            "line": 98
          },
          "name": "project",
          "optional": true,
          "type": {
            "fqn": "@aws-cdk/aws-codebuild.IProject"
          }
        }
      ]
    },
    "@aws-cdk/pipelines.CodePipelineFileSet": {
      "assembly": "@aws-cdk/pipelines",
      "base": "@aws-cdk/pipelines.FileSet",
      "docs": {
        "remarks": "You only need to use this if you want to add CDK Pipeline stages\nadd the end of an existing CodePipeline, which should be very rare.",
        "stability": "stable",
        "summary": "A FileSet created from a CodePipeline artifact."
      },
      "fqn": "@aws-cdk/pipelines.CodePipelineFileSet",
      "kind": "class",
      "locationInModule": {
        "filename": "lib/codepipeline/artifact-map.ts",
        "line": 71
      },
      "methods": [
        {
          "docs": {
            "stability": "stable",
            "summary": "Turn a CodePipeline Artifact into a FileSet."
          },
          "locationInModule": {
            "filename": "lib/codepipeline/artifact-map.ts",
            "line": 75
          },
          "name": "fromArtifact",
          "parameters": [
            {
              "name": "artifact",
              "type": {
                "fqn": "@aws-cdk/aws-codepipeline.Artifact"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/pipelines.CodePipelineFileSet"
            }
          },
          "static": true
        }
      ],
      "name": "CodePipelineFileSet"
    },
    "@aws-cdk/pipelines.CodePipelineProps": {
      "assembly": "@aws-cdk/pipelines",
      "datatype": true,
      "docs": {
        "stability": "stable",
        "summary": "Properties for a `CodePipeline`."
      },
      "fqn": "@aws-cdk/pipelines.CodePipelineProps",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/codepipeline/codepipeline.ts",
        "line": 28
      },
      "name": "CodePipelineProps",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "remarks": "The primary output of this step needs to be the `cdk.out` directory\ngenerated by the `cdk synth` command.\n\nIf you use a `ShellStep` here and you don't configure an output directory,\nthe output directory will automatically be assumed to be `cdk.out`.",
            "stability": "stable",
            "summary": "The build step that produces the CDK Cloud Assembly."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/codepipeline/codepipeline.ts",
            "line": 38
          },
          "name": "synth",
          "type": {
            "fqn": "@aws-cdk/pipelines.IFileSetProducer"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- Only `codeBuildDefaults` are applied",
            "stability": "stable",
            "summary": "Additional customizations to apply to the asset publishing CodeBuild projects."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/codepipeline/codepipeline.ts",
            "line": 147
          },
          "name": "assetPublishingCodeBuildDefaults",
          "optional": true,
          "type": {
            "fqn": "@aws-cdk/pipelines.CodeBuildOptions"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- Latest version",
            "remarks": "If you want to lock the CDK CLI version used in the pipeline, by steps\nthat are automatically generated for you, specify the version here.\n\nYou should not typically need to specify this value.",
            "stability": "stable",
            "summary": "CDK CLI version to use in self-mutation and asset publishing steps."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/codepipeline/codepipeline.ts",
            "line": 70
          },
          "name": "cliVersion",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- All projects run non-privileged build, SMALL instance, LinuxBuildImage.STANDARD_5_0",
            "stability": "stable",
            "summary": "Customize the CodeBuild projects created for this pipeline."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/codepipeline/codepipeline.ts",
            "line": 133
          },
          "name": "codeBuildDefaults",
          "optional": true,
          "type": {
            "fqn": "@aws-cdk/pipelines.CodeBuildOptions"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- a new underlying pipeline is created.",
            "remarks": "[disable-awslint:ref-via-interface]",
            "stability": "stable",
            "summary": "An existing Pipeline to be reused and built upon."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/codepipeline/codepipeline.ts",
            "line": 187
          },
          "name": "codePipeline",
          "optional": true,
          "type": {
            "fqn": "@aws-cdk/aws-codepipeline.Pipeline"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "false",
            "remarks": "The artifact buckets have to be encrypted to support deploying CDK apps to\nanother account, so if you want to do that or want to have your artifact\nbuckets encrypted, be sure to set this value to `true`.\n\nBe aware there is a cost associated with maintaining the KMS keys.",
            "stability": "stable",
            "summary": "Create KMS keys for the artifact buckets, allowing cross-account deployments."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/codepipeline/codepipeline.ts",
            "line": 58
          },
          "name": "crossAccountKeys",
          "optional": true,
          "type": {
            "primitive": "boolean"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "[]",
            "remarks": "Specify any credentials necessary within the pipeline to build, synth, update, or publish assets.",
            "stability": "stable",
            "summary": "A list of credentials used to authenticate to Docker registries."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/codepipeline/codepipeline.ts",
            "line": 178
          },
          "name": "dockerCredentials",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "fqn": "@aws-cdk/pipelines.DockerCredential"
              },
              "kind": "array"
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "false",
            "remarks": "Set this to true if the pipeline itself uses Docker container assets\n(for example, if you use `LinuxBuildImage.fromAsset()` as the build\nimage of a CodeBuild step in the pipeline).\n\nYou do not need to set it if you build Docker image assets in the\napplication Stages and Stacks that are *deployed* by this pipeline.\n\nConfigures privileged mode for the self-mutation CodeBuild action.\n\nIf you are about to turn this on in an already-deployed Pipeline,\nset the value to `true` first, commit and allow the pipeline to\nself-update, and only then use the Docker asset in the pipeline.",
            "stability": "stable",
            "summary": "Enable Docker for the self-mutate step."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/codepipeline/codepipeline.ts",
            "line": 104
          },
          "name": "dockerEnabledForSelfMutation",
          "optional": true,
          "type": {
            "primitive": "boolean"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "false",
            "remarks": "Set this to true if you are using file assets that require\n\"bundling\" anywhere in your application (meaning an asset\ncompilation step will be run with the tools provided by\na Docker image), both for the Pipeline stack as well as the\napplication stacks.\n\nA common way to use bundling assets in your application is by\nusing the `@aws-cdk/aws-lambda-nodejs` library.\n\nConfigures privileged mode for the synth CodeBuild action.\n\nIf you are about to turn this on in an already-deployed Pipeline,\nset the value to `true` first, commit and allow the pipeline to\nself-update, and only then use the bundled asset.",
            "stability": "stable",
            "summary": "Enable Docker for the 'synth' step."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/codepipeline/codepipeline.ts",
            "line": 126
          },
          "name": "dockerEnabledForSynth",
          "optional": true,
          "type": {
            "primitive": "boolean"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- Automatically generated",
            "stability": "stable",
            "summary": "The name of the CodePipeline pipeline."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/codepipeline/codepipeline.ts",
            "line": 45
          },
          "name": "pipelineName",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "true",
            "remarks": "If set to false, use one Project per type to publish all assets.\n\nPublishing in parallel improves concurrency and may reduce publishing\nlatency, but may also increase overall provisioning time of the CodeBuild\nprojects.\n\nExperiment and see what value works best for you.",
            "stability": "stable",
            "summary": "Publish assets in multiple CodeBuild projects."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/codepipeline/codepipeline.ts",
            "line": 169
          },
          "name": "publishAssetsInParallel",
          "optional": true,
          "type": {
            "primitive": "boolean"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "true",
            "remarks": "This needs to be set to `true` to allow the pipeline to reconfigure\nitself when assets or stages are being added to it, and `true` is the\nrecommended setting.\n\nYou can temporarily set this to `false` while you are iterating\non the pipeline itself and prefer to deploy changes using `cdk deploy`.",
            "stability": "stable",
            "summary": "Whether the pipeline will update itself."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/codepipeline/codepipeline.ts",
            "line": 84
          },
          "name": "selfMutation",
          "optional": true,
          "type": {
            "primitive": "boolean"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- Only `codeBuildDefaults` are applied",
            "stability": "stable",
            "summary": "Additional customizations to apply to the self mutation CodeBuild projects."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/codepipeline/codepipeline.ts",
            "line": 154
          },
          "name": "selfMutationCodeBuildDefaults",
          "optional": true,
          "type": {
            "fqn": "@aws-cdk/pipelines.CodeBuildOptions"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- Only `codeBuildDefaults` are applied",
            "stability": "stable",
            "summary": "Additional customizations to apply to the synthesize CodeBuild projects."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/codepipeline/codepipeline.ts",
            "line": 140
          },
          "name": "synthCodeBuildDefaults",
          "optional": true,
          "type": {
            "fqn": "@aws-cdk/pipelines.CodeBuildOptions"
          }
        }
      ]
    },
    "@aws-cdk/pipelines.CodePipelineSource": {
      "abstract": true,
      "assembly": "@aws-cdk/pipelines",
      "base": "@aws-cdk/pipelines.Step",
      "docs": {
        "remarks": "This class contains a number of factory methods for the different types\nof sources that CodePipeline supports.",
        "stability": "stable",
        "summary": "CodePipeline source steps."
      },
      "fqn": "@aws-cdk/pipelines.CodePipelineSource",
      "initializer": {
        "docs": {
          "stability": "stable"
        },
        "locationInModule": {
          "filename": "lib/blueprint/step.ts",
          "line": 28
        },
        "parameters": [
          {
            "docs": {
              "summary": "Identifier for this step."
            },
            "name": "id",
            "type": {
              "primitive": "string"
            }
          }
        ]
      },
      "interfaces": [
        "@aws-cdk/pipelines.ICodePipelineActionFactory"
      ],
      "kind": "class",
      "locationInModule": {
        "filename": "lib/codepipeline/codepipeline-source.ts",
        "line": 19
      },
      "methods": [
        {
          "docs": {
            "stability": "stable",
            "summary": "Returns a CodeCommit source."
          },
          "locationInModule": {
            "filename": "lib/codepipeline/codepipeline-source.ts",
            "line": 106
          },
          "name": "codeCommit",
          "parameters": [
            {
              "docs": {
                "summary": "The CodeCommit repository."
              },
              "name": "repository",
              "type": {
                "fqn": "@aws-cdk/aws-codecommit.IRepository"
              }
            },
            {
              "docs": {
                "summary": "The branch to use."
              },
              "name": "branch",
              "type": {
                "primitive": "string"
              }
            },
            {
              "docs": {
                "remarks": "Example:\n\n```ts\nconst repository: IRepository = ...\nCodePipelineSource.codeCommit(repository, 'main');\n```",
                "summary": "The source properties."
              },
              "name": "props",
              "optional": true,
              "type": {
                "fqn": "@aws-cdk/pipelines.CodeCommitSourceOptions"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/pipelines.CodePipelineSource"
            }
          },
          "static": true
        },
        {
          "docs": {
            "remarks": "A CodeStar connection allows AWS CodePipeline to\naccess external resources, such as repositories in GitHub, GitHub Enterprise or\nBitBucket.\n\nTo use this method, you first need to create a CodeStar connection\nusing the AWS console. In the process, you may have to sign in to the external provider\n-- GitHub, for example -- to authorize AWS to read and modify your repository.\nOnce you have done this, copy the connection ARN and use it to create the source.\n\nExample:\n\n```ts\nCodePipelineSource.connection('owner/repo', 'main', {\n   connectionArn: 'arn:aws:codestar-connections:us-east-1:222222222222:connection/7d2469ff-514a-4e4f-9003-5ca4a43cdc41', // Created using the AWS console\n});\n```",
            "see": "https://docs.aws.amazon.com/dtconsole/latest/userguide/welcome-connections.html",
            "stability": "stable",
            "summary": "Returns a CodeStar connection source."
          },
          "locationInModule": {
            "filename": "lib/codepipeline/codepipeline-source.ts",
            "line": 88
          },
          "name": "connection",
          "parameters": [
            {
              "docs": {
                "summary": "A string that encodes owner and repository separated by a slash (e.g. 'owner/repo')."
              },
              "name": "repoString",
              "type": {
                "primitive": "string"
              }
            },
            {
              "docs": {
                "summary": "The branch to use."
              },
              "name": "branch",
              "type": {
                "primitive": "string"
              }
            },
            {
              "docs": {
                "summary": "The source properties, including the connection ARN."
              },
              "name": "props",
              "type": {
                "fqn": "@aws-cdk/pipelines.ConnectionSourceOptions"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/pipelines.CodePipelineSource"
            }
          },
          "static": true
        },
        {
          "docs": {
            "remarks": "This is no longer\nthe recommended method. Please consider using `connection()`\ninstead.\n\nPass in the owner and repository in a single string, like this:\n\n```ts\nCodePipelineSource.gitHub('owner/repo', 'main');\n```\n\nAuthentication will be done by a secret called `github-token` in AWS\nSecrets Manager (unless specified otherwise).\n\nThe token should have these permissions:\n\n* **repo** - to read the repository\n* **admin:repo_hook** - if you plan to use webhooks (true by default)",
            "stability": "stable",
            "summary": "Returns a GitHub source, using OAuth tokens to authenticate with GitHub and a separate webhook to detect changes."
          },
          "locationInModule": {
            "filename": "lib/codepipeline/codepipeline-source.ts",
            "line": 40
          },
          "name": "gitHub",
          "parameters": [
            {
              "name": "repoString",
              "type": {
                "primitive": "string"
              }
            },
            {
              "name": "branch",
              "type": {
                "primitive": "string"
              }
            },
            {
              "name": "props",
              "optional": true,
              "type": {
                "fqn": "@aws-cdk/pipelines.GitHubSourceOptions"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/pipelines.CodePipelineSource"
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "stable",
            "summary": "Returns an S3 source."
          },
          "locationInModule": {
            "filename": "lib/codepipeline/codepipeline-source.ts",
            "line": 60
          },
          "name": "s3",
          "parameters": [
            {
              "docs": {
                "summary": "The bucket where the source code is located."
              },
              "name": "bucket",
              "type": {
                "fqn": "@aws-cdk/aws-s3.IBucket"
              }
            },
            {
              "name": "objectKey",
              "type": {
                "primitive": "string"
              }
            },
            {
              "docs": {
                "remarks": "Example:\n\n```ts\nconst bucket: IBucket = ...\nCodePipelineSource.s3(bucket, {\nkey: 'path/to/file.zip',\n});\n```",
                "summary": "The options, which include the key that identifies the source code file and and how the pipeline should be triggered."
              },
              "name": "props",
              "optional": true,
              "type": {
                "fqn": "@aws-cdk/pipelines.S3SourceOptions"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/pipelines.CodePipelineSource"
            }
          },
          "static": true
        },
        {
          "abstract": true,
          "docs": {
            "stability": "stable"
          },
          "locationInModule": {
            "filename": "lib/codepipeline/codepipeline-source.ts",
            "line": 120
          },
          "name": "getAction",
          "parameters": [
            {
              "name": "output",
              "type": {
                "fqn": "@aws-cdk/aws-codepipeline.Artifact"
              }
            },
            {
              "name": "actionName",
              "type": {
                "primitive": "string"
              }
            },
            {
              "name": "runOrder",
              "type": {
                "primitive": "number"
              }
            }
          ],
          "protected": true,
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-codepipeline-actions.Action"
            }
          }
        },
        {
          "docs": {
            "stability": "stable",
            "summary": "Create the desired Action and add it to the pipeline."
          },
          "locationInModule": {
            "filename": "lib/codepipeline/codepipeline-source.ts",
            "line": 113
          },
          "name": "produceAction",
          "overrides": "@aws-cdk/pipelines.ICodePipelineActionFactory",
          "parameters": [
            {
              "name": "stage",
              "type": {
                "fqn": "@aws-cdk/aws-codepipeline.IStage"
              }
            },
            {
              "name": "options",
              "type": {
                "fqn": "@aws-cdk/pipelines.ProduceActionOptions"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/pipelines.CodePipelineActionFactoryResult"
            }
          }
        }
      ],
      "name": "CodePipelineSource",
      "properties": [
        {
          "docs": {
            "remarks": "What it means to be a Source step depends on the engine.",
            "stability": "stable",
            "summary": "Whether or not this is a Source step."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/codepipeline/codepipeline-source.ts",
            "line": 111
          },
          "name": "isSource",
          "overrides": "@aws-cdk/pipelines.Step",
          "type": {
            "primitive": "boolean"
          }
        }
      ]
    },
    "@aws-cdk/pipelines.ConfirmPermissionsBroadening": {
      "assembly": "@aws-cdk/pipelines",
      "base": "@aws-cdk/pipelines.Step",
      "docs": {
        "remarks": "This step is only supported in CodePipeline pipelines.",
        "stability": "stable",
        "summary": "Pause the pipeline if a deployment would add IAM permissions or Security Group rules."
      },
      "fqn": "@aws-cdk/pipelines.ConfirmPermissionsBroadening",
      "initializer": {
        "docs": {
          "stability": "stable"
        },
        "locationInModule": {
          "filename": "lib/codepipeline/confirm-permissions-broadening.ts",
          "line": 36
        },
        "parameters": [
          {
            "name": "id",
            "type": {
              "primitive": "string"
            }
          },
          {
            "name": "props",
            "type": {
              "fqn": "@aws-cdk/pipelines.PermissionsBroadeningCheckProps"
            }
          }
        ]
      },
      "interfaces": [
        "@aws-cdk/pipelines.ICodePipelineActionFactory"
      ],
      "kind": "class",
      "locationInModule": {
        "filename": "lib/codepipeline/confirm-permissions-broadening.ts",
        "line": 35
      },
      "methods": [
        {
          "docs": {
            "stability": "stable",
            "summary": "Create the desired Action and add it to the pipeline."
          },
          "locationInModule": {
            "filename": "lib/codepipeline/confirm-permissions-broadening.ts",
            "line": 40
          },
          "name": "produceAction",
          "overrides": "@aws-cdk/pipelines.ICodePipelineActionFactory",
          "parameters": [
            {
              "name": "stage",
              "type": {
                "fqn": "@aws-cdk/aws-codepipeline.IStage"
              }
            },
            {
              "name": "options",
              "type": {
                "fqn": "@aws-cdk/pipelines.ProduceActionOptions"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/pipelines.CodePipelineActionFactoryResult"
            }
          }
        }
      ],
      "name": "ConfirmPermissionsBroadening"
    },
    "@aws-cdk/pipelines.ConnectionSourceOptions": {
      "assembly": "@aws-cdk/pipelines",
      "datatype": true,
      "docs": {
        "stability": "stable",
        "summary": "Configuration options for CodeStar source."
      },
      "fqn": "@aws-cdk/pipelines.ConnectionSourceOptions",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/codepipeline/codepipeline-source.ts",
        "line": 244
      },
      "name": "ConnectionSourceOptions",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "example": "'arn:aws:codestar-connections:us-east-1:123456789012:connection/12345678-abcd-12ab-34cdef5678gh'",
            "see": "https://docs.aws.amazon.com/codepipeline/latest/userguide/connections-create.html",
            "stability": "stable",
            "summary": "The ARN of the CodeStar Connection created in the AWS console that has permissions to access this GitHub or BitBucket repository."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/codepipeline/codepipeline-source.ts",
            "line": 252
          },
          "name": "connectionArn",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "false",
            "remarks": "**Note**: if this option is true,\nthen only CodeBuild actions can use the resulting {@link output}.",
            "see": "https://docs.aws.amazon.com/codepipeline/latest/userguide/action-reference-CodestarConnectionSource.html#action-reference-CodestarConnectionSource-config",
            "stability": "stable",
            "summary": "Whether the output should be the contents of the repository (which is the default), or a link that allows CodeBuild to clone the repository before building."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/codepipeline/codepipeline-source.ts",
            "line": 267
          },
          "name": "codeBuildCloneOutput",
          "optional": true,
          "type": {
            "primitive": "boolean"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "true",
            "remarks": "If unspecified,\nthe default value is true, and the field does not display by default.",
            "see": "https://docs.aws.amazon.com/codepipeline/latest/userguide/action-reference-CodestarConnectionSource.html",
            "stability": "stable",
            "summary": "Controls automatically starting your pipeline when a new commit is made on the configured repository and branch."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/codepipeline/codepipeline-source.ts",
            "line": 277
          },
          "name": "triggerOnPush",
          "optional": true,
          "type": {
            "primitive": "boolean"
          }
        }
      ]
    },
    "@aws-cdk/pipelines.DeployCdkStackAction": {
      "assembly": "@aws-cdk/pipelines",
      "docs": {
        "remarks": "Adds two CodePipeline Actions to the pipeline: one to create a ChangeSet\nand one to execute it.\n\nYou do not need to instantiate this action yourself -- it will automatically\nbe added by the pipeline when you add stack artifacts or entire stages.",
        "stability": "stable",
        "summary": "Action to deploy a CDK Stack."
      },
      "fqn": "@aws-cdk/pipelines.DeployCdkStackAction",
      "initializer": {
        "docs": {
          "stability": "stable"
        },
        "locationInModule": {
          "filename": "lib/legacy/actions/deploy-cdk-stack-action.ts",
          "line": 227
        },
        "parameters": [
          {
            "name": "props",
            "type": {
              "fqn": "@aws-cdk/pipelines.DeployCdkStackActionProps"
            }
          }
        ]
      },
      "interfaces": [
        "@aws-cdk/aws-codepipeline.IAction"
      ],
      "kind": "class",
      "locationInModule": {
        "filename": "lib/legacy/actions/deploy-cdk-stack-action.ts",
        "line": 151
      },
      "methods": [
        {
          "docs": {
            "stability": "stable",
            "summary": "Construct a DeployCdkStackAction from a Stack artifact."
          },
          "locationInModule": {
            "filename": "lib/legacy/actions/deploy-cdk-stack-action.ts",
            "line": 155
          },
          "name": "fromStackArtifact",
          "parameters": [
            {
              "name": "scope",
              "type": {
                "fqn": "constructs.Construct"
              }
            },
            {
              "name": "artifact",
              "type": {
                "fqn": "@aws-cdk/cx-api.CloudFormationStackArtifact"
              }
            },
            {
              "name": "options",
              "type": {
                "fqn": "@aws-cdk/pipelines.CdkStackActionFromArtifactOptions"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/pipelines.DeployCdkStackAction"
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "stable",
            "summary": "Exists to implement IAction."
          },
          "locationInModule": {
            "filename": "lib/legacy/actions/deploy-cdk-stack-action.ts",
            "line": 269
          },
          "name": "bind",
          "overrides": "@aws-cdk/aws-codepipeline.IAction",
          "parameters": [
            {
              "name": "scope",
              "type": {
                "fqn": "@aws-cdk/core.Construct"
              }
            },
            {
              "name": "stage",
              "type": {
                "fqn": "@aws-cdk/aws-codepipeline.IStage"
              }
            },
            {
              "name": "options",
              "type": {
                "fqn": "@aws-cdk/aws-codepipeline.ActionBindOptions"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-codepipeline.ActionConfig"
            }
          }
        },
        {
          "docs": {
            "stability": "stable",
            "summary": "Exists to implement IAction."
          },
          "locationInModule": {
            "filename": "lib/legacy/actions/deploy-cdk-stack-action.ts",
            "line": 279
          },
          "name": "onStateChange",
          "overrides": "@aws-cdk/aws-codepipeline.IAction",
          "parameters": [
            {
              "name": "name",
              "type": {
                "primitive": "string"
              }
            },
            {
              "name": "target",
              "optional": true,
              "type": {
                "fqn": "@aws-cdk/aws-events.IRuleTarget"
              }
            },
            {
              "name": "options",
              "optional": true,
              "type": {
                "fqn": "@aws-cdk/aws-events.RuleProps"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-events.Rule"
            }
          }
        }
      ],
      "name": "DeployCdkStackAction",
      "properties": [
        {
          "docs": {
            "stability": "stable",
            "summary": "Exists to implement IAction."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/legacy/actions/deploy-cdk-stack-action.ts",
            "line": 286
          },
          "name": "actionProperties",
          "overrides": "@aws-cdk/aws-codepipeline.IAction",
          "type": {
            "fqn": "@aws-cdk/aws-codepipeline.ActionProperties"
          }
        },
        {
          "docs": {
            "stability": "stable",
            "summary": "Artifact ids of the artifact this stack artifact depends on."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/legacy/actions/deploy-cdk-stack-action.ts",
            "line": 222
          },
          "name": "dependencyStackArtifactIds",
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "string"
              },
              "kind": "array"
            }
          }
        },
        {
          "docs": {
            "stability": "stable",
            "summary": "The runorder for the execute action."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/legacy/actions/deploy-cdk-stack-action.ts",
            "line": 207
          },
          "name": "executeRunOrder",
          "type": {
            "primitive": "number"
          }
        },
        {
          "docs": {
            "stability": "stable",
            "summary": "The runorder for the prepare action."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/legacy/actions/deploy-cdk-stack-action.ts",
            "line": 202
          },
          "name": "prepareRunOrder",
          "type": {
            "primitive": "number"
          }
        },
        {
          "docs": {
            "stability": "stable",
            "summary": "Name of the deployed stack."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/legacy/actions/deploy-cdk-stack-action.ts",
            "line": 212
          },
          "name": "stackName",
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "stability": "stable",
            "summary": "Artifact id of the artifact this action was based on."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/legacy/actions/deploy-cdk-stack-action.ts",
            "line": 217
          },
          "name": "stackArtifactId",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        }
      ]
    },
    "@aws-cdk/pipelines.DeployCdkStackActionOptions": {
      "assembly": "@aws-cdk/pipelines",
      "datatype": true,
      "docs": {
        "stability": "stable",
        "summary": "Customization options for a DeployCdkStackAction."
      },
      "fqn": "@aws-cdk/pipelines.DeployCdkStackActionOptions",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/legacy/actions/deploy-cdk-stack-action.ts",
        "line": 20
      },
      "name": "DeployCdkStackActionOptions",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "stability": "stable",
            "summary": "The CodePipeline artifact that holds the Cloud Assembly."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/legacy/actions/deploy-cdk-stack-action.ts",
            "line": 31
          },
          "name": "cloudAssemblyInput",
          "type": {
            "fqn": "@aws-cdk/aws-codepipeline.Artifact"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "stackName",
            "stability": "stable",
            "summary": "Base name of the action."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/legacy/actions/deploy-cdk-stack-action.ts",
            "line": 26
          },
          "name": "baseActionName",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "'PipelineChange'",
            "stability": "stable",
            "summary": "Name of the change set to create and deploy."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/legacy/actions/deploy-cdk-stack-action.ts",
            "line": 66
          },
          "name": "changeSetName",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- prepareRunOrder + 1",
            "stability": "stable",
            "summary": "Run order for the Execute action."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/legacy/actions/deploy-cdk-stack-action.ts",
            "line": 45
          },
          "name": "executeRunOrder",
          "optional": true,
          "type": {
            "primitive": "number"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- No outputs",
            "stability": "stable",
            "summary": "Artifact to write Stack Outputs to."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/legacy/actions/deploy-cdk-stack-action.ts",
            "line": 52
          },
          "name": "output",
          "optional": true,
          "type": {
            "fqn": "@aws-cdk/aws-codepipeline.Artifact"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- Required when 'output' is set",
            "stability": "stable",
            "summary": "Filename in output to write Stack outputs to."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/legacy/actions/deploy-cdk-stack-action.ts",
            "line": 59
          },
          "name": "outputFileName",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "1",
            "stability": "stable",
            "summary": "Run order for the Prepare action."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/legacy/actions/deploy-cdk-stack-action.ts",
            "line": 38
          },
          "name": "prepareRunOrder",
          "optional": true,
          "type": {
            "primitive": "number"
          }
        }
      ]
    },
    "@aws-cdk/pipelines.DeployCdkStackActionProps": {
      "assembly": "@aws-cdk/pipelines",
      "datatype": true,
      "docs": {
        "stability": "stable",
        "summary": "Properties for a DeployCdkStackAction."
      },
      "fqn": "@aws-cdk/pipelines.DeployCdkStackActionProps",
      "interfaces": [
        "@aws-cdk/pipelines.DeployCdkStackActionOptions"
      ],
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/legacy/actions/deploy-cdk-stack-action.ts",
        "line": 72
      },
      "name": "DeployCdkStackActionProps",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "remarks": "This controls the account to deploy into",
            "stability": "stable",
            "summary": "Role for the action to assume."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/legacy/actions/deploy-cdk-stack-action.ts",
            "line": 83
          },
          "name": "actionRole",
          "type": {
            "fqn": "@aws-cdk/aws-iam.IRole"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "stable",
            "summary": "The name of the stack that should be created/updated."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/legacy/actions/deploy-cdk-stack-action.ts",
            "line": 88
          },
          "name": "stackName",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "stable",
            "summary": "Relative path of template in the input artifact."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/legacy/actions/deploy-cdk-stack-action.ts",
            "line": 76
          },
          "name": "templatePath",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- Execute CloudFormation using the action role",
            "stability": "stable",
            "summary": "Role to execute CloudFormation under."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/legacy/actions/deploy-cdk-stack-action.ts",
            "line": 95
          },
          "name": "cloudFormationExecutionRole",
          "optional": true,
          "type": {
            "fqn": "@aws-cdk/aws-iam.IRole"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- No dependencies",
            "remarks": "Used for pipeline order checking.",
            "stability": "stable",
            "summary": "Artifact ID for the stacks this stack depends on."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/legacy/actions/deploy-cdk-stack-action.ts",
            "line": 120
          },
          "name": "dependencyStackArtifactIds",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "string"
              },
              "kind": "array"
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- Same region as pipeline",
            "stability": "stable",
            "summary": "Region to deploy into."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/legacy/actions/deploy-cdk-stack-action.ts",
            "line": 102
          },
          "name": "region",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- Order will not be checked",
            "remarks": "Used for pipeline order checking.",
            "stability": "stable",
            "summary": "Artifact ID for the stack deployed here."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/legacy/actions/deploy-cdk-stack-action.ts",
            "line": 111
          },
          "name": "stackArtifactId",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- No template configuration",
            "stability": "stable",
            "summary": "Template configuration path relative to the input artifact."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/legacy/actions/deploy-cdk-stack-action.ts",
            "line": 127
          },
          "name": "templateConfigurationPath",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        }
      ]
    },
    "@aws-cdk/pipelines.DockerCredential": {
      "abstract": true,
      "assembly": "@aws-cdk/pipelines",
      "docs": {
        "stability": "stable",
        "summary": "Represents credentials used to access a Docker registry."
      },
      "fqn": "@aws-cdk/pipelines.DockerCredential",
      "initializer": {
        "docs": {
          "stability": "stable"
        },
        "locationInModule": {
          "filename": "lib/docker-credentials.ts",
          "line": 42
        },
        "parameters": [
          {
            "name": "usages",
            "optional": true,
            "type": {
              "collection": {
                "elementtype": {
                  "fqn": "@aws-cdk/pipelines.DockerCredentialUsage"
                },
                "kind": "array"
              }
            }
          }
        ]
      },
      "kind": "class",
      "locationInModule": {
        "filename": "lib/docker-credentials.ts",
        "line": 10
      },
      "methods": [
        {
          "docs": {
            "stability": "stable",
            "summary": "Creates a DockerCredential for a registry, based on its domain name (e.g., 'www.example.com')."
          },
          "locationInModule": {
            "filename": "lib/docker-credentials.ts",
            "line": 22
          },
          "name": "customRegistry",
          "parameters": [
            {
              "name": "registryDomain",
              "type": {
                "primitive": "string"
              }
            },
            {
              "name": "secret",
              "type": {
                "fqn": "@aws-cdk/aws-secretsmanager.ISecret"
              }
            },
            {
              "name": "opts",
              "optional": true,
              "type": {
                "fqn": "@aws-cdk/pipelines.ExternalDockerCredentialOptions"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/pipelines.DockerCredential"
            }
          },
          "static": true
        },
        {
          "docs": {
            "remarks": "Convenience method for `fromCustomRegistry('index.docker.io', opts)`.",
            "stability": "stable",
            "summary": "Creates a DockerCredential for DockerHub."
          },
          "locationInModule": {
            "filename": "lib/docker-credentials.ts",
            "line": 15
          },
          "name": "dockerHub",
          "parameters": [
            {
              "name": "secret",
              "type": {
                "fqn": "@aws-cdk/aws-secretsmanager.ISecret"
              }
            },
            {
              "name": "opts",
              "optional": true,
              "type": {
                "fqn": "@aws-cdk/pipelines.ExternalDockerCredentialOptions"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/pipelines.DockerCredential"
            }
          },
          "static": true
        },
        {
          "docs": {
            "remarks": "NOTE - All ECR repositories in the same account and region share a domain name\n(e.g., 0123456789012.dkr.ecr.eu-west-1.amazonaws.com), and can only have one associated\nset of credentials (and DockerCredential). Attempting to associate one set of credentials\nwith one ECR repo and another with another ECR repo in the same account and region will\nresult in failures when using these credentials in the pipeline.",
            "stability": "stable",
            "summary": "Creates a DockerCredential for one or more ECR repositories."
          },
          "locationInModule": {
            "filename": "lib/docker-credentials.ts",
            "line": 38
          },
          "name": "ecr",
          "parameters": [
            {
              "name": "repositories",
              "type": {
                "collection": {
                  "elementtype": {
                    "fqn": "@aws-cdk/aws-ecr.IRepository"
                  },
                  "kind": "array"
                }
              }
            },
            {
              "name": "opts",
              "optional": true,
              "type": {
                "fqn": "@aws-cdk/pipelines.EcrDockerCredentialOptions"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/pipelines.DockerCredential"
            }
          },
          "static": true
        },
        {
          "abstract": true,
          "docs": {
            "remarks": "This grants read access to any secrets, and pull access to any repositories.",
            "stability": "stable",
            "summary": "Grant read-only access to the registry credentials."
          },
          "locationInModule": {
            "filename": "lib/docker-credentials.ts",
            "line": 56
          },
          "name": "grantRead",
          "parameters": [
            {
              "name": "grantee",
              "type": {
                "fqn": "@aws-cdk/aws-iam.IGrantable"
              }
            },
            {
              "name": "usage",
              "type": {
                "fqn": "@aws-cdk/pipelines.DockerCredentialUsage"
              }
            }
          ]
        }
      ],
      "name": "DockerCredential",
      "properties": [
        {
          "docs": {
            "stability": "stable"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/docker-credentials.ts",
            "line": 42
          },
          "name": "usages",
          "optional": true,
          "protected": true,
          "type": {
            "collection": {
              "elementtype": {
                "fqn": "@aws-cdk/pipelines.DockerCredentialUsage"
              },
              "kind": "array"
            }
          }
        }
      ]
    },
    "@aws-cdk/pipelines.DockerCredentialUsage": {
      "assembly": "@aws-cdk/pipelines",
      "docs": {
        "stability": "stable",
        "summary": "Defines which stages of a pipeline require the specified credentials."
      },
      "fqn": "@aws-cdk/pipelines.DockerCredentialUsage",
      "kind": "enum",
      "locationInModule": {
        "filename": "lib/docker-credentials.ts",
        "line": 105
      },
      "members": [
        {
          "docs": {
            "stability": "stable",
            "summary": "Synth/Build."
          },
          "name": "SYNTH"
        },
        {
          "docs": {
            "stability": "stable",
            "summary": "Self-update."
          },
          "name": "SELF_UPDATE"
        },
        {
          "docs": {
            "stability": "stable",
            "summary": "Asset publishing."
          },
          "name": "ASSET_PUBLISHING"
        }
      ],
      "name": "DockerCredentialUsage"
    },
    "@aws-cdk/pipelines.EcrDockerCredentialOptions": {
      "assembly": "@aws-cdk/pipelines",
      "datatype": true,
      "docs": {
        "stability": "stable",
        "summary": "Options for defining access for a Docker Credential composed of ECR repos."
      },
      "fqn": "@aws-cdk/pipelines.EcrDockerCredentialOptions",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/docker-credentials.ts",
        "line": 91
      },
      "name": "EcrDockerCredentialOptions",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "default": "- none. The current execution role will be used.",
            "stability": "stable",
            "summary": "An IAM role to assume prior to accessing the secret."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/docker-credentials.ts",
            "line": 96
          },
          "name": "assumeRole",
          "optional": true,
          "type": {
            "fqn": "@aws-cdk/aws-iam.IRole"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- all relevant stages (synth, self-update, asset publishing) are granted access.",
            "stability": "stable",
            "summary": "Defines which stages of the pipeline should be granted access to these credentials."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/docker-credentials.ts",
            "line": 101
          },
          "name": "usages",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "fqn": "@aws-cdk/pipelines.DockerCredentialUsage"
              },
              "kind": "array"
            }
          }
        }
      ]
    },
    "@aws-cdk/pipelines.ExternalDockerCredentialOptions": {
      "assembly": "@aws-cdk/pipelines",
      "datatype": true,
      "docs": {
        "stability": "stable",
        "summary": "Options for defining credentials for a Docker Credential."
      },
      "fqn": "@aws-cdk/pipelines.ExternalDockerCredentialOptions",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/docker-credentials.ts",
        "line": 67
      },
      "name": "ExternalDockerCredentialOptions",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "default": "- none. The current execution role will be used.",
            "stability": "stable",
            "summary": "An IAM role to assume prior to accessing the secret."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/docker-credentials.ts",
            "line": 82
          },
          "name": "assumeRole",
          "optional": true,
          "type": {
            "fqn": "@aws-cdk/aws-iam.IRole"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "'secret'",
            "stability": "stable",
            "summary": "The name of the JSON field of the secret which contains the secret/password."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/docker-credentials.ts",
            "line": 77
          },
          "name": "secretPasswordField",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "'username'",
            "stability": "stable",
            "summary": "The name of the JSON field of the secret which contains the user/login name."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/docker-credentials.ts",
            "line": 72
          },
          "name": "secretUsernameField",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- all relevant stages (synth, self-update, asset publishing) are granted access.",
            "stability": "stable",
            "summary": "Defines which stages of the pipeline should be granted access to these credentials."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/docker-credentials.ts",
            "line": 87
          },
          "name": "usages",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "fqn": "@aws-cdk/pipelines.DockerCredentialUsage"
              },
              "kind": "array"
            }
          }
        }
      ]
    },
    "@aws-cdk/pipelines.FileSet": {
      "assembly": "@aws-cdk/pipelines",
      "docs": {
        "remarks": "Individual steps in the pipeline produce or consume\n`FileSet`s.",
        "stability": "stable",
        "summary": "A set of files traveling through the deployment pipeline."
      },
      "fqn": "@aws-cdk/pipelines.FileSet",
      "initializer": {
        "docs": {
          "stability": "stable"
        },
        "locationInModule": {
          "filename": "lib/blueprint/file-set.ts",
          "line": 18
        },
        "parameters": [
          {
            "docs": {
              "summary": "Human-readable descriptor for this file set (does not need to be unique)."
            },
            "name": "id",
            "type": {
              "primitive": "string"
            }
          },
          {
            "name": "producer",
            "optional": true,
            "type": {
              "fqn": "@aws-cdk/pipelines.Step"
            }
          }
        ]
      },
      "interfaces": [
        "@aws-cdk/pipelines.IFileSetProducer"
      ],
      "kind": "class",
      "locationInModule": {
        "filename": "lib/blueprint/file-set.ts",
        "line": 9
      },
      "methods": [
        {
          "docs": {
            "remarks": "This method can only be called once.",
            "stability": "stable",
            "summary": "Mark the given Step as the producer for this FileSet."
          },
          "locationInModule": {
            "filename": "lib/blueprint/file-set.ts",
            "line": 39
          },
          "name": "producedBy",
          "parameters": [
            {
              "name": "producer",
              "optional": true,
              "type": {
                "fqn": "@aws-cdk/pipelines.Step"
              }
            }
          ]
        },
        {
          "docs": {
            "stability": "stable",
            "summary": "Return a string representation of this FileSet."
          },
          "locationInModule": {
            "filename": "lib/blueprint/file-set.ts",
            "line": 49
          },
          "name": "toString",
          "returns": {
            "type": {
              "primitive": "string"
            }
          }
        }
      ],
      "name": "FileSet",
      "properties": [
        {
          "docs": {
            "stability": "stable",
            "summary": "Human-readable descriptor for this file set (does not need to be unique)."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/blueprint/file-set.ts",
            "line": 20
          },
          "name": "id",
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "stability": "stable",
            "summary": "The Step that produces this FileSet."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/blueprint/file-set.ts",
            "line": 27
          },
          "name": "producer",
          "type": {
            "fqn": "@aws-cdk/pipelines.Step"
          }
        },
        {
          "docs": {
            "remarks": "The primary output of a FileSet is itself.",
            "stability": "stable",
            "summary": "The primary output of a file set producer."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/blueprint/file-set.ts",
            "line": 15
          },
          "name": "primaryOutput",
          "optional": true,
          "overrides": "@aws-cdk/pipelines.IFileSetProducer",
          "type": {
            "fqn": "@aws-cdk/pipelines.FileSet"
          }
        }
      ]
    },
    "@aws-cdk/pipelines.FileSetLocation": {
      "assembly": "@aws-cdk/pipelines",
      "datatype": true,
      "docs": {
        "stability": "stable",
        "summary": "Location of a FileSet consumed or produced by a ShellStep."
      },
      "fqn": "@aws-cdk/pipelines.FileSetLocation",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/blueprint/shell-step.ts",
        "line": 236
      },
      "name": "FileSetLocation",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "stability": "stable",
            "summary": "The (relative) directory where the FileSet is found."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/blueprint/shell-step.ts",
            "line": 240
          },
          "name": "directory",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "stable",
            "summary": "The FileSet object."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/blueprint/shell-step.ts",
            "line": 245
          },
          "name": "fileSet",
          "type": {
            "fqn": "@aws-cdk/pipelines.FileSet"
          }
        }
      ]
    },
    "@aws-cdk/pipelines.FromStackArtifactOptions": {
      "assembly": "@aws-cdk/pipelines",
      "datatype": true,
      "docs": {
        "stability": "stable",
        "summary": "Options for CdkDeployAction.fromStackArtifact."
      },
      "fqn": "@aws-cdk/pipelines.FromStackArtifactOptions",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/legacy/actions/deploy-cdk-stack-action.ts",
        "line": 321
      },
      "name": "FromStackArtifactOptions",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "stability": "stable",
            "summary": "The CodePipeline artifact that holds the Cloud Assembly."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/legacy/actions/deploy-cdk-stack-action.ts",
            "line": 325
          },
          "name": "cloudAssemblyInput",
          "type": {
            "fqn": "@aws-cdk/aws-codepipeline.Artifact"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- prepareRunOrder + 1",
            "stability": "stable",
            "summary": "Run order for the Execute action."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/legacy/actions/deploy-cdk-stack-action.ts",
            "line": 339
          },
          "name": "executeRunOrder",
          "optional": true,
          "type": {
            "primitive": "number"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- No outputs",
            "stability": "stable",
            "summary": "Artifact to write Stack Outputs to."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/legacy/actions/deploy-cdk-stack-action.ts",
            "line": 346
          },
          "name": "output",
          "optional": true,
          "type": {
            "fqn": "@aws-cdk/aws-codepipeline.Artifact"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- Required when 'output' is set",
            "stability": "stable",
            "summary": "Filename in output to write Stack outputs to."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/legacy/actions/deploy-cdk-stack-action.ts",
            "line": 353
          },
          "name": "outputFileName",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "1",
            "stability": "stable",
            "summary": "Run order for the 2 actions that will be created."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/legacy/actions/deploy-cdk-stack-action.ts",
            "line": 332
          },
          "name": "prepareRunOrder",
          "optional": true,
          "type": {
            "primitive": "number"
          }
        }
      ]
    },
    "@aws-cdk/pipelines.GitHubSourceOptions": {
      "assembly": "@aws-cdk/pipelines",
      "datatype": true,
      "docs": {
        "stability": "stable",
        "summary": "Options for GitHub sources."
      },
      "fqn": "@aws-cdk/pipelines.GitHubSourceOptions",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/codepipeline/codepipeline-source.ts",
        "line": 126
      },
      "name": "GitHubSourceOptions",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "default": "- SecretValue.secretsManager('github-token')",
            "remarks": "It is recommended to use a Secrets Manager `Secret` to obtain the token:\n\n```ts\nconst oauth = cdk.SecretValue.secretsManager('my-github-token');\nnew GitHubSource(this, 'GitHubSource', { authentication: oauth, ... });\n```\n\nThe GitHub Personal Access Token should have these scopes:\n\n* **repo** - to read the repository\n* **admin:repo_hook** - if you plan to use webhooks (true by default)",
            "see": "https://docs.aws.amazon.com/codepipeline/latest/userguide/GitHub-create-personal-token-CLI.html",
            "stability": "stable",
            "summary": "A GitHub OAuth token to use for authentication."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/codepipeline/codepipeline-source.ts",
            "line": 146
          },
          "name": "authentication",
          "optional": true,
          "type": {
            "fqn": "@aws-cdk/core.SecretValue"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "GitHubTrigger.WEBHOOK",
            "remarks": "With the default value \"WEBHOOK\", a webhook is created in GitHub that triggers the action.\nWith \"POLL\", CodePipeline periodically checks the source for changes.\nWith \"None\", the action is not triggered through changes in the source.\n\nTo use `WEBHOOK`, your GitHub Personal Access Token should have\n**admin:repo_hook** scope (in addition to the regular **repo** scope).",
            "stability": "stable",
            "summary": "How AWS CodePipeline should be triggered."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/codepipeline/codepipeline-source.ts",
            "line": 160
          },
          "name": "trigger",
          "optional": true,
          "type": {
            "fqn": "@aws-cdk/aws-codepipeline-actions.GitHubTrigger"
          }
        }
      ]
    },
    "@aws-cdk/pipelines.ICodePipelineActionFactory": {
      "assembly": "@aws-cdk/pipelines",
      "docs": {
        "remarks": "If you have specific types of Actions you want to add to a\nCodePipeline, write a subclass of `Step` that implements this\ninterface, and add the action or actions you want in the `produce` method.\n\nThere needs to be a level of indirection here, because some aspects of the\nAction creation need to be controlled by the workflow engine (name and\nrunOrder). All the rest of the properties are controlled by the factory.",
        "stability": "stable",
        "summary": "Factory for explicit CodePipeline Actions."
      },
      "fqn": "@aws-cdk/pipelines.ICodePipelineActionFactory",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/codepipeline/codepipeline-action-factory.ts",
        "line": 77
      },
      "methods": [
        {
          "abstract": true,
          "docs": {
            "stability": "stable",
            "summary": "Create the desired Action and add it to the pipeline."
          },
          "locationInModule": {
            "filename": "lib/codepipeline/codepipeline-action-factory.ts",
            "line": 81
          },
          "name": "produceAction",
          "parameters": [
            {
              "name": "stage",
              "type": {
                "fqn": "@aws-cdk/aws-codepipeline.IStage"
              }
            },
            {
              "name": "options",
              "type": {
                "fqn": "@aws-cdk/pipelines.ProduceActionOptions"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/pipelines.CodePipelineActionFactoryResult"
            }
          }
        }
      ],
      "name": "ICodePipelineActionFactory"
    },
    "@aws-cdk/pipelines.IFileSetProducer": {
      "assembly": "@aws-cdk/pipelines",
      "docs": {
        "remarks": "Steps implicitly produce a primary FileSet as an output.",
        "stability": "stable",
        "summary": "Any class that produces, or is itself, a `FileSet`."
      },
      "fqn": "@aws-cdk/pipelines.IFileSetProducer",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/blueprint/file-set.ts",
        "line": 59
      },
      "name": "IFileSetProducer",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "default": "- This producer doesn't produce any file set",
            "stability": "stable",
            "summary": "The `FileSet` produced by this file set producer."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/blueprint/file-set.ts",
            "line": 65
          },
          "name": "primaryOutput",
          "optional": true,
          "type": {
            "fqn": "@aws-cdk/pipelines.FileSet"
          }
        }
      ]
    },
    "@aws-cdk/pipelines.IStageHost": {
      "assembly": "@aws-cdk/pipelines",
      "docs": {
        "stability": "stable",
        "summary": "Features that the Stage needs from its environment."
      },
      "fqn": "@aws-cdk/pipelines.IStageHost",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/legacy/stage.ts",
        "line": 452
      },
      "methods": [
        {
          "abstract": true,
          "docs": {
            "stability": "stable",
            "summary": "Make sure all the assets from the given manifest are published."
          },
          "locationInModule": {
            "filename": "lib/legacy/stage.ts",
            "line": 456
          },
          "name": "publishAsset",
          "parameters": [
            {
              "name": "command",
              "type": {
                "fqn": "@aws-cdk/pipelines.AssetPublishingCommand"
              }
            }
          ]
        },
        {
          "abstract": true,
          "docs": {
            "stability": "stable",
            "summary": "Return the Artifact the given stack has to emit its outputs into, if any."
          },
          "locationInModule": {
            "filename": "lib/legacy/stage.ts",
            "line": 461
          },
          "name": "stackOutputArtifact",
          "parameters": [
            {
              "name": "stackArtifactId",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "optional": true,
            "type": {
              "fqn": "@aws-cdk/aws-codepipeline.Artifact"
            }
          }
        }
      ],
      "name": "IStageHost"
    },
    "@aws-cdk/pipelines.ManualApprovalStep": {
      "assembly": "@aws-cdk/pipelines",
      "base": "@aws-cdk/pipelines.Step",
      "docs": {
        "remarks": "If this step is added to a Pipeline, the Pipeline will\nbe paused waiting for a human to resume it\n\nOnly engines that support pausing the deployment will\nsupport this step type.",
        "stability": "stable",
        "summary": "A manual approval step."
      },
      "fqn": "@aws-cdk/pipelines.ManualApprovalStep",
      "initializer": {
        "docs": {
          "stability": "stable"
        },
        "locationInModule": {
          "filename": "lib/blueprint/manual-approval.ts",
          "line": 32
        },
        "parameters": [
          {
            "name": "id",
            "type": {
              "primitive": "string"
            }
          },
          {
            "name": "props",
            "optional": true,
            "type": {
              "fqn": "@aws-cdk/pipelines.ManualApprovalStepProps"
            }
          }
        ]
      },
      "kind": "class",
      "locationInModule": {
        "filename": "lib/blueprint/manual-approval.ts",
        "line": 24
      },
      "name": "ManualApprovalStep",
      "properties": [
        {
          "docs": {
            "default": "- No comment",
            "stability": "stable",
            "summary": "The comment associated with this manual approval."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/blueprint/manual-approval.ts",
            "line": 30
          },
          "name": "comment",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        }
      ]
    },
    "@aws-cdk/pipelines.ManualApprovalStepProps": {
      "assembly": "@aws-cdk/pipelines",
      "datatype": true,
      "docs": {
        "stability": "stable",
        "summary": "Construction properties for a `ManualApprovalStep`."
      },
      "fqn": "@aws-cdk/pipelines.ManualApprovalStepProps",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/blueprint/manual-approval.ts",
        "line": 6
      },
      "name": "ManualApprovalStepProps",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "default": "- No comment",
            "stability": "stable",
            "summary": "The comment to display with this manual approval."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/blueprint/manual-approval.ts",
            "line": 12
          },
          "name": "comment",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        }
      ]
    },
    "@aws-cdk/pipelines.PermissionsBroadeningCheckProps": {
      "assembly": "@aws-cdk/pipelines",
      "datatype": true,
      "docs": {
        "stability": "stable",
        "summary": "Properties for a `PermissionsBroadeningCheck`."
      },
      "fqn": "@aws-cdk/pipelines.PermissionsBroadeningCheckProps",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/codepipeline/confirm-permissions-broadening.ts",
        "line": 14
      },
      "name": "PermissionsBroadeningCheckProps",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "remarks": "This should be the same Stage object you are passing to `addStage()`.",
            "stability": "stable",
            "summary": "The CDK Stage object to check the stacks of."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/codepipeline/confirm-permissions-broadening.ts",
            "line": 20
          },
          "name": "stage",
          "type": {
            "fqn": "@aws-cdk/core.Stage"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- no notification",
            "stability": "stable",
            "summary": "Topic to send notifications when a human needs to give manual confirmation."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/codepipeline/confirm-permissions-broadening.ts",
            "line": 27
          },
          "name": "notificationTopic",
          "optional": true,
          "type": {
            "fqn": "@aws-cdk/aws-sns.ITopic"
          }
        }
      ]
    },
    "@aws-cdk/pipelines.PipelineBase": {
      "abstract": true,
      "assembly": "@aws-cdk/pipelines",
      "base": "@aws-cdk/core.Construct",
      "docs": {
        "remarks": "Different deployment systems will provide subclasses of `Pipeline` that generate\nthe deployment infrastructure necessary to deploy CDK apps, specific to that system.\n\nThis library comes with the `CodePipeline` class, which uses AWS CodePipeline\nto deploy CDK apps.\n\nThe actual pipeline infrastructure is constructed (by invoking the engine)\nwhen `buildPipeline()` is called, or when `app.synth()` is called (whichever\nhappens first).",
        "stability": "stable",
        "summary": "A generic CDK Pipelines pipeline."
      },
      "fqn": "@aws-cdk/pipelines.PipelineBase",
      "initializer": {
        "docs": {
          "stability": "stable"
        },
        "locationInModule": {
          "filename": "lib/main/pipeline-base.ts",
          "line": 58
        },
        "parameters": [
          {
            "name": "scope",
            "type": {
              "fqn": "constructs.Construct"
            }
          },
          {
            "name": "id",
            "type": {
              "primitive": "string"
            }
          },
          {
            "name": "props",
            "type": {
              "fqn": "@aws-cdk/pipelines.PipelineBaseProps"
            }
          }
        ]
      },
      "kind": "class",
      "locationInModule": {
        "filename": "lib/main/pipeline-base.ts",
        "line": 38
      },
      "methods": [
        {
          "docs": {
            "remarks": "Add a Stage to the pipeline, to be deployed in sequence with other\nStages added to the pipeline. All Stacks in the stage will be deployed\nin an order automatically determined by their relative dependencies.",
            "stability": "stable",
            "summary": "Deploy a single Stage by itself."
          },
          "locationInModule": {
            "filename": "lib/main/pipeline-base.ts",
            "line": 83
          },
          "name": "addStage",
          "parameters": [
            {
              "name": "stage",
              "type": {
                "fqn": "@aws-cdk/core.Stage"
              }
            },
            {
              "name": "options",
              "optional": true,
              "type": {
                "fqn": "@aws-cdk/pipelines.AddStageOpts"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/pipelines.StageDeployment"
            }
          }
        },
        {
          "docs": {
            "remarks": "Use the return object of this method to deploy multiple stages in parallel.\n\nExample:\n\n```ts\nconst wave = pipeline.addWave('MyWave');\nwave.addStage(new MyStage('Stage1', ...));\nwave.addStage(new MyStage('Stage2', ...));\n```",
            "stability": "stable",
            "summary": "Add a Wave to the pipeline, for deploying multiple Stages in parallel."
          },
          "locationInModule": {
            "filename": "lib/main/pipeline-base.ts",
            "line": 104
          },
          "name": "addWave",
          "parameters": [
            {
              "name": "id",
              "type": {
                "primitive": "string"
              }
            },
            {
              "name": "options",
              "optional": true,
              "type": {
                "fqn": "@aws-cdk/pipelines.WaveOptions"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/pipelines.Wave"
            }
          }
        },
        {
          "docs": {
            "remarks": "It is not possible to modify the pipeline after calling this method.",
            "stability": "stable",
            "summary": "Send the current pipeline definition to the engine, and construct the pipeline."
          },
          "locationInModule": {
            "filename": "lib/main/pipeline-base.ts",
            "line": 119
          },
          "name": "buildPipeline"
        },
        {
          "abstract": true,
          "docs": {
            "stability": "stable",
            "summary": "Implemented by subclasses to do the actual pipeline construction."
          },
          "locationInModule": {
            "filename": "lib/main/pipeline-base.ts",
            "line": 130
          },
          "name": "doBuildPipeline",
          "protected": true
        }
      ],
      "name": "PipelineBase",
      "properties": [
        {
          "docs": {
            "remarks": "This is the primary output of the synth step.",
            "stability": "stable",
            "summary": "The FileSet tha contains the cloud assembly."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/main/pipeline-base.ts",
            "line": 54
          },
          "name": "cloudAssemblyFileSet",
          "type": {
            "fqn": "@aws-cdk/pipelines.FileSet"
          }
        },
        {
          "docs": {
            "stability": "stable",
            "summary": "The build step that produces the CDK Cloud Assembly."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/main/pipeline-base.ts",
            "line": 42
          },
          "name": "synth",
          "type": {
            "fqn": "@aws-cdk/pipelines.IFileSetProducer"
          }
        },
        {
          "docs": {
            "stability": "stable",
            "summary": "The waves in this pipeline."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/main/pipeline-base.ts",
            "line": 47
          },
          "name": "waves",
          "type": {
            "collection": {
              "elementtype": {
                "fqn": "@aws-cdk/pipelines.Wave"
              },
              "kind": "array"
            }
          }
        }
      ]
    },
    "@aws-cdk/pipelines.PipelineBaseProps": {
      "assembly": "@aws-cdk/pipelines",
      "datatype": true,
      "docs": {
        "stability": "stable",
        "summary": "Properties for a `Pipeline`."
      },
      "fqn": "@aws-cdk/pipelines.PipelineBaseProps",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/main/pipeline-base.ts",
        "line": 12
      },
      "name": "PipelineBaseProps",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "remarks": "The primary output of this step needs to be the `cdk.out` directory\ngenerated by the `cdk synth` command.\n\nIf you use a `ShellStep` here and you don't configure an output directory,\nthe output directory will automatically be assumed to be `cdk.out`.",
            "stability": "stable",
            "summary": "The build step that produces the CDK Cloud Assembly."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/main/pipeline-base.ts",
            "line": 22
          },
          "name": "synth",
          "type": {
            "fqn": "@aws-cdk/pipelines.IFileSetProducer"
          }
        }
      ]
    },
    "@aws-cdk/pipelines.ProduceActionOptions": {
      "assembly": "@aws-cdk/pipelines",
      "datatype": true,
      "docs": {
        "stability": "stable",
        "summary": "Options for the `CodePipelineActionFactory.produce()` method."
      },
      "fqn": "@aws-cdk/pipelines.ProduceActionOptions",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/codepipeline/codepipeline-action-factory.ts",
        "line": 10
      },
      "name": "ProduceActionOptions",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "stability": "stable",
            "summary": "Name the action should get."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/codepipeline/codepipeline-action-factory.ts",
            "line": 19
          },
          "name": "actionName",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "stable",
            "summary": "Helper object to translate FileSets to CodePipeline Artifacts."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/codepipeline/codepipeline-action-factory.ts",
            "line": 29
          },
          "name": "artifacts",
          "type": {
            "fqn": "@aws-cdk/pipelines.ArtifactMap"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "stable",
            "summary": "The pipeline the action is being generated for."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/codepipeline/codepipeline-action-factory.ts",
            "line": 45
          },
          "name": "pipeline",
          "type": {
            "fqn": "@aws-cdk/pipelines.CodePipeline"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "stable",
            "summary": "RunOrder the action should get."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/codepipeline/codepipeline-action-factory.ts",
            "line": 24
          },
          "name": "runOrder",
          "type": {
            "primitive": "number"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "stable",
            "summary": "Scope in which to create constructs."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/codepipeline/codepipeline-action-factory.ts",
            "line": 14
          },
          "name": "scope",
          "type": {
            "fqn": "constructs.Construct"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "false",
            "remarks": "If it is, the action should take care to reflect some part of\nits own definition in the pipeline action definition, to\ntrigger a restart after self-mutation (if necessary).",
            "stability": "stable",
            "summary": "Whether or not this action is inserted before self mutation."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/codepipeline/codepipeline-action-factory.ts",
            "line": 63
          },
          "name": "beforeSelfMutation",
          "optional": true,
          "type": {
            "primitive": "boolean"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- No CodeBuild project defaults",
            "stability": "stable",
            "summary": "If this action factory creates a CodeBuild step, default options to inherit."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/codepipeline/codepipeline-action-factory.ts",
            "line": 52
          },
          "name": "codeBuildDefaults",
          "optional": true,
          "type": {
            "fqn": "@aws-cdk/pipelines.CodeBuildOptions"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- A fallback artifact does not exist",
            "remarks": "CodeBuild Projects MUST have an input artifact in order to be added to the Pipeline. If\nthe Project doesn't actually care about its input (it can be anything), it can use the\nArtifact passed here.",
            "stability": "stable",
            "summary": "An input artifact that CodeBuild projects that don't actually need an input artifact can use."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/codepipeline/codepipeline-action-factory.ts",
            "line": 40
          },
          "name": "fallbackArtifact",
          "optional": true,
          "type": {
            "fqn": "@aws-cdk/aws-codepipeline.Artifact"
          }
        }
      ]
    },
    "@aws-cdk/pipelines.PublishAssetsAction": {
      "assembly": "@aws-cdk/pipelines",
      "base": "@aws-cdk/core.Construct",
      "docs": {
        "remarks": "Creates a CodeBuild project which will use the CDK CLI\nto prepare and publish the asset.\n\nYou do not need to instantiate this action -- it will automatically\nbe added by the pipeline when you add stacks that use assets.",
        "stability": "stable",
        "summary": "Action to publish an asset in the pipeline."
      },
      "fqn": "@aws-cdk/pipelines.PublishAssetsAction",
      "initializer": {
        "docs": {
          "stability": "stable"
        },
        "locationInModule": {
          "filename": "lib/legacy/actions/publish-assets-action.ts",
          "line": 121
        },
        "parameters": [
          {
            "name": "scope",
            "type": {
              "fqn": "constructs.Construct"
            }
          },
          {
            "name": "id",
            "type": {
              "primitive": "string"
            }
          },
          {
            "name": "props",
            "type": {
              "fqn": "@aws-cdk/pipelines.PublishAssetsActionProps"
            }
          }
        ]
      },
      "interfaces": [
        "@aws-cdk/aws-codepipeline.IAction"
      ],
      "kind": "class",
      "locationInModule": {
        "filename": "lib/legacy/actions/publish-assets-action.ts",
        "line": 115
      },
      "methods": [
        {
          "docs": {
            "remarks": "Manifest path should be relative to the root Cloud Assembly.",
            "stability": "stable",
            "summary": "Add a single publishing command."
          },
          "locationInModule": {
            "filename": "lib/legacy/actions/publish-assets-action.ts",
            "line": 189
          },
          "name": "addPublishCommand",
          "parameters": [
            {
              "name": "relativeManifestPath",
              "type": {
                "primitive": "string"
              }
            },
            {
              "name": "assetSelector",
              "type": {
                "primitive": "string"
              }
            }
          ]
        },
        {
          "docs": {
            "stability": "stable",
            "summary": "Exists to implement IAction."
          },
          "locationInModule": {
            "filename": "lib/legacy/actions/publish-assets-action.ts",
            "line": 199
          },
          "name": "bind",
          "overrides": "@aws-cdk/aws-codepipeline.IAction",
          "parameters": [
            {
              "name": "scope",
              "type": {
                "fqn": "@aws-cdk/core.Construct"
              }
            },
            {
              "name": "stage",
              "type": {
                "fqn": "@aws-cdk/aws-codepipeline.IStage"
              }
            },
            {
              "name": "options",
              "type": {
                "fqn": "@aws-cdk/aws-codepipeline.ActionBindOptions"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-codepipeline.ActionConfig"
            }
          }
        },
        {
          "docs": {
            "stability": "stable",
            "summary": "Exists to implement IAction."
          },
          "locationInModule": {
            "filename": "lib/legacy/actions/publish-assets-action.ts",
            "line": 206
          },
          "name": "onStateChange",
          "overrides": "@aws-cdk/aws-codepipeline.IAction",
          "parameters": [
            {
              "name": "name",
              "type": {
                "primitive": "string"
              }
            },
            {
              "name": "target",
              "optional": true,
              "type": {
                "fqn": "@aws-cdk/aws-events.IRuleTarget"
              }
            },
            {
              "name": "options",
              "optional": true,
              "type": {
                "fqn": "@aws-cdk/aws-events.RuleProps"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-events.Rule"
            }
          }
        }
      ],
      "name": "PublishAssetsAction",
      "properties": [
        {
          "docs": {
            "stability": "stable",
            "summary": "Exists to implement IAction."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/legacy/actions/publish-assets-action.ts",
            "line": 213
          },
          "name": "actionProperties",
          "overrides": "@aws-cdk/aws-codepipeline.IAction",
          "type": {
            "fqn": "@aws-cdk/aws-codepipeline.ActionProperties"
          }
        }
      ]
    },
    "@aws-cdk/pipelines.PublishAssetsActionProps": {
      "assembly": "@aws-cdk/pipelines",
      "datatype": true,
      "docs": {
        "stability": "stable",
        "summary": "Props for a PublishAssetsAction."
      },
      "fqn": "@aws-cdk/pipelines.PublishAssetsActionProps",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/legacy/actions/publish-assets-action.ts",
        "line": 21
      },
      "name": "PublishAssetsActionProps",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "stability": "stable",
            "summary": "Name of publishing action."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/legacy/actions/publish-assets-action.ts",
            "line": 25
          },
          "name": "actionName",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "stable",
            "summary": "AssetType we're publishing."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/legacy/actions/publish-assets-action.ts",
            "line": 35
          },
          "name": "assetType",
          "type": {
            "fqn": "@aws-cdk/pipelines.AssetType"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "stable",
            "summary": "The CodePipeline artifact that holds the Cloud Assembly."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/legacy/actions/publish-assets-action.ts",
            "line": 30
          },
          "name": "cloudAssemblyInput",
          "type": {
            "fqn": "@aws-cdk/aws-codepipeline.Artifact"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- none",
            "stability": "stable",
            "summary": "Custom BuildSpec that is merged with generated one."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/legacy/actions/publish-assets-action.ts",
            "line": 87
          },
          "name": "buildSpec",
          "optional": true,
          "type": {
            "fqn": "@aws-cdk/aws-codebuild.BuildSpec"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- Latest version",
            "stability": "stable",
            "summary": "Version of CDK CLI to 'npm install'."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/legacy/actions/publish-assets-action.ts",
            "line": 42
          },
          "name": "cdkCliVersion",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "false",
            "remarks": "This prevents size limitation errors as inline specs have a max length of 25600 characters",
            "stability": "stable",
            "summary": "Use a file buildspec written to the cloud assembly instead of an inline buildspec."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/legacy/actions/publish-assets-action.ts",
            "line": 95
          },
          "name": "createBuildspecFile",
          "optional": true,
          "type": {
            "primitive": "boolean"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- none",
            "stability": "stable",
            "summary": "Any Dependable construct that the CodeBuild project needs to take a dependency on."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/legacy/actions/publish-assets-action.ts",
            "line": 63
          },
          "name": "dependable",
          "optional": true,
          "type": {
            "fqn": "@aws-cdk/core.IDependable"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "-",
            "stability": "stable",
            "summary": "Additional commands to run before installing cdk-assert Use this to setup proxies or npm mirrors."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/legacy/actions/publish-assets-action.ts",
            "line": 103
          },
          "name": "preInstallCommands",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "string"
              },
              "kind": "array"
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- Automatically generated",
            "stability": "stable",
            "summary": "Name of the CodeBuild project."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/legacy/actions/publish-assets-action.ts",
            "line": 49
          },
          "name": "projectName",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- Automatically generated",
            "stability": "stable",
            "summary": "Role to use for CodePipeline and CodeBuild to build and publish the assets."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/legacy/actions/publish-assets-action.ts",
            "line": 56
          },
          "name": "role",
          "optional": true,
          "type": {
            "fqn": "@aws-cdk/aws-iam.IRole"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- All private subnets.",
            "remarks": "Only used if 'vpc' is supplied.",
            "stability": "stable",
            "summary": "Which subnets to use."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/legacy/actions/publish-assets-action.ts",
            "line": 79
          },
          "name": "subnetSelection",
          "optional": true,
          "type": {
            "fqn": "@aws-cdk/aws-ec2.SubnetSelection"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- No VPC",
            "stability": "stable",
            "summary": "The VPC where to execute the PublishAssetsAction."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/legacy/actions/publish-assets-action.ts",
            "line": 70
          },
          "name": "vpc",
          "optional": true,
          "type": {
            "fqn": "@aws-cdk/aws-ec2.IVpc"
          }
        }
      ]
    },
    "@aws-cdk/pipelines.S3SourceOptions": {
      "assembly": "@aws-cdk/pipelines",
      "datatype": true,
      "docs": {
        "stability": "stable",
        "summary": "Options for S3 sources."
      },
      "fqn": "@aws-cdk/pipelines.S3SourceOptions",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/codepipeline/codepipeline-source.ts",
        "line": 202
      },
      "name": "S3SourceOptions",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "default": "- The bucket name",
            "stability": "stable",
            "summary": "The action name used for this source in the CodePipeline."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/codepipeline/codepipeline-source.ts",
            "line": 218
          },
          "name": "actionName",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "S3Trigger.POLL",
            "remarks": "Note that if this is S3Trigger.EVENTS, you need to make sure to include the source Bucket in a CloudTrail Trail,\nas otherwise the CloudWatch Events will not be emitted.",
            "see": "https://docs.aws.amazon.com/AmazonCloudWatch/latest/events/log-s3-data-events.html",
            "stability": "stable",
            "summary": "How should CodePipeline detect source changes for this Action."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/codepipeline/codepipeline-source.ts",
            "line": 211
          },
          "name": "trigger",
          "optional": true,
          "type": {
            "fqn": "@aws-cdk/aws-codepipeline-actions.S3Trigger"
          }
        }
      ]
    },
    "@aws-cdk/pipelines.ShellScriptAction": {
      "assembly": "@aws-cdk/pipelines",
      "docs": {
        "stability": "stable",
        "summary": "Validate a revision using shell commands."
      },
      "fqn": "@aws-cdk/pipelines.ShellScriptAction",
      "initializer": {
        "docs": {
          "stability": "stable"
        },
        "locationInModule": {
          "filename": "lib/legacy/validation/shell-script-action.ts",
          "line": 132
        },
        "parameters": [
          {
            "name": "props",
            "type": {
              "fqn": "@aws-cdk/pipelines.ShellScriptActionProps"
            }
          }
        ]
      },
      "interfaces": [
        "@aws-cdk/aws-codepipeline.IAction",
        "@aws-cdk/aws-iam.IGrantable"
      ],
      "kind": "class",
      "locationInModule": {
        "filename": "lib/legacy/validation/shell-script-action.ts",
        "line": 126
      },
      "methods": [
        {
          "docs": {
            "stability": "stable",
            "summary": "Exists to implement IAction."
          },
          "locationInModule": {
            "filename": "lib/legacy/validation/shell-script-action.ts",
            "line": 173
          },
          "name": "bind",
          "overrides": "@aws-cdk/aws-codepipeline.IAction",
          "parameters": [
            {
              "name": "scope",
              "type": {
                "fqn": "@aws-cdk/core.Construct"
              }
            },
            {
              "name": "stage",
              "type": {
                "fqn": "@aws-cdk/aws-codepipeline.IStage"
              }
            },
            {
              "name": "options",
              "type": {
                "fqn": "@aws-cdk/aws-codepipeline.ActionBindOptions"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-codepipeline.ActionConfig"
            }
          }
        },
        {
          "docs": {
            "stability": "stable",
            "summary": "Exists to implement IAction."
          },
          "locationInModule": {
            "filename": "lib/legacy/validation/shell-script-action.ts",
            "line": 245
          },
          "name": "onStateChange",
          "overrides": "@aws-cdk/aws-codepipeline.IAction",
          "parameters": [
            {
              "name": "name",
              "type": {
                "primitive": "string"
              }
            },
            {
              "name": "target",
              "optional": true,
              "type": {
                "fqn": "@aws-cdk/aws-events.IRuleTarget"
              }
            },
            {
              "name": "options",
              "optional": true,
              "type": {
                "fqn": "@aws-cdk/aws-events.RuleProps"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-events.Rule"
            }
          }
        }
      ],
      "name": "ShellScriptAction",
      "properties": [
        {
          "docs": {
            "stability": "stable",
            "summary": "Exists to implement IAction."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/legacy/validation/shell-script-action.ts",
            "line": 166
          },
          "name": "actionProperties",
          "overrides": "@aws-cdk/aws-codepipeline.IAction",
          "type": {
            "fqn": "@aws-cdk/aws-codepipeline.ActionProperties"
          }
        },
        {
          "docs": {
            "stability": "stable",
            "summary": "The CodeBuild Project's principal."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/legacy/validation/shell-script-action.ts",
            "line": 159
          },
          "name": "grantPrincipal",
          "overrides": "@aws-cdk/aws-iam.IGrantable",
          "type": {
            "fqn": "@aws-cdk/aws-iam.IPrincipal"
          }
        },
        {
          "docs": {
            "stability": "stable",
            "summary": "Project generated to run the shell script in."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/legacy/validation/shell-script-action.ts",
            "line": 235
          },
          "name": "project",
          "type": {
            "fqn": "@aws-cdk/aws-codebuild.IProject"
          }
        }
      ]
    },
    "@aws-cdk/pipelines.ShellScriptActionProps": {
      "assembly": "@aws-cdk/pipelines",
      "datatype": true,
      "docs": {
        "stability": "stable",
        "summary": "Properties for ShellScriptAction."
      },
      "fqn": "@aws-cdk/pipelines.ShellScriptActionProps",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/legacy/validation/shell-script-action.ts",
        "line": 17
      },
      "name": "ShellScriptActionProps",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "stability": "stable",
            "summary": "Name of the validation action in the pipeline."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/legacy/validation/shell-script-action.ts",
            "line": 21
          },
          "name": "actionName",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "stable",
            "summary": "Commands to run."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/legacy/validation/shell-script-action.ts",
            "line": 33
          },
          "name": "commands",
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "string"
              },
              "kind": "array"
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- No additional artifacts",
            "remarks": "You can use these files to load more complex test sets into the\nshellscript build environment.\n\nThe files artifact given here will be unpacked into the current\nworking directory, the other ones will be unpacked into directories\nwhich are available through the environment variables\n$CODEBUILD_SRC_DIR_<artifactName>.\n\nThe CodeBuild job must have at least one input artifact, so you\nmust provide either at least one additional artifact here or one\nstack output using `useOutput`.",
            "stability": "stable",
            "summary": "Additional artifacts to use as input for the CodeBuild project."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/legacy/validation/shell-script-action.ts",
            "line": 59
          },
          "name": "additionalArtifacts",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "fqn": "@aws-cdk/aws-codepipeline.Artifact"
              },
              "kind": "array"
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "'-eu' (errexit and nounset)",
            "stability": "stable",
            "summary": "Bash options to set at the start of the script."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/legacy/validation/shell-script-action.ts",
            "line": 40
          },
          "name": "bashOptions",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "LinuxBuildImage.STANDARD_5_0",
            "stability": "stable",
            "summary": "The CodeBuild environment where scripts are executed."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/legacy/validation/shell-script-action.ts",
            "line": 66
          },
          "name": "environment",
          "optional": true,
          "type": {
            "fqn": "@aws-cdk/aws-codebuild.BuildEnvironment"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- No additional environment variables",
            "stability": "stable",
            "summary": "Environment variables to send into build."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/legacy/validation/shell-script-action.ts",
            "line": 73
          },
          "name": "environmentVariables",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "fqn": "@aws-cdk/aws-codebuild.BuildEnvironmentVariable"
              },
              "kind": "map"
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- No policy statements",
            "stability": "stable",
            "summary": "Additional policy statements to add to the execution role."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/legacy/validation/shell-script-action.ts",
            "line": 93
          },
          "name": "rolePolicyStatements",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "fqn": "@aws-cdk/aws-iam.PolicyStatement"
              },
              "kind": "array"
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "100",
            "remarks": "Use this to sequence the shell script after the deployments.\n\nThe default value is 100 so you don't have to supply the value if you just\nwant to run this after the application stacks have been deployed, and you\ndon't have more than 100 stacks.",
            "stability": "stable",
            "summary": "RunOrder for this action."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/legacy/validation/shell-script-action.ts",
            "line": 86
          },
          "name": "runOrder",
          "optional": true,
          "type": {
            "primitive": "number"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- Security group will be automatically created.",
            "remarks": "If no security group is identified, one will be created automatically.\n\nOnly used if 'vpc' is supplied.",
            "stability": "stable",
            "summary": "Which security group to associate with the script's project network interfaces."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/legacy/validation/shell-script-action.ts",
            "line": 120
          },
          "name": "securityGroups",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "fqn": "@aws-cdk/aws-ec2.ISecurityGroup"
              },
              "kind": "array"
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- All private subnets.",
            "remarks": "Only used if 'vpc' is supplied.",
            "stability": "stable",
            "summary": "Which subnets to use."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/legacy/validation/shell-script-action.ts",
            "line": 109
          },
          "name": "subnetSelection",
          "optional": true,
          "type": {
            "fqn": "@aws-cdk/aws-ec2.SubnetSelection"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- No outputs used",
            "stability": "stable",
            "summary": "Stack outputs to make available as environment variables."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/legacy/validation/shell-script-action.ts",
            "line": 28
          },
          "name": "useOutputs",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "fqn": "@aws-cdk/pipelines.StackOutput"
              },
              "kind": "map"
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- No VPC",
            "stability": "stable",
            "summary": "The VPC where to execute the specified script."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/legacy/validation/shell-script-action.ts",
            "line": 100
          },
          "name": "vpc",
          "optional": true,
          "type": {
            "fqn": "@aws-cdk/aws-ec2.IVpc"
          }
        }
      ]
    },
    "@aws-cdk/pipelines.ShellStep": {
      "assembly": "@aws-cdk/pipelines",
      "base": "@aws-cdk/pipelines.Step",
      "docs": {
        "stability": "stable",
        "summary": "Run shell script commands in the pipeline."
      },
      "fqn": "@aws-cdk/pipelines.ShellStep",
      "initializer": {
        "docs": {
          "stability": "stable"
        },
        "locationInModule": {
          "filename": "lib/blueprint/shell-step.ts",
          "line": 146
        },
        "parameters": [
          {
            "name": "id",
            "type": {
              "primitive": "string"
            }
          },
          {
            "name": "props",
            "type": {
              "fqn": "@aws-cdk/pipelines.ShellStepProps"
            }
          }
        ]
      },
      "kind": "class",
      "locationInModule": {
        "filename": "lib/blueprint/shell-step.ts",
        "line": 96
      },
      "methods": [
        {
          "docs": {
            "remarks": "After running the script, the contents of the given directory\nwill be exported as a `FileSet`. Use the `FileSet` as the\ninput to another step.\n\nMultiple calls with the exact same directory name string (not normalized)\nwill return the same FileSet.",
            "stability": "stable",
            "summary": "Add an additional output FileSet based on a directory."
          },
          "locationInModule": {
            "filename": "lib/blueprint/shell-step.ts",
            "line": 222
          },
          "name": "addOutputDirectory",
          "parameters": [
            {
              "name": "directory",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/pipelines.FileSet"
            }
          }
        },
        {
          "docs": {
            "remarks": "If no primary output has been configured yet, this directory\nwill become the primary output of this ShellStep, otherwise this\nmethod will throw if the given directory is different than the\ncurrently configured primary output directory.",
            "stability": "stable",
            "summary": "Configure the given output directory as primary output."
          },
          "locationInModule": {
            "filename": "lib/blueprint/shell-step.ts",
            "line": 195
          },
          "name": "primaryOutputDirectory",
          "parameters": [
            {
              "name": "directory",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/pipelines.FileSet"
            }
          }
        }
      ],
      "name": "ShellStep",
      "properties": [
        {
          "docs": {
            "stability": "stable",
            "summary": "Commands to run."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/blueprint/shell-step.ts",
            "line": 100
          },
          "name": "commands",
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "string"
              },
              "kind": "array"
            }
          }
        },
        {
          "docs": {
            "default": "- No environment variables",
            "stability": "stable",
            "summary": "Environment variables to set."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/blueprint/shell-step.ts",
            "line": 117
          },
          "name": "env",
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "string"
              },
              "kind": "map"
            }
          }
        },
        {
          "docs": {
            "default": "- No environment variables created from stack outputs",
            "stability": "stable",
            "summary": "Set environment variables based on Stack Outputs."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/blueprint/shell-step.ts",
            "line": 124
          },
          "name": "envFromCfnOutputs",
          "type": {
            "collection": {
              "elementtype": {
                "fqn": "@aws-cdk/pipelines.StackOutputReference"
              },
              "kind": "map"
            }
          }
        },
        {
          "docs": {
            "remarks": "A list of `(FileSet, directory)` pairs, which are a copy of the\ninput properties. This list should not be modified directly.",
            "stability": "stable",
            "summary": "Input FileSets."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/blueprint/shell-step.ts",
            "line": 132
          },
          "name": "inputs",
          "type": {
            "collection": {
              "elementtype": {
                "fqn": "@aws-cdk/pipelines.FileSetLocation"
              },
              "kind": "array"
            }
          }
        },
        {
          "docs": {
            "default": "- No installation commands",
            "remarks": "For deployment engines that support it, install commands will be classified\ndifferently in the job history from the regular `commands`.",
            "stability": "stable",
            "summary": "Installation commands to run before the regular commands."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/blueprint/shell-step.ts",
            "line": 110
          },
          "name": "installCommands",
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "string"
              },
              "kind": "array"
            }
          }
        },
        {
          "docs": {
            "remarks": "A list of `(FileSet, directory)` pairs, which are a copy of the\ninput properties. This list should not be modified directly.",
            "stability": "stable",
            "summary": "Output FileSets."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/blueprint/shell-step.ts",
            "line": 140
          },
          "name": "outputs",
          "type": {
            "collection": {
              "elementtype": {
                "fqn": "@aws-cdk/pipelines.FileSetLocation"
              },
              "kind": "array"
            }
          }
        }
      ]
    },
    "@aws-cdk/pipelines.ShellStepProps": {
      "assembly": "@aws-cdk/pipelines",
      "datatype": true,
      "docs": {
        "stability": "stable",
        "summary": "Construction properties for a `ShellStep`."
      },
      "fqn": "@aws-cdk/pipelines.ShellStepProps",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/blueprint/shell-step.ts",
        "line": 10
      },
      "name": "ShellStepProps",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "stability": "stable",
            "summary": "Commands to run."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/blueprint/shell-step.ts",
            "line": 14
          },
          "name": "commands",
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "string"
              },
              "kind": "array"
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- No additional inputs",
            "remarks": "Specifies a mapping from directory name to FileSets. During the\nscript execution, the FileSets will be available in the directories\nindicated.\n\nThe directory names may be relative. For example, you can put\nthe main input and an additional input side-by-side with the\nfollowing configuration:\n\n```ts\nconst script = new ShellStep('MainScript', {\n   // ...\n   input: MyEngineSource.gitHub('org/source1'),\n   additionalInputs: {\n     '../siblingdir': MyEngineSource.gitHub('org/source2'),\n   }\n});\n```",
            "stability": "stable",
            "summary": "Additional FileSets to put in other directories."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/blueprint/shell-step.ts",
            "line": 79
          },
          "name": "additionalInputs",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "fqn": "@aws-cdk/pipelines.IFileSetProducer"
              },
              "kind": "map"
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- No environment variables",
            "stability": "stable",
            "summary": "Environment variables to set."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/blueprint/shell-step.ts",
            "line": 31
          },
          "name": "env",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "string"
              },
              "kind": "map"
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- No environment variables created from stack outputs",
            "remarks": "`ShellStep`s following stack or stage deployments may\naccess the `CfnOutput`s of those stacks to get access to\n--for example--automatically generated resource names or\nendpoint URLs.",
            "stability": "stable",
            "summary": "Set environment variables based on Stack Outputs."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/blueprint/shell-step.ts",
            "line": 43
          },
          "name": "envFromCfnOutputs",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "fqn": "@aws-cdk/core.CfnOutput"
              },
              "kind": "map"
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- No input specified",
            "remarks": "The files in the FileSet will be placed in the working directory when\nthe script is executed. Use `additionalInputs` to download file sets\nto other directories as well.",
            "stability": "stable",
            "summary": "FileSet to run these scripts on."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/blueprint/shell-step.ts",
            "line": 54
          },
          "name": "input",
          "optional": true,
          "type": {
            "fqn": "@aws-cdk/pipelines.IFileSetProducer"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- No installation commands",
            "remarks": "For deployment engines that support it, install commands will be classified\ndifferently in the job history from the regular `commands`.",
            "stability": "stable",
            "summary": "Installation commands to run before the regular commands."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/blueprint/shell-step.ts",
            "line": 24
          },
          "name": "installCommands",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "string"
              },
              "kind": "array"
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- No primary output",
            "remarks": "After running the script, the contents of the given directory\nwill be treated as the primary output of this Step.",
            "stability": "stable",
            "summary": "The directory that will contain the primary output fileset."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/blueprint/shell-step.ts",
            "line": 89
          },
          "name": "primaryOutputDirectory",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        }
      ]
    },
    "@aws-cdk/pipelines.SimpleSynthAction": {
      "assembly": "@aws-cdk/pipelines",
      "docs": {
        "stability": "stable",
        "summary": "A standard synth with a generated buildspec."
      },
      "fqn": "@aws-cdk/pipelines.SimpleSynthAction",
      "initializer": {
        "docs": {
          "stability": "stable"
        },
        "locationInModule": {
          "filename": "lib/legacy/synths/simple-synth-action.ts",
          "line": 272
        },
        "parameters": [
          {
            "name": "props",
            "type": {
              "fqn": "@aws-cdk/pipelines.SimpleSynthActionProps"
            }
          }
        ]
      },
      "interfaces": [
        "@aws-cdk/aws-codepipeline.IAction",
        "@aws-cdk/aws-iam.IGrantable"
      ],
      "kind": "class",
      "locationInModule": {
        "filename": "lib/legacy/synths/simple-synth-action.ts",
        "line": 211
      },
      "methods": [
        {
          "docs": {
            "remarks": "Uses `npm ci` to install dependencies and `npx cdk synth` to synthesize.\n\nIf you need a build step, add `buildCommand: 'npm run build'`.",
            "stability": "stable",
            "summary": "Create a standard NPM synth action."
          },
          "locationInModule": {
            "filename": "lib/legacy/synths/simple-synth-action.ts",
            "line": 220
          },
          "name": "standardNpmSynth",
          "parameters": [
            {
              "name": "options",
              "type": {
                "fqn": "@aws-cdk/pipelines.StandardNpmSynthOptions"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/pipelines.SimpleSynthAction"
            }
          },
          "static": true
        },
        {
          "docs": {
            "remarks": "Uses `yarn install --frozen-lockfile` to install dependencies and `npx cdk synth` to synthesize.\n\nIf you need a build step, add `buildCommand: 'yarn build'`.",
            "stability": "stable",
            "summary": "Create a standard Yarn synth action."
          },
          "locationInModule": {
            "filename": "lib/legacy/synths/simple-synth-action.ts",
            "line": 247
          },
          "name": "standardYarnSynth",
          "parameters": [
            {
              "name": "options",
              "type": {
                "fqn": "@aws-cdk/pipelines.StandardYarnSynthOptions"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/pipelines.SimpleSynthAction"
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "stable",
            "summary": "Exists to implement IAction."
          },
          "locationInModule": {
            "filename": "lib/legacy/synths/simple-synth-action.ts",
            "line": 332
          },
          "name": "bind",
          "overrides": "@aws-cdk/aws-codepipeline.IAction",
          "parameters": [
            {
              "name": "scope",
              "type": {
                "fqn": "@aws-cdk/core.Construct"
              }
            },
            {
              "name": "stage",
              "type": {
                "fqn": "@aws-cdk/aws-codepipeline.IStage"
              }
            },
            {
              "name": "options",
              "type": {
                "fqn": "@aws-cdk/aws-codepipeline.ActionBindOptions"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-codepipeline.ActionConfig"
            }
          }
        },
        {
          "docs": {
            "stability": "stable",
            "summary": "Exists to implement IAction."
          },
          "locationInModule": {
            "filename": "lib/legacy/synths/simple-synth-action.ts",
            "line": 461
          },
          "name": "onStateChange",
          "overrides": "@aws-cdk/aws-codepipeline.IAction",
          "parameters": [
            {
              "name": "name",
              "type": {
                "primitive": "string"
              }
            },
            {
              "name": "target",
              "optional": true,
              "type": {
                "fqn": "@aws-cdk/aws-events.IRuleTarget"
              }
            },
            {
              "name": "options",
              "optional": true,
              "type": {
                "fqn": "@aws-cdk/aws-events.RuleProps"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-events.Rule"
            }
          }
        }
      ],
      "name": "SimpleSynthAction",
      "properties": [
        {
          "docs": {
            "stability": "stable",
            "summary": "Exists to implement IAction."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/legacy/synths/simple-synth-action.ts",
            "line": 315
          },
          "name": "actionProperties",
          "overrides": "@aws-cdk/aws-codepipeline.IAction",
          "type": {
            "fqn": "@aws-cdk/aws-codepipeline.ActionProperties"
          }
        },
        {
          "docs": {
            "stability": "stable",
            "summary": "The CodeBuild Project's principal."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/legacy/synths/simple-synth-action.ts",
            "line": 454
          },
          "name": "grantPrincipal",
          "overrides": "@aws-cdk/aws-iam.IGrantable",
          "type": {
            "fqn": "@aws-cdk/aws-iam.IPrincipal"
          }
        },
        {
          "docs": {
            "stability": "stable",
            "summary": "Project generated to run the synth command."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/legacy/synths/simple-synth-action.ts",
            "line": 322
          },
          "name": "project",
          "type": {
            "fqn": "@aws-cdk/aws-codebuild.IProject"
          }
        }
      ]
    },
    "@aws-cdk/pipelines.SimpleSynthActionProps": {
      "assembly": "@aws-cdk/pipelines",
      "datatype": true,
      "docs": {
        "stability": "stable",
        "summary": "Construction props for SimpleSynthAction."
      },
      "fqn": "@aws-cdk/pipelines.SimpleSynthActionProps",
      "interfaces": [
        "@aws-cdk/pipelines.SimpleSynthOptions"
      ],
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/legacy/synths/simple-synth-action.ts",
        "line": 132
      },
      "name": "SimpleSynthActionProps",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "stability": "stable",
            "summary": "The synth command."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/legacy/synths/simple-synth-action.ts",
            "line": 136
          },
          "name": "synthCommand",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- No build required",
            "deprecated": "Use `buildCommands` instead",
            "remarks": "If your programming language requires a compilation step, put the\ncompilation command here.",
            "stability": "deprecated",
            "summary": "The build command."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/legacy/synths/simple-synth-action.ts",
            "line": 159
          },
          "name": "buildCommand",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- No build required",
            "remarks": "If your programming language requires a compilation step, put the\ncompilation command here.",
            "stability": "stable",
            "summary": "The build commands."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/legacy/synths/simple-synth-action.ts",
            "line": 180
          },
          "name": "buildCommands",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "string"
              },
              "kind": "array"
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- No install required",
            "deprecated": "Use `installCommands` instead",
            "remarks": "If not provided by the build image or another dependency\nmanagement tool, at least install the CDK CLI here using\n`npm install -g aws-cdk`.",
            "stability": "deprecated",
            "summary": "The install command."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/legacy/synths/simple-synth-action.ts",
            "line": 148
          },
          "name": "installCommand",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- No install required",
            "remarks": "If not provided by the build image or another dependency\nmanagement tool, at least install the CDK CLI here using\n`npm install -g aws-cdk`.",
            "stability": "stable",
            "summary": "Install commands."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/legacy/synths/simple-synth-action.ts",
            "line": 170
          },
          "name": "installCommands",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "string"
              },
              "kind": "array"
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- No test commands",
            "remarks": "These commands are run after the build commands but before the\nsynth command.",
            "stability": "stable",
            "summary": "Test commands."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/legacy/synths/simple-synth-action.ts",
            "line": 190
          },
          "name": "testCommands",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "string"
              },
              "kind": "array"
            }
          }
        }
      ]
    },
    "@aws-cdk/pipelines.SimpleSynthOptions": {
      "assembly": "@aws-cdk/pipelines",
      "datatype": true,
      "docs": {
        "stability": "stable",
        "summary": "Configuration options for a SimpleSynth."
      },
      "fqn": "@aws-cdk/pipelines.SimpleSynthOptions",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/legacy/synths/simple-synth-action.ts",
        "line": 23
      },
      "name": "SimpleSynthOptions",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "stability": "stable",
            "summary": "The artifact where the CloudAssembly should be emitted."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/legacy/synths/simple-synth-action.ts",
            "line": 32
          },
          "name": "cloudAssemblyArtifact",
          "type": {
            "fqn": "@aws-cdk/aws-codepipeline.Artifact"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "stable",
            "summary": "The source artifact of the CodePipeline."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/legacy/synths/simple-synth-action.ts",
            "line": 27
          },
          "name": "sourceArtifact",
          "type": {
            "fqn": "@aws-cdk/aws-codepipeline.Artifact"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "'Synth'",
            "stability": "stable",
            "summary": "Name of the build action."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/legacy/synths/simple-synth-action.ts",
            "line": 60
          },
          "name": "actionName",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- No additional artifacts generated",
            "remarks": "Can be used to produce additional artifacts during the build step,\nseparate from the cloud assembly, which can be used further on in the\npipeline.\n\nDirectories are evaluated with respect to `subdirectory`.",
            "stability": "stable",
            "summary": "Produce additional output artifacts after the build based on the given directories."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/legacy/synths/simple-synth-action.ts",
            "line": 94
          },
          "name": "additionalArtifacts",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "fqn": "@aws-cdk/pipelines.AdditionalArtifact"
              },
              "kind": "array"
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- none",
            "stability": "stable",
            "summary": "custom BuildSpec that is merged with the generated one."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/legacy/synths/simple-synth-action.ts",
            "line": 126
          },
          "name": "buildSpec",
          "optional": true,
          "type": {
            "fqn": "@aws-cdk/aws-codebuild.BuildSpec"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- No environment variables copied",
            "remarks": "These are environment variables that are being used by the build.",
            "stability": "stable",
            "summary": "Environment variables to copy over from parent env."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/legacy/synths/simple-synth-action.ts",
            "line": 53
          },
          "name": "copyEnvironmentVariables",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "string"
              },
              "kind": "array"
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "BuildEnvironment.LinuxBuildImage.STANDARD_5_0",
            "stability": "stable",
            "summary": "Build environment to use for CodeBuild job."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/legacy/synths/simple-synth-action.ts",
            "line": 74
          },
          "name": "environment",
          "optional": true,
          "type": {
            "fqn": "@aws-cdk/aws-codebuild.BuildEnvironment"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- No additional environment variables",
            "remarks": "NOTE: You may run into the 1000-character limit for the Action configuration if you have a large\nnumber of variables or if their names or values are very long.\nIf you do, pass them to the underlying CodeBuild project directly in `environment` instead.\nHowever, you will not be able to use CodePipeline Variables in this case.",
            "stability": "stable",
            "summary": "Environment variables to send into build."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/legacy/synths/simple-synth-action.ts",
            "line": 44
          },
          "name": "environmentVariables",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "fqn": "@aws-cdk/aws-codebuild.BuildEnvironmentVariable"
              },
              "kind": "map"
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- Automatically generated",
            "stability": "stable",
            "summary": "Name of the CodeBuild project."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/legacy/synths/simple-synth-action.ts",
            "line": 67
          },
          "name": "projectName",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- No policy statements added to CodeBuild Project Role",
            "remarks": "Can be used to add acces to a CodeArtifact repository etc.",
            "stability": "stable",
            "summary": "Policy statements to add to role used during the synth."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/legacy/synths/simple-synth-action.ts",
            "line": 103
          },
          "name": "rolePolicyStatements",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "fqn": "@aws-cdk/aws-iam.PolicyStatement"
              },
              "kind": "array"
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- Repository root",
            "stability": "stable",
            "summary": "Directory inside the source where package.json and cdk.json are located."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/legacy/synths/simple-synth-action.ts",
            "line": 81
          },
          "name": "subdirectory",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- All private subnets.",
            "remarks": "Only used if 'vpc' is supplied.",
            "stability": "stable",
            "summary": "Which subnets to use."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/legacy/synths/simple-synth-action.ts",
            "line": 119
          },
          "name": "subnetSelection",
          "optional": true,
          "type": {
            "fqn": "@aws-cdk/aws-ec2.SubnetSelection"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- No VPC",
            "stability": "stable",
            "summary": "The VPC where to execute the SimpleSynth."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/legacy/synths/simple-synth-action.ts",
            "line": 110
          },
          "name": "vpc",
          "optional": true,
          "type": {
            "fqn": "@aws-cdk/aws-ec2.IVpc"
          }
        }
      ]
    },
    "@aws-cdk/pipelines.StackAsset": {
      "assembly": "@aws-cdk/pipelines",
      "datatype": true,
      "docs": {
        "stability": "stable",
        "summary": "An asset used by a Stack."
      },
      "fqn": "@aws-cdk/pipelines.StackAsset",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/blueprint/stack-deployment.ts",
        "line": 228
      },
      "name": "StackAsset",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "stability": "stable",
            "summary": "Asset identifier."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/blueprint/stack-deployment.ts",
            "line": 240
          },
          "name": "assetId",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "remarks": "This needs to be made relative at a later point in time, but when this\ninformation is parsed we don't know about the root cloud assembly yet.",
            "stability": "stable",
            "summary": "Absolute asset manifest path."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/blueprint/stack-deployment.ts",
            "line": 235
          },
          "name": "assetManifestPath",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "stable",
            "summary": "Asset selector to pass to `cdk-assets`."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/blueprint/stack-deployment.ts",
            "line": 245
          },
          "name": "assetSelector",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "stable",
            "summary": "Type of asset to publish."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/blueprint/stack-deployment.ts",
            "line": 250
          },
          "name": "assetType",
          "type": {
            "fqn": "@aws-cdk/pipelines.AssetType"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "false",
            "stability": "stable",
            "summary": "Does this asset represent the CloudFormation template for the stack."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/blueprint/stack-deployment.ts",
            "line": 264
          },
          "name": "isTemplate",
          "type": {
            "primitive": "boolean"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- No need to assume any role",
            "stability": "stable",
            "summary": "Role ARN to assume to publish."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/blueprint/stack-deployment.ts",
            "line": 257
          },
          "name": "assetPublishingRoleArn",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        }
      ]
    },
    "@aws-cdk/pipelines.StackDeployment": {
      "assembly": "@aws-cdk/pipelines",
      "docs": {
        "remarks": "You don't need to instantiate this class -- it will\nbe automatically instantiated as necessary when you\nadd a `Stage` to a pipeline.",
        "stability": "stable",
        "summary": "Deployment of a single Stack."
      },
      "fqn": "@aws-cdk/pipelines.StackDeployment",
      "kind": "class",
      "locationInModule": {
        "filename": "lib/blueprint/stack-deployment.ts",
        "line": 90
      },
      "methods": [
        {
          "docs": {
            "stability": "stable",
            "summary": "Build a `StackDeployment` from a Stack Artifact in a Cloud Assembly."
          },
          "locationInModule": {
            "filename": "lib/blueprint/stack-deployment.ts",
            "line": 94
          },
          "name": "fromArtifact",
          "parameters": [
            {
              "name": "stackArtifact",
              "type": {
                "fqn": "@aws-cdk/cx-api.CloudFormationStackArtifact"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/pipelines.StackDeployment"
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "stable",
            "summary": "Add a dependency on another stack."
          },
          "locationInModule": {
            "filename": "lib/blueprint/stack-deployment.ts",
            "line": 220
          },
          "name": "addStackDependency",
          "parameters": [
            {
              "name": "stackDeployment",
              "type": {
                "fqn": "@aws-cdk/pipelines.StackDeployment"
              }
            }
          ]
        }
      ],
      "name": "StackDeployment",
      "properties": [
        {
          "docs": {
            "stability": "stable",
            "summary": "Template path on disk to CloudAssembly."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/blueprint/stack-deployment.ts",
            "line": 192
          },
          "name": "absoluteTemplatePath",
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "stability": "stable",
            "summary": "Assets referenced by this stack."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/blueprint/stack-deployment.ts",
            "line": 166
          },
          "name": "assets",
          "type": {
            "collection": {
              "elementtype": {
                "fqn": "@aws-cdk/pipelines.StackAsset"
              },
              "kind": "array"
            }
          }
        },
        {
          "docs": {
            "stability": "stable",
            "summary": "Construct path for this stack."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/blueprint/stack-deployment.ts",
            "line": 123
          },
          "name": "constructPath",
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "stability": "stable",
            "summary": "Artifact ID for this stack."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/blueprint/stack-deployment.ts",
            "line": 118
          },
          "name": "stackArtifactId",
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "stability": "stable",
            "summary": "Other stacks this stack depends on."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/blueprint/stack-deployment.ts",
            "line": 171
          },
          "name": "stackDependencies",
          "type": {
            "collection": {
              "elementtype": {
                "fqn": "@aws-cdk/pipelines.StackDeployment"
              },
              "kind": "array"
            }
          }
        },
        {
          "docs": {
            "stability": "stable",
            "summary": "Name for this stack."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/blueprint/stack-deployment.ts",
            "line": 128
          },
          "name": "stackName",
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "stability": "stable",
            "summary": "Tags to apply to the stack."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/blueprint/stack-deployment.ts",
            "line": 161
          },
          "name": "tags",
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "string"
              },
              "kind": "map"
            }
          }
        },
        {
          "docs": {
            "default": "- Pipeline account",
            "stability": "stable",
            "summary": "Account where the stack should be deployed."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/blueprint/stack-deployment.ts",
            "line": 142
          },
          "name": "account",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "default": "- Don't assume any role",
            "stability": "stable",
            "summary": "Role to assume before deploying this stack."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/blueprint/stack-deployment.ts",
            "line": 149
          },
          "name": "assumeRoleArn",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "default": "- No execution role",
            "stability": "stable",
            "summary": "Execution role to pass to CloudFormation."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/blueprint/stack-deployment.ts",
            "line": 156
          },
          "name": "executionRoleArn",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "default": "- Pipeline region",
            "stability": "stable",
            "summary": "Region where the stack should be deployed."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/blueprint/stack-deployment.ts",
            "line": 135
          },
          "name": "region",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "stability": "stable",
            "summary": "The asset that represents the CloudFormation template for this stack."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/blueprint/stack-deployment.ts",
            "line": 176
          },
          "name": "templateAsset",
          "optional": true,
          "type": {
            "fqn": "@aws-cdk/pipelines.StackAsset"
          }
        },
        {
          "docs": {
            "example": "https://bucket.s3.amazonaws.com/object/key",
            "remarks": "This is `undefined` if the stack template is not published. Use the\n`DefaultStackSynthesizer` to ensure it is.",
            "stability": "stable",
            "summary": "The S3 URL which points to the template asset location in the publishing bucket."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/blueprint/stack-deployment.ts",
            "line": 187
          },
          "name": "templateUrl",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        }
      ]
    },
    "@aws-cdk/pipelines.StackDeploymentProps": {
      "assembly": "@aws-cdk/pipelines",
      "datatype": true,
      "docs": {
        "stability": "stable",
        "summary": "Properties for a `StackDeployment`."
      },
      "fqn": "@aws-cdk/pipelines.StackDeploymentProps",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/blueprint/stack-deployment.ts",
        "line": 11
      },
      "name": "StackDeploymentProps",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "stability": "stable",
            "summary": "Template path on disk to cloud assembly (cdk.out)."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/blueprint/stack-deployment.ts",
            "line": 65
          },
          "name": "absoluteTemplatePath",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "stable",
            "summary": "Construct path for this stack."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/blueprint/stack-deployment.ts",
            "line": 20
          },
          "name": "constructPath",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "stable",
            "summary": "Artifact ID for this stack."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/blueprint/stack-deployment.ts",
            "line": 15
          },
          "name": "stackArtifactId",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "stable",
            "summary": "Name for this stack."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/blueprint/stack-deployment.ts",
            "line": 25
          },
          "name": "stackName",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- Pipeline account",
            "stability": "stable",
            "summary": "Account where the stack should be deployed."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/blueprint/stack-deployment.ts",
            "line": 39
          },
          "name": "account",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- No assets",
            "stability": "stable",
            "summary": "Assets referenced by this stack."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/blueprint/stack-deployment.ts",
            "line": 72
          },
          "name": "assets",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "fqn": "@aws-cdk/pipelines.StackAsset"
              },
              "kind": "array"
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- Don't assume any role",
            "stability": "stable",
            "summary": "Role to assume before deploying this stack."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/blueprint/stack-deployment.ts",
            "line": 46
          },
          "name": "assumeRoleArn",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- No execution role",
            "stability": "stable",
            "summary": "Execution role to pass to CloudFormation."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/blueprint/stack-deployment.ts",
            "line": 53
          },
          "name": "executionRoleArn",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- Pipeline region",
            "stability": "stable",
            "summary": "Region where the stack should be deployed."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/blueprint/stack-deployment.ts",
            "line": 32
          },
          "name": "region",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- No tags",
            "stability": "stable",
            "summary": "Tags to apply to the stack."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/blueprint/stack-deployment.ts",
            "line": 60
          },
          "name": "tags",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "string"
              },
              "kind": "map"
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- Stack template is not published",
            "stability": "stable",
            "summary": "The S3 URL which points to the template asset location in the publishing bucket."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/blueprint/stack-deployment.ts",
            "line": 80
          },
          "name": "templateS3Uri",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        }
      ]
    },
    "@aws-cdk/pipelines.StackOutput": {
      "assembly": "@aws-cdk/pipelines",
      "docs": {
        "stability": "stable",
        "summary": "A single output of a Stack."
      },
      "fqn": "@aws-cdk/pipelines.StackOutput",
      "initializer": {
        "docs": {
          "stability": "stable",
          "summary": "Build a StackOutput from a known artifact and an output name."
        },
        "locationInModule": {
          "filename": "lib/legacy/stage.ts",
          "line": 433
        },
        "parameters": [
          {
            "name": "artifactFile",
            "type": {
              "fqn": "@aws-cdk/aws-codepipeline.ArtifactPath"
            }
          },
          {
            "name": "outputName",
            "type": {
              "primitive": "string"
            }
          }
        ]
      },
      "kind": "class",
      "locationInModule": {
        "filename": "lib/legacy/stage.ts",
        "line": 419
      },
      "name": "StackOutput",
      "properties": [
        {
          "docs": {
            "stability": "stable",
            "summary": "The artifact and file the output is stored in."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/legacy/stage.ts",
            "line": 423
          },
          "name": "artifactFile",
          "type": {
            "fqn": "@aws-cdk/aws-codepipeline.ArtifactPath"
          }
        },
        {
          "docs": {
            "stability": "stable",
            "summary": "The name of the output in the JSON object in the file."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/legacy/stage.ts",
            "line": 428
          },
          "name": "outputName",
          "type": {
            "primitive": "string"
          }
        }
      ]
    },
    "@aws-cdk/pipelines.StackOutputReference": {
      "assembly": "@aws-cdk/pipelines",
      "docs": {
        "stability": "stable",
        "summary": "A Reference to a Stack Output."
      },
      "fqn": "@aws-cdk/pipelines.StackOutputReference",
      "kind": "class",
      "locationInModule": {
        "filename": "lib/blueprint/shell-step.ts",
        "line": 251
      },
      "methods": [
        {
          "docs": {
            "stability": "stable",
            "summary": "Create a StackOutputReference that references the given CfnOutput."
          },
          "locationInModule": {
            "filename": "lib/blueprint/shell-step.ts",
            "line": 255
          },
          "name": "fromCfnOutput",
          "parameters": [
            {
              "name": "output",
              "type": {
                "fqn": "@aws-cdk/core.CfnOutput"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/pipelines.StackOutputReference"
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "stable",
            "summary": "Whether or not this stack output is being produced by the given Stack deployment."
          },
          "locationInModule": {
            "filename": "lib/blueprint/shell-step.ts",
            "line": 272
          },
          "name": "isProducedBy",
          "parameters": [
            {
              "name": "stack",
              "type": {
                "fqn": "@aws-cdk/pipelines.StackDeployment"
              }
            }
          ],
          "returns": {
            "type": {
              "primitive": "boolean"
            }
          }
        }
      ],
      "name": "StackOutputReference",
      "properties": [
        {
          "docs": {
            "stability": "stable",
            "summary": "Output name of the producing stack."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/blueprint/shell-step.ts",
            "line": 266
          },
          "name": "outputName",
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "stability": "stable",
            "summary": "A human-readable description of the producing stack."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/blueprint/shell-step.ts",
            "line": 262
          },
          "name": "stackDescription",
          "type": {
            "primitive": "string"
          }
        }
      ]
    },
    "@aws-cdk/pipelines.StageDeployment": {
      "assembly": "@aws-cdk/pipelines",
      "docs": {
        "remarks": "A `Stage` consists of one or more `Stacks`, which will be\ndeployed in dependency order.",
        "stability": "stable",
        "summary": "Deployment of a single `Stage`."
      },
      "fqn": "@aws-cdk/pipelines.StageDeployment",
      "kind": "class",
      "locationInModule": {
        "filename": "lib/blueprint/stage-deployment.ts",
        "line": 40
      },
      "methods": [
        {
          "docs": {
            "remarks": "Synthesizes the target stage, and deployes the stacks found inside\nin dependency order.",
            "stability": "stable",
            "summary": "Create a new `StageDeployment` from a `Stage`."
          },
          "locationInModule": {
            "filename": "lib/blueprint/stage-deployment.ts",
            "line": 47
          },
          "name": "fromStage",
          "parameters": [
            {
              "name": "stage",
              "type": {
                "fqn": "@aws-cdk/core.Stage"
              }
            },
            {
              "name": "props",
              "optional": true,
              "type": {
                "fqn": "@aws-cdk/pipelines.StageDeploymentProps"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/pipelines.StageDeployment"
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "stable",
            "summary": "Add an additional step to run after all of the stacks in this stage."
          },
          "locationInModule": {
            "filename": "lib/blueprint/stage-deployment.ts",
            "line": 116
          },
          "name": "addPost",
          "parameters": [
            {
              "name": "steps",
              "type": {
                "fqn": "@aws-cdk/pipelines.Step"
              },
              "variadic": true
            }
          ],
          "variadic": true
        },
        {
          "docs": {
            "stability": "stable",
            "summary": "Add an additional step to run before any of the stacks in this stage."
          },
          "locationInModule": {
            "filename": "lib/blueprint/stage-deployment.ts",
            "line": 109
          },
          "name": "addPre",
          "parameters": [
            {
              "name": "steps",
              "type": {
                "fqn": "@aws-cdk/pipelines.Step"
              },
              "variadic": true
            }
          ],
          "variadic": true
        }
      ],
      "name": "StageDeployment",
      "properties": [
        {
          "docs": {
            "stability": "stable",
            "summary": "Additional steps that are run after all of the stacks in the stage."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/blueprint/stage-deployment.ts",
            "line": 96
          },
          "name": "post",
          "type": {
            "collection": {
              "elementtype": {
                "fqn": "@aws-cdk/pipelines.Step"
              },
              "kind": "array"
            }
          }
        },
        {
          "docs": {
            "stability": "stable",
            "summary": "Additional steps that are run before any of the stacks in the stage."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/blueprint/stage-deployment.ts",
            "line": 91
          },
          "name": "pre",
          "type": {
            "collection": {
              "elementtype": {
                "fqn": "@aws-cdk/pipelines.Step"
              },
              "kind": "array"
            }
          }
        },
        {
          "docs": {
            "stability": "stable",
            "summary": "The stacks deployed in this stage."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/blueprint/stage-deployment.ts",
            "line": 100
          },
          "name": "stacks",
          "type": {
            "collection": {
              "elementtype": {
                "fqn": "@aws-cdk/pipelines.StackDeployment"
              },
              "kind": "array"
            }
          }
        },
        {
          "docs": {
            "stability": "stable",
            "summary": "The display name of this stage."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/blueprint/stage-deployment.ts",
            "line": 86
          },
          "name": "stageName",
          "type": {
            "primitive": "string"
          }
        }
      ]
    },
    "@aws-cdk/pipelines.StageDeploymentProps": {
      "assembly": "@aws-cdk/pipelines",
      "datatype": true,
      "docs": {
        "stability": "stable",
        "summary": "Properties for a `StageDeployment`."
      },
      "fqn": "@aws-cdk/pipelines.StageDeploymentProps",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/blueprint/stage-deployment.ts",
        "line": 11
      },
      "name": "StageDeploymentProps",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "default": "- No additional steps",
            "stability": "stable",
            "summary": "Additional steps to run after all of the stacks in the stage."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/blueprint/stage-deployment.ts",
            "line": 31
          },
          "name": "post",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "fqn": "@aws-cdk/pipelines.Step"
              },
              "kind": "array"
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- No additional steps",
            "stability": "stable",
            "summary": "Additional steps to run before any of the stacks in the stage."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/blueprint/stage-deployment.ts",
            "line": 24
          },
          "name": "pre",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "fqn": "@aws-cdk/pipelines.Step"
              },
              "kind": "array"
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- Use Stage's construct ID",
            "stability": "stable",
            "summary": "Stage name to use in the pipeline."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/blueprint/stage-deployment.ts",
            "line": 17
          },
          "name": "stageName",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        }
      ]
    },
    "@aws-cdk/pipelines.StandardNpmSynthOptions": {
      "assembly": "@aws-cdk/pipelines",
      "datatype": true,
      "docs": {
        "stability": "stable",
        "summary": "Options for a convention-based synth using NPM."
      },
      "fqn": "@aws-cdk/pipelines.StandardNpmSynthOptions",
      "interfaces": [
        "@aws-cdk/pipelines.SimpleSynthOptions"
      ],
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/legacy/synths/simple-synth-action.ts",
        "line": 483
      },
      "name": "StandardNpmSynthOptions",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "default": "- No build required",
            "remarks": "By default, we assume NPM projects are either written in JavaScript or are\nusing `ts-node`, so don't need a build command.\n\nOtherwise, put the build command here, for example `npm run build`.",
            "stability": "stable",
            "summary": "The build command."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/legacy/synths/simple-synth-action.ts",
            "line": 501
          },
          "name": "buildCommand",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "'npm ci'",
            "stability": "stable",
            "summary": "The install command."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/legacy/synths/simple-synth-action.ts",
            "line": 489
          },
          "name": "installCommand",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "'npx cdk synth'",
            "stability": "stable",
            "summary": "The synth command."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/legacy/synths/simple-synth-action.ts",
            "line": 508
          },
          "name": "synthCommand",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- No test commands",
            "remarks": "These commands are run after the build commands but before the\nsynth command.",
            "stability": "stable",
            "summary": "Test commands."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/legacy/synths/simple-synth-action.ts",
            "line": 518
          },
          "name": "testCommands",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "string"
              },
              "kind": "array"
            }
          }
        }
      ]
    },
    "@aws-cdk/pipelines.StandardYarnSynthOptions": {
      "assembly": "@aws-cdk/pipelines",
      "datatype": true,
      "docs": {
        "stability": "stable",
        "summary": "Options for a convention-based synth using Yarn."
      },
      "fqn": "@aws-cdk/pipelines.StandardYarnSynthOptions",
      "interfaces": [
        "@aws-cdk/pipelines.SimpleSynthOptions"
      ],
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/legacy/synths/simple-synth-action.ts",
        "line": 524
      },
      "name": "StandardYarnSynthOptions",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "default": "- No build required",
            "remarks": "By default, we assume NPM projects are either written in JavaScript or are\nusing `ts-node`, so don't need a build command.\n\nOtherwise, put the build command here, for example `npm run build`.",
            "stability": "stable",
            "summary": "The build command."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/legacy/synths/simple-synth-action.ts",
            "line": 542
          },
          "name": "buildCommand",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "'yarn install --frozen-lockfile'",
            "stability": "stable",
            "summary": "The install command."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/legacy/synths/simple-synth-action.ts",
            "line": 530
          },
          "name": "installCommand",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "'npx cdk synth'",
            "stability": "stable",
            "summary": "The synth command."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/legacy/synths/simple-synth-action.ts",
            "line": 549
          },
          "name": "synthCommand",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- No test commands",
            "remarks": "These commands are run after the build commands but before the\nsynth command.",
            "stability": "stable",
            "summary": "Test commands."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/legacy/synths/simple-synth-action.ts",
            "line": 559
          },
          "name": "testCommands",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "string"
              },
              "kind": "array"
            }
          }
        }
      ]
    },
    "@aws-cdk/pipelines.Step": {
      "abstract": true,
      "assembly": "@aws-cdk/pipelines",
      "docs": {
        "remarks": "Steps can be used to add Sources, Build Actions and Validations\nto your pipeline.\n\nThis class is abstract. See specific subclasses of Step for\nuseful steps to add to your Pipeline",
        "stability": "stable",
        "summary": "A generic Step which can be added to a Pipeline."
      },
      "fqn": "@aws-cdk/pipelines.Step",
      "initializer": {
        "docs": {
          "stability": "stable"
        },
        "locationInModule": {
          "filename": "lib/blueprint/step.ts",
          "line": 28
        },
        "parameters": [
          {
            "docs": {
              "summary": "Identifier for this step."
            },
            "name": "id",
            "type": {
              "primitive": "string"
            }
          }
        ]
      },
      "interfaces": [
        "@aws-cdk/pipelines.IFileSetProducer"
      ],
      "kind": "class",
      "locationInModule": {
        "filename": "lib/blueprint/step.ts",
        "line": 13
      },
      "methods": [
        {
          "docs": {
            "remarks": "This will lead to a dependency on the producer of that file set.",
            "stability": "stable",
            "summary": "Add an additional FileSet to the set of file sets required by this step."
          },
          "locationInModule": {
            "filename": "lib/blueprint/step.ts",
            "line": 67
          },
          "name": "addDependencyFileSet",
          "parameters": [
            {
              "name": "fs",
              "type": {
                "fqn": "@aws-cdk/pipelines.FileSet"
              }
            }
          ],
          "protected": true
        },
        {
          "docs": {
            "stability": "stable",
            "summary": "Configure the given FileSet as the primary output of this step."
          },
          "locationInModule": {
            "filename": "lib/blueprint/step.ts",
            "line": 74
          },
          "name": "configurePrimaryOutput",
          "parameters": [
            {
              "name": "fs",
              "type": {
                "fqn": "@aws-cdk/pipelines.FileSet"
              }
            }
          ],
          "protected": true
        },
        {
          "docs": {
            "stability": "stable",
            "summary": "Return a string representation of this Step."
          },
          "locationInModule": {
            "filename": "lib/blueprint/step.ts",
            "line": 47
          },
          "name": "toString",
          "returns": {
            "type": {
              "primitive": "string"
            }
          }
        }
      ],
      "name": "Step",
      "properties": [
        {
          "docs": {
            "stability": "stable",
            "summary": "Return the steps this step depends on, based on the FileSets it requires."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/blueprint/step.ts",
            "line": 40
          },
          "name": "dependencies",
          "type": {
            "collection": {
              "elementtype": {
                "fqn": "@aws-cdk/pipelines.Step"
              },
              "kind": "array"
            }
          }
        },
        {
          "docs": {
            "stability": "stable",
            "summary": "The list of FileSets consumed by this Step."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/blueprint/step.ts",
            "line": 17
          },
          "name": "dependencyFileSets",
          "type": {
            "collection": {
              "elementtype": {
                "fqn": "@aws-cdk/pipelines.FileSet"
              },
              "kind": "array"
            }
          }
        },
        {
          "docs": {
            "stability": "stable",
            "summary": "Identifier for this step."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/blueprint/step.ts",
            "line": 30
          },
          "name": "id",
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "remarks": "What it means to be a Source step depends on the engine.",
            "stability": "stable",
            "summary": "Whether or not this is a Source step."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/blueprint/step.ts",
            "line": 24
          },
          "name": "isSource",
          "type": {
            "primitive": "boolean"
          }
        },
        {
          "docs": {
            "remarks": "Not all steps produce an output FileSet--if they do\nyou can substitute the `Step` object for the `FileSet` object.",
            "stability": "stable",
            "summary": "The primary FileSet produced by this Step."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/blueprint/step.ts",
            "line": 57
          },
          "name": "primaryOutput",
          "optional": true,
          "overrides": "@aws-cdk/pipelines.IFileSetProducer",
          "type": {
            "fqn": "@aws-cdk/pipelines.FileSet"
          }
        }
      ]
    },
    "@aws-cdk/pipelines.UpdatePipelineAction": {
      "assembly": "@aws-cdk/pipelines",
      "base": "@aws-cdk/core.Construct",
      "docs": {
        "remarks": "Creates a CodeBuild project which will use the CDK CLI\nto deploy the pipeline stack.\n\nYou do not need to instantiate this action -- it will automatically\nbe added by the pipeline.",
        "stability": "stable",
        "summary": "Action to self-mutate the pipeline."
      },
      "fqn": "@aws-cdk/pipelines.UpdatePipelineAction",
      "initializer": {
        "docs": {
          "stability": "stable"
        },
        "locationInModule": {
          "filename": "lib/legacy/actions/update-pipeline-action.ts",
          "line": 86
        },
        "parameters": [
          {
            "name": "scope",
            "type": {
              "fqn": "constructs.Construct"
            }
          },
          {
            "name": "id",
            "type": {
              "primitive": "string"
            }
          },
          {
            "name": "props",
            "type": {
              "fqn": "@aws-cdk/pipelines.UpdatePipelineActionProps"
            }
          }
        ]
      },
      "interfaces": [
        "@aws-cdk/aws-codepipeline.IAction"
      ],
      "kind": "class",
      "locationInModule": {
        "filename": "lib/legacy/actions/update-pipeline-action.ts",
        "line": 83
      },
      "methods": [
        {
          "docs": {
            "stability": "stable",
            "summary": "Exists to implement IAction."
          },
          "locationInModule": {
            "filename": "lib/legacy/actions/update-pipeline-action.ts",
            "line": 153
          },
          "name": "bind",
          "overrides": "@aws-cdk/aws-codepipeline.IAction",
          "parameters": [
            {
              "name": "scope",
              "type": {
                "fqn": "@aws-cdk/core.Construct"
              }
            },
            {
              "name": "stage",
              "type": {
                "fqn": "@aws-cdk/aws-codepipeline.IStage"
              }
            },
            {
              "name": "options",
              "type": {
                "fqn": "@aws-cdk/aws-codepipeline.ActionBindOptions"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-codepipeline.ActionConfig"
            }
          }
        },
        {
          "docs": {
            "stability": "stable",
            "summary": "Exists to implement IAction."
          },
          "locationInModule": {
            "filename": "lib/legacy/actions/update-pipeline-action.ts",
            "line": 160
          },
          "name": "onStateChange",
          "overrides": "@aws-cdk/aws-codepipeline.IAction",
          "parameters": [
            {
              "name": "name",
              "type": {
                "primitive": "string"
              }
            },
            {
              "name": "target",
              "optional": true,
              "type": {
                "fqn": "@aws-cdk/aws-events.IRuleTarget"
              }
            },
            {
              "name": "options",
              "optional": true,
              "type": {
                "fqn": "@aws-cdk/aws-events.RuleProps"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-events.Rule"
            }
          }
        }
      ],
      "name": "UpdatePipelineAction",
      "properties": [
        {
          "docs": {
            "stability": "stable",
            "summary": "Exists to implement IAction."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/legacy/actions/update-pipeline-action.ts",
            "line": 167
          },
          "name": "actionProperties",
          "overrides": "@aws-cdk/aws-codepipeline.IAction",
          "type": {
            "fqn": "@aws-cdk/aws-codepipeline.ActionProperties"
          }
        }
      ]
    },
    "@aws-cdk/pipelines.UpdatePipelineActionProps": {
      "assembly": "@aws-cdk/pipelines",
      "datatype": true,
      "docs": {
        "stability": "stable",
        "summary": "Props for the UpdatePipelineAction."
      },
      "fqn": "@aws-cdk/pipelines.UpdatePipelineActionProps",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/legacy/actions/update-pipeline-action.ts",
        "line": 18
      },
      "name": "UpdatePipelineActionProps",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "stability": "stable",
            "summary": "The CodePipeline artifact that holds the Cloud Assembly."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/legacy/actions/update-pipeline-action.ts",
            "line": 22
          },
          "name": "cloudAssemblyInput",
          "type": {
            "fqn": "@aws-cdk/aws-codepipeline.Artifact"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "stable",
            "summary": "Hierarchical id of the pipeline stack."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/legacy/actions/update-pipeline-action.ts",
            "line": 35
          },
          "name": "pipelineStackHierarchicalId",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- none",
            "stability": "stable",
            "summary": "Custom BuildSpec that is merged with generated one."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/legacy/actions/update-pipeline-action.ts",
            "line": 71
          },
          "name": "buildSpec",
          "optional": true,
          "type": {
            "fqn": "@aws-cdk/aws-codebuild.BuildSpec"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- Latest version",
            "stability": "stable",
            "summary": "Version of CDK CLI to 'npm install'."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/legacy/actions/update-pipeline-action.ts",
            "line": 42
          },
          "name": "cdkCliVersion",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "[]",
            "stability": "stable",
            "summary": "Docker registries and associated credentials necessary during the pipeline self-update stage."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/legacy/actions/update-pipeline-action.ts",
            "line": 64
          },
          "name": "dockerCredentials",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "fqn": "@aws-cdk/pipelines.DockerCredential"
              },
              "kind": "array"
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- none",
            "deprecated": "- Use `pipelineStackHierarchicalId` instead.",
            "stability": "deprecated",
            "summary": "Name of the pipeline stack."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/legacy/actions/update-pipeline-action.ts",
            "line": 30
          },
          "name": "pipelineStackName",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- false",
            "stability": "stable",
            "summary": "Whether the build step should run in privileged mode."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/legacy/actions/update-pipeline-action.ts",
            "line": 56
          },
          "name": "privileged",
          "optional": true,
          "type": {
            "primitive": "boolean"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- Automatically generated",
            "stability": "stable",
            "summary": "Name of the CodeBuild project."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/legacy/actions/update-pipeline-action.ts",
            "line": 49
          },
          "name": "projectName",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        }
      ]
    },
    "@aws-cdk/pipelines.Wave": {
      "assembly": "@aws-cdk/pipelines",
      "docs": {
        "stability": "stable",
        "summary": "Multiple stages that are deployed in parallel."
      },
      "fqn": "@aws-cdk/pipelines.Wave",
      "initializer": {
        "docs": {
          "stability": "stable"
        },
        "locationInModule": {
          "filename": "lib/blueprint/wave.ts",
          "line": 43
        },
        "parameters": [
          {
            "docs": {
              "summary": "Identifier for this Wave."
            },
            "name": "id",
            "type": {
              "primitive": "string"
            }
          },
          {
            "name": "props",
            "optional": true,
            "type": {
              "fqn": "@aws-cdk/pipelines.WaveProps"
            }
          }
        ]
      },
      "kind": "class",
      "locationInModule": {
        "filename": "lib/blueprint/wave.ts",
        "line": 27
      },
      "methods": [
        {
          "docs": {
            "stability": "stable",
            "summary": "Add an additional step to run after all of the stages in this wave."
          },
          "locationInModule": {
            "filename": "lib/blueprint/wave.ts",
            "line": 72
          },
          "name": "addPost",
          "parameters": [
            {
              "name": "steps",
              "type": {
                "fqn": "@aws-cdk/pipelines.Step"
              },
              "variadic": true
            }
          ],
          "variadic": true
        },
        {
          "docs": {
            "stability": "stable",
            "summary": "Add an additional step to run before any of the stages in this wave."
          },
          "locationInModule": {
            "filename": "lib/blueprint/wave.ts",
            "line": 65
          },
          "name": "addPre",
          "parameters": [
            {
              "name": "steps",
              "type": {
                "fqn": "@aws-cdk/pipelines.Step"
              },
              "variadic": true
            }
          ],
          "variadic": true
        },
        {
          "docs": {
            "remarks": "It will be deployed in parallel with all other stages in this\nwave.",
            "stability": "stable",
            "summary": "Add a Stage to this wave."
          },
          "locationInModule": {
            "filename": "lib/blueprint/wave.ts",
            "line": 56
          },
          "name": "addStage",
          "parameters": [
            {
              "name": "stage",
              "type": {
                "fqn": "@aws-cdk/core.Stage"
              }
            },
            {
              "name": "options",
              "optional": true,
              "type": {
                "fqn": "@aws-cdk/pipelines.AddStageOpts"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/pipelines.StageDeployment"
            }
          }
        }
      ],
      "name": "Wave",
      "properties": [
        {
          "docs": {
            "stability": "stable",
            "summary": "Identifier for this Wave."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/blueprint/wave.ts",
            "line": 45
          },
          "name": "id",
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "stability": "stable",
            "summary": "Additional steps that are run after all of the stages in the wave."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/blueprint/wave.ts",
            "line": 36
          },
          "name": "post",
          "type": {
            "collection": {
              "elementtype": {
                "fqn": "@aws-cdk/pipelines.Step"
              },
              "kind": "array"
            }
          }
        },
        {
          "docs": {
            "stability": "stable",
            "summary": "Additional steps that are run before any of the stages in the wave."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/blueprint/wave.ts",
            "line": 31
          },
          "name": "pre",
          "type": {
            "collection": {
              "elementtype": {
                "fqn": "@aws-cdk/pipelines.Step"
              },
              "kind": "array"
            }
          }
        },
        {
          "docs": {
            "stability": "stable",
            "summary": "The stages that are deployed in this wave."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/blueprint/wave.ts",
            "line": 41
          },
          "name": "stages",
          "type": {
            "collection": {
              "elementtype": {
                "fqn": "@aws-cdk/pipelines.StageDeployment"
              },
              "kind": "array"
            }
          }
        }
      ]
    },
    "@aws-cdk/pipelines.WaveOptions": {
      "assembly": "@aws-cdk/pipelines",
      "datatype": true,
      "docs": {
        "stability": "stable",
        "summary": "Options to pass to `addWave`."
      },
      "fqn": "@aws-cdk/pipelines.WaveOptions",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/blueprint/wave.ts",
        "line": 99
      },
      "name": "WaveOptions",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "default": "- No additional steps",
            "stability": "stable",
            "summary": "Additional steps to run after all of the stages in the wave."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/blueprint/wave.ts",
            "line": 112
          },
          "name": "post",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "fqn": "@aws-cdk/pipelines.Step"
              },
              "kind": "array"
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- No additional steps",
            "stability": "stable",
            "summary": "Additional steps to run before any of the stages in the wave."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/blueprint/wave.ts",
            "line": 105
          },
          "name": "pre",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "fqn": "@aws-cdk/pipelines.Step"
              },
              "kind": "array"
            }
          }
        }
      ]
    },
    "@aws-cdk/pipelines.WaveProps": {
      "assembly": "@aws-cdk/pipelines",
      "datatype": true,
      "docs": {
        "stability": "stable",
        "summary": "Construction properties for a `Wave`."
      },
      "fqn": "@aws-cdk/pipelines.WaveProps",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/blueprint/wave.ts",
        "line": 8
      },
      "name": "WaveProps",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "default": "- No additional steps",
            "stability": "stable",
            "summary": "Additional steps to run after all of the stages in the wave."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/blueprint/wave.ts",
            "line": 21
          },
          "name": "post",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "fqn": "@aws-cdk/pipelines.Step"
              },
              "kind": "array"
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- No additional steps",
            "stability": "stable",
            "summary": "Additional steps to run before any of the stages in the wave."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/blueprint/wave.ts",
            "line": 14
          },
          "name": "pre",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "fqn": "@aws-cdk/pipelines.Step"
              },
              "kind": "array"
            }
          }
        }
      ]
    }
  },
  "version": "1.121.0",
  "fingerprint": "8RJh9lsOtB69Pkk2a9jQamFaSJIj3NIvFgfZcXwxPHU="
}

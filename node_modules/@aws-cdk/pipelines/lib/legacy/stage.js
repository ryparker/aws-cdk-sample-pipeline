"use strict";
var _a, _b;
Object.defineProperty(exports, "__esModule", { value: true });
exports.StackOutput = exports.CdkStage = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const codebuild = require("@aws-cdk/aws-codebuild");
const cpactions = require("@aws-cdk/aws-codepipeline-actions");
const aws_codepipeline_actions_1 = require("@aws-cdk/aws-codepipeline-actions");
const core_1 = require("@aws-cdk/core");
const constructs_1 = require("constructs");
const asset_type_1 = require("../blueprint/asset-type");
const application_security_check_1 = require("../private/application-security-check");
const asset_manifest_1 = require("../private/asset-manifest");
const construct_internals_1 = require("../private/construct-internals");
const toposort_1 = require("../private/toposort");
const actions_1 = require("./actions");
const pipeline_1 = require("./pipeline");
// v2 - keep this import as a separate section to reduce merge conflict when forward merging with the v2 branch.
// eslint-disable-next-line
const core_2 = require("@aws-cdk/core");
/**
 * Stage in a CdkPipeline.
 *
 * You don't need to instantiate this class directly. Use
 * `cdkPipeline.addStage()` instead.
 *
 * @stability stable
 */
class CdkStage extends core_2.Construct {
    /**
     * @stability stable
     */
    constructor(scope, id, props) {
        var _c;
        super(scope, id);
        this._nextSequentialRunOrder = 1; // Must start at 1 eh
        this._manualApprovalCounter = 1;
        this.stacksToDeploy = new Array();
        this._prepared = false;
        if (scope instanceof pipeline_1.CdkPipeline) {
            this.pipeline = scope;
        }
        this.stageName = props.stageName;
        this.pipelineStage = props.pipelineStage;
        this.cloudAssemblyArtifact = props.cloudAssemblyArtifact;
        this.host = props.host;
        this.confirmBroadeningPermissions = (_c = props.confirmBroadeningPermissions) !== null && _c !== void 0 ? _c : false;
        this.securityNotificationTopic = props.securityNotificationTopic;
        core_1.Aspects.of(this).add({ visit: () => this.prepareStage() });
    }
    /**
     * Add all stacks in the application Stage to this stage.
     *
     * The application construct should subclass `Stage` and can contain any
     * number of `Stacks` inside it that may have dependency relationships
     * on one another.
     *
     * All stacks in the application will be deployed in the appropriate order,
     * and all assets found in the application will be added to the asset
     * publishing stage.
     *
     * @stability stable
     */
    addApplication(appStage, options = {}) {
        var _c, _d;
        const asm = construct_internals_1.pipelineSynth(appStage);
        const extraRunOrderSpace = (_c = options.extraRunOrderSpace) !== null && _c !== void 0 ? _c : 0;
        if ((_d = options.confirmBroadeningPermissions) !== null && _d !== void 0 ? _d : this.confirmBroadeningPermissions) {
            this.addSecurityCheck(appStage, options);
        }
        if (asm.stacks.length === 0) {
            // If we don't check here, a more puzzling "stage contains no actions"
            // error will be thrown come deployment time.
            throw new Error(`The given Stage construct ('${appStage.node.path}') should contain at least one Stack`);
        }
        const sortedTranches = toposort_1.topologicalSort(asm.stacks, stack => stack.id, stack => stack.dependencies.map(d => d.id));
        for (const stacks of sortedTranches) {
            const runOrder = this.nextSequentialRunOrder(extraRunOrderSpace + 2); // 2 actions for Prepare/Execute ChangeSet
            let executeRunOrder = runOrder + extraRunOrderSpace + 1;
            // If we need to insert a manual approval action, then what's the executeRunOrder
            // now is where we add a manual approval step, and we allocate 1 more runOrder
            // for the execute.
            if (options.manualApprovals) {
                this.addManualApprovalAction({ runOrder: runOrder + 1 });
                executeRunOrder = this.nextSequentialRunOrder();
            }
            // These don't have a dependency on each other, so can all be added in parallel
            for (const stack of stacks) {
                this.addStackArtifactDeployment(stack, { runOrder, executeRunOrder });
            }
        }
    }
    /**
     * Get a cached version of an ApplicationSecurityCheck, which consists of:
     *  - CodeBuild Project to check for security changes in a stage
     *  - Lambda Function that approves the manual approval if no security changes are detected
     *
     * The ApplicationSecurityCheck is cached from the pipeline **if** this stage is scoped
     * to a CDK Pipeline. If this stage **is not** scoped to a pipeline, create an ApplicationSecurityCheck
     * scoped to the stage itself.
     *
     * @internal
     */
    getApplicationSecurityCheck() {
        if (this._applicationSecurityCheck) {
            return this._applicationSecurityCheck;
        }
        this._applicationSecurityCheck = this.pipeline
            ? this.pipeline._getApplicationSecurityCheck()
            : new application_security_check_1.ApplicationSecurityCheck(this, 'StageApplicationSecurityCheck', {
                codePipeline: this.pipelineStage.pipeline,
            });
        return this._applicationSecurityCheck;
    }
    /**
     * Add a deployment action based on a stack artifact.
     *
     * @stability stable
     */
    addStackArtifactDeployment(stackArtifact, options = {}) {
        var _c, _d;
        // Get all assets manifests and add the assets in 'em to the asset publishing stage.
        this.publishAssetDependencies(stackArtifact);
        // Remember for later, see 'prepare()'
        // We know that deploying a stack is going to take up 2 runorder slots later on.
        const runOrder = (_c = options.runOrder) !== null && _c !== void 0 ? _c : this.nextSequentialRunOrder(2);
        const executeRunOrder = (_d = options.executeRunOrder) !== null && _d !== void 0 ? _d : runOrder + 1;
        this.stacksToDeploy.push({
            prepareRunOrder: runOrder,
            executeRunOrder,
            stackArtifact,
        });
        this.advanceRunOrderPast(runOrder);
        this.advanceRunOrderPast(executeRunOrder);
    }
    /**
     * Add a manual approval action.
     *
     * If you need more flexibility than what this method offers,
     * use `addAction` with a `ManualApprovalAction`.
     *
     * @stability stable
     */
    addManualApprovalAction(options = {}) {
        var _c;
        let actionName = options.actionName;
        if (!actionName) {
            actionName = `ManualApproval${this._manualApprovalCounter > 1 ? this._manualApprovalCounter : ''}`;
            this._manualApprovalCounter += 1;
        }
        this.addActions(new cpactions.ManualApprovalAction({
            actionName,
            runOrder: (_c = options.runOrder) !== null && _c !== void 0 ? _c : this.nextSequentialRunOrder(),
        }));
    }
    /**
     * Add one or more CodePipeline Actions.
     *
     * You need to make sure it is created with the right runOrder. Call `nextSequentialRunOrder()`
     * for every action to get actions to execute in sequence.
     *
     * @stability stable
     */
    addActions(...actions) {
        for (const action of actions) {
            this.pipelineStage.addAction(action);
        }
    }
    /**
     * Return the runOrder number necessary to run the next Action in sequence with the rest.
     *
     * FIXME: This is here because Actions are immutable and can't be reordered
     * after creation, nor is there a way to specify relative priorities, which
     * is a limitation that we should take away in the base library.
     *
     * @stability stable
     */
    nextSequentialRunOrder(count = 1) {
        const ret = this._nextSequentialRunOrder;
        this._nextSequentialRunOrder += count;
        return ret;
    }
    /**
     * Whether this Stage contains an action to deploy the given stack, identified by its artifact ID.
     *
     * @stability stable
     */
    deploysStack(artifactId) {
        return this.stacksToDeploy.map(s => s.stackArtifact.id).includes(artifactId);
    }
    /**
     * Actually add all the DeployStack actions to the stage.
     *
     * We do this late because before we can render the actual DeployActions,
     * we need to know whether or not we need to capture the stack outputs.
     *
     * FIXME: This is here because Actions are immutable and can't be reordered
     * after creation, nor is there a way to specify relative priorities, which
     * is a limitation that we should take away in the base library.
     */
    prepareStage() {
        // FIXME: Make sure this only gets run once. There seems to be an issue in the reconciliation
        // loop that may trigger this more than once if it throws an error somewhere, and the exception
        // that gets thrown here will then override the actual failure.
        if (this._prepared) {
            return;
        }
        this._prepared = true;
        for (const { prepareRunOrder, stackArtifact, executeRunOrder } of this.stacksToDeploy) {
            const artifact = this.host.stackOutputArtifact(stackArtifact.id);
            this.pipelineStage.addAction(actions_1.DeployCdkStackAction.fromStackArtifact(this, stackArtifact, {
                baseActionName: this.simplifyStackName(stackArtifact.stackName),
                cloudAssemblyInput: this.cloudAssemblyArtifact,
                output: artifact,
                outputFileName: artifact ? 'outputs.json' : undefined,
                prepareRunOrder,
                executeRunOrder,
            }));
        }
    }
    /**
     * Advance the runorder counter so that the next sequential number is higher than the given one
     */
    advanceRunOrderPast(lastUsed) {
        this._nextSequentialRunOrder = Math.max(lastUsed + 1, this._nextSequentialRunOrder);
    }
    /**
     * Simplify the stack name by removing the `Stage-` prefix if it exists.
     */
    simplifyStackName(s) {
        return stripPrefix(s, `${this.stageName}-`);
    }
    /**
     * Add a security check before the prepare/deploy actions of an CDK stage.
     * The security check consists of two actions:
     *  - CodeBuild Action to check for security changes in a stage
     *  - Manual Approval Action that is auto approved via a Lambda if no security changes detected
     */
    addSecurityCheck(appStage, options) {
        var _c;
        const { cdkDiffProject } = this.getApplicationSecurityCheck();
        const notificationTopic = (_c = options === null || options === void 0 ? void 0 : options.securityNotificationTopic) !== null && _c !== void 0 ? _c : this.securityNotificationTopic;
        notificationTopic === null || notificationTopic === void 0 ? void 0 : notificationTopic.grantPublish(cdkDiffProject);
        const appStageName = appStage.stageName;
        const approveActionName = `${appStageName}ManualApproval`;
        const diffAction = new aws_codepipeline_actions_1.CodeBuildAction({
            runOrder: this.nextSequentialRunOrder(),
            actionName: `${appStageName}SecurityCheck`,
            input: this.cloudAssemblyArtifact,
            project: cdkDiffProject,
            variablesNamespace: `${appStageName}SecurityCheck`,
            environmentVariables: {
                STAGE_PATH: {
                    value: constructs_1.Node.of(appStage).path,
                    type: codebuild.BuildEnvironmentVariableType.PLAINTEXT,
                },
                STAGE_NAME: {
                    value: this.stageName,
                    type: codebuild.BuildEnvironmentVariableType.PLAINTEXT,
                },
                ACTION_NAME: {
                    value: approveActionName,
                    type: codebuild.BuildEnvironmentVariableType.PLAINTEXT,
                },
                ...notificationTopic ? {
                    NOTIFICATION_ARN: {
                        value: notificationTopic.topicArn,
                        type: codebuild.BuildEnvironmentVariableType.PLAINTEXT,
                    },
                    NOTIFICATION_SUBJECT: {
                        value: `Confirm permission broadening in ${appStageName}`,
                        type: codebuild.BuildEnvironmentVariableType.PLAINTEXT,
                    },
                } : {},
            },
        });
        const approve = new cpactions.ManualApprovalAction({
            actionName: approveActionName,
            runOrder: this.nextSequentialRunOrder(),
            additionalInformation: `#{${appStageName}SecurityCheck.MESSAGE}`,
            externalEntityLink: `#{${appStageName}SecurityCheck.LINK}`,
        });
        this.addActions(diffAction, approve);
    }
    /**
     * Make sure all assets depended on by this stack are published in this pipeline
     *
     * Taking care to exclude the stack template itself -- it is being published
     * as an asset because the CLI needs to know the asset publishing role when
     * pushing the template to S3, but in the case of CodePipeline we always
     * reference the template from the artifact bucket.
     *
     * (NOTE: this is only true for top-level stacks, not nested stacks. Nested
     * Stack templates are always published as assets).
     */
    publishAssetDependencies(stackArtifact) {
        const assetManifests = stackArtifact.dependencies.filter(isAssetManifest);
        for (const manifestArtifact of assetManifests) {
            const manifest = asset_manifest_1.AssetManifestReader.fromFile(manifestArtifact.file);
            for (const entry of manifest.entries) {
                let assetType;
                if (entry instanceof asset_manifest_1.DockerImageManifestEntry) {
                    assetType = asset_type_1.AssetType.DOCKER_IMAGE;
                }
                else if (entry instanceof asset_manifest_1.FileManifestEntry) {
                    // Don't publish the template for this stack
                    if (entry.source.packaging === 'file' && entry.source.path === stackArtifact.templateFile) {
                        continue;
                    }
                    assetType = asset_type_1.AssetType.FILE;
                }
                else {
                    throw new Error(`Unrecognized asset type: ${entry.type}`);
                }
                if (!entry.destination.assumeRoleArn) {
                    throw new Error('assumeRoleArn is missing on asset and required');
                }
                this.host.publishAsset({
                    assetManifestPath: manifestArtifact.file,
                    assetId: entry.id.assetId,
                    assetSelector: entry.id.toString(),
                    assetType,
                    assetPublishingRoleArn: entry.destination.assumeRoleArn,
                });
            }
        }
    }
}
exports.CdkStage = CdkStage;
_a = JSII_RTTI_SYMBOL_1;
CdkStage[_a] = { fqn: "@aws-cdk/pipelines.CdkStage", version: "1.121.0" };
/**
 * A single output of a Stack.
 *
 * @stability stable
 */
class StackOutput {
    /**
     * Build a StackOutput from a known artifact and an output name.
     *
     * @stability stable
     */
    constructor(artifactFile, outputName) {
        this.artifactFile = artifactFile;
        this.outputName = outputName;
    }
}
exports.StackOutput = StackOutput;
_b = JSII_RTTI_SYMBOL_1;
StackOutput[_b] = { fqn: "@aws-cdk/pipelines.StackOutput", version: "1.121.0" };
function stripPrefix(s, prefix) {
    return s.startsWith(prefix) ? s.substr(prefix.length) : s;
}
function isAssetManifest(s) {
    // instanceof is too risky, and we're at a too late stage to properly fix.
    // return s instanceof cxapi.AssetManifestArtifact;
    return s.constructor.name === 'AssetManifestArtifact';
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3RhZ2UuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJzdGFnZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUFBLG9EQUFvRDtBQUVwRCwrREFBK0Q7QUFDL0QsZ0ZBQW9FO0FBRXBFLHdDQUErQztBQUUvQywyQ0FBNkM7QUFDN0Msd0RBQW9EO0FBQ3BELHNGQUFpRjtBQUNqRiw4REFBNkc7QUFDN0csd0VBQStEO0FBQy9ELGtEQUFzRDtBQUN0RCx1Q0FBaUQ7QUFDakQseUNBQXlDO0FBRXpDLGdIQUFnSDtBQUNoSCwyQkFBMkI7QUFDM0Isd0NBQTJEOzs7Ozs7Ozs7QUF5QjNELE1BQWEsUUFBUyxTQUFRLGdCQUFhOzs7O0lBY3pDLFlBQVksS0FBZ0IsRUFBRSxFQUFVLEVBQUUsS0FBb0I7O1FBQzVELEtBQUssQ0FBQyxLQUFLLEVBQUUsRUFBRSxDQUFDLENBQUM7UUFkWCw0QkFBdUIsR0FBRyxDQUFDLENBQUMsQ0FBQyxxQkFBcUI7UUFDbEQsMkJBQXNCLEdBQUcsQ0FBQyxDQUFDO1FBR2xCLG1CQUFjLEdBQUcsSUFBSSxLQUFLLEVBQXNCLENBQUM7UUFPMUQsY0FBUyxHQUFHLEtBQUssQ0FBQztRQUt4QixJQUFJLEtBQUssWUFBWSxzQkFBVyxFQUFFO1lBQ2hDLElBQUksQ0FBQyxRQUFRLEdBQUcsS0FBSyxDQUFDO1NBQ3ZCO1FBRUQsSUFBSSxDQUFDLFNBQVMsR0FBRyxLQUFLLENBQUMsU0FBUyxDQUFDO1FBQ2pDLElBQUksQ0FBQyxhQUFhLEdBQUcsS0FBSyxDQUFDLGFBQWEsQ0FBQztRQUN6QyxJQUFJLENBQUMscUJBQXFCLEdBQUcsS0FBSyxDQUFDLHFCQUFxQixDQUFDO1FBQ3pELElBQUksQ0FBQyxJQUFJLEdBQUcsS0FBSyxDQUFDLElBQUksQ0FBQztRQUN2QixJQUFJLENBQUMsNEJBQTRCLFNBQUcsS0FBSyxDQUFDLDRCQUE0QixtQ0FBSSxLQUFLLENBQUM7UUFDaEYsSUFBSSxDQUFDLHlCQUF5QixHQUFHLEtBQUssQ0FB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QVksR0FBRyxZQUFZLENBQUM7UUFDakMsSUFBSSxDQUFDLFVBQVUsR0FBRyxVQUFVLENBQUM7SUFDL0IsQ0FBQzs7QUFYSCxrQ0FZQzs7O0FBRUQsU0FBUyxXQUFXLENBQUMsQ0FBUyxFQUFFLE1BQWM7SUFDNUMsT0FBTyxDQUFDLENBQUMsVUFBVSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBQzVELENBQUM7QUFFRCxTQUFTLGVBQWUsQ0FBQyxDQUFzQjtJQUM3QywwRUFBMEU7SUFDMUUsbURBQW1EO0lBQ25ELE9BQU8sQ0FBQyxDQUFDLFdBQVcsQ0FBQyxJQUFJLEtBQUssdUJBQXVCLENBQUM7QUFDeEQsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIGNvZGVidWlsZCBmcm9tICdAYXdzLWNkay9hd3MtY29kZWJ1aWxkJztcbmltcG9ydCAqIGFzIGNvZGVwaXBlbGluZSBmcm9tICdAYXdzLWNkay9hd3MtY29kZXBpcGVsaW5lJztcbmltcG9ydCAqIGFzIGNwYWN0aW9ucyBmcm9tICdAYXdzLWNkay9hd3MtY29kZXBpcGVsaW5lLWFjdGlvbnMnO1xuaW1wb3J0IHsgQ29kZUJ1aWxkQWN0aW9uIH0gZnJvbSAnQGF3cy1jZGsvYXdzLWNvZGVwaXBlbGluZS1hY3Rpb25zJztcbmltcG9ydCAqIGFzIHNucyBmcm9tICdAYXdzLWNkay9hd3Mtc25zJztcbmltcG9ydCB7IFN0YWdlLCBBc3BlY3RzIH0gZnJvbSAnQGF3cy1jZGsvY29yZSc7XG5pbXBvcnQgKiBhcyBjeGFwaSBmcm9tICdAYXdzLWNkay9jeC1hcGknO1xuaW1wb3J0IHsgQ29uc3RydWN0LCBOb2RlIH0gZnJvbSAnY29uc3RydWN0cyc7XG5pbXBvcnQgeyBBc3NldFR5cGUgfSBmcm9tICcuLi9ibHVlcHJpbnQvYXNzZXQtdHlwZSc7XG5pbXBvcnQgeyBBcHBsaWNhdGlvblNlY3VyaXR5Q2hlY2sgfSBmcm9tICcuLi9wcml2YXRlL2FwcGxpY2F0aW9uLXNlY3VyaXR5LWNoZWNrJztcbmltcG9ydCB7IEFzc2V0TWFuaWZlc3RSZWFkZXIsIERvY2tlckltYWdlTWFuaWZlc3RFbnRyeSwgRmlsZU1hbmlmZXN0RW50cnkgfSBmcm9tICcuLi9wcml2YXRlL2Fzc2V0LW1hbmlmZXN0JztcbmltcG9ydCB7IHBpcGVsaW5lU3ludGggfSBmcm9tICcuLi9wcml2YXRlL2NvbnN0cnVjdC1pbnRlcm5hbHMnO1xuaW1wb3J0IHsgdG9wb2xvZ2ljYWxTb3J0IH0gZnJvbSAnLi4vcHJpdmF0ZS90b3Bvc29ydCc7XG5pbXBvcnQgeyBEZXBsb3lDZGtTdGFja0FjdGlvbiB9IGZyb20gJy4vYWN0aW9ucyc7XG5pbXBvcnQgeyBDZGtQaXBlbGluZSB9IGZyb20gJy4vcGlwZWxpbmUnO1xuXG4vLyB2MiAtIGtlZXAgdGhpcyBpbXBvcnQgYXMgYSBzZXBhcmF0ZSBzZWN0aW9uIHRvIHJlZHVjZSBtZXJnZSBjb25mbGljdCB3aGVuIGZvcndhcmQgbWVyZ2luZyB3aXRoIHRoZSB2MiBicmFuY2guXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmVcbmltcG9ydCB7IENvbnN0cnVjdCBhcyBDb3JlQ29uc3RydWN0IH0gZnJvbSAnQGF3cy1jZGsvY29yZSc7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcbmV4cG9ydCBpbnRlcmZhY2UgQ2RrU3RhZ2VQcm9wcyB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcbiAgcmVhZG9ubHkgc3RhZ2VOYW1lOiBzdHJpbmc7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxuICByZWFkb25seSBwaXBlbGluZVN0YWdlOiBjb2RlcGlwZWxpbmUuSVN0YWdlO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcbiAgcmVhZG9ubHkgY2xvdWRBc3NlbWJseUFydGlmYWN0OiBjb2RlcGlwZWxpbmUuQXJ0aWZhY3Q7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXG4gIHJlYWRvbmx5IGhvc3Q6IElTdGFnZUhvc3Q7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXG4gIHJlYWRvbmx5IGNvbmZpcm1Ccm9hZGVuaW5nUGVybWlzc2lvbnM/OiBib29sZWFuO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXG4gIHJlYWRvbmx5IHNlY3VyaXR5Tm90aWZpY2F0aW9uVG9waWM/OiBzbnMuSVRvcGljO1xufVxuXG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXG5leHBvcnQgY2xhc3MgQ2RrU3RhZ2UgZXh0ZW5kcyBDb3JlQ29uc3RydWN0IHtcbiAgcHJpdmF0ZSBfbmV4dFNlcXVlbnRpYWxSdW5PcmRlciA9IDE7IC8vIE11c3Qgc3RhcnQgYXQgMSBlaFxuICBwcml2YXRlIF9tYW51YWxBcHByb3ZhbENvdW50ZXIgPSAxO1xuICBwcml2YXRlIHJlYWRvbmx5IHBpcGVsaW5lU3RhZ2U6IGNvZGVwaXBlbGluZS5JU3RhZ2U7XG4gIHByaXZhdGUgcmVhZG9ubHkgY2xvdWRBc3NlbWJseUFydGlmYWN0OiBjb2RlcGlwZWxpbmUuQXJ0aWZhY3Q7XG4gIHByaXZhdGUgcmVhZG9ubHkgc3RhY2tzVG9EZXBsb3kgPSBuZXcgQXJyYXk8RGVwbG95U3RhY2tDb21tYW5kPigpO1xuICBwcml2YXRlIHJlYWRvbmx5IHN0YWdlTmFtZTogc3RyaW5nO1xuICBwcml2YXRlIHJlYWRvbmx5IGhvc3Q6IElTdGFnZUhvc3Q7XG4gIHByaXZhdGUgcmVhZG9ubHkgY29uZmlybUJyb2FkZW5pbmdQZXJtaXNzaW9uczogYm9vbGVhbjtcbiAgcHJpdmF0ZSByZWFkb25seSBwaXBlbGluZT86IENka1BpcGVsaW5lO1xuICBwcml2YXRlIHJlYWRvbmx5IHNlY3VyaXR5Tm90aWZpY2F0aW9uVG9waWM/OiBzbnMuSVRvcGljO1xuICBwcml2YXRlIF9hcHBsaWNhdGlvblNlY3VyaXR5Q2hlY2s/OiBBcHBsaWNhdGlvblNlY3VyaXR5Q2hlY2s7XG4gIHByaXZhdGUgX3ByZXBhcmVkID0gZmFsc2U7XG5cbiAgY29uc3RydWN0b3Ioc2NvcGU6IENvbnN0cnVjdCwgaWQ6IHN0cmluZywgcHJvcHM6IENka1N0YWdlUHJvcHMpIHtcbiAgICBzdXBlcihzY29wZSwgaWQpO1xuXG4gICAgaWYgKHNjb3BlIGluc3RhbmNlb2YgQ2RrUGlwZWxpbmUpIHtcbiAgICAgIHRoaXMucGlwZWxpbmUgPSBzY29wZTtcbiAgICB9XG5cbiAgICB0aGlzLnN0YWdlTmFtZSA9IHByb3BzLnN0YWdlTmFtZTtcbiAgICB0aGlzLnBpcGVsaW5lU3RhZ2UgPSBwcm9wcy5waXBlbGluZVN0YWdlO1xuICAgIHRoaXMuY2xvdWRBc3NlbWJseUFydGlmYWN0ID0gcHJvcHMuY2xvdWRBc3NlbWJseUFydGlmYWN0O1xuICAgIHRoaXMuaG9zdCA9IHByb3BzLmhvc3Q7XG4gICAgdGhpcy5jb25maXJtQnJvYWRlbmluZ1Blcm1pc3Npb25zID0gcHJvcHMuY29uZmlybUJyb2FkZW5pbmdQZXJtaXNzaW9ucyA/PyBmYWxzZTtcbiAgICB0aGlzLnNlY3VyaXR5Tm90aWZpY2F0aW9uVG9waWMgPSBwcm9wcy5zZWN1cml0eU5vdGlmaWNhdGlvblRvcGljO1xuXG4gICAgQXNwZWN0cy5vZih0aGlzKS5hZGQoeyB2aXNpdDogKCkgPT4gdGhpcy5wcmVwYXJlU3RhZ2UoKSB9KTtcbiAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxuICBwdWJsaWMgYWRkQXBwbGljYXRpb24oYXBwU3RhZ2U6IFN0YWdlLCBvcHRpb25zOiBBZGRTdGFnZU9wdGlvbnMgPSB7fSkge1xuICAgIGNvbnN0IGFzbSA9IHBpcGVsaW5lU3ludGgoYXBwU3RhZ2UpO1xuICAgIGNvbnN0IGV4dHJhUnVuT3JkZXJTcGFjZSA9IG9wdGlvbnMuZXh0cmFSdW5PcmRlclNwYWNlID8/IDA7XG5cbiAgICBpZiAob3B0aW9ucy5jb25maXJtQnJvYWRlbmluZ1Blcm1pc3Npb25zID8/IHRoaXMuY29uZmlybUJyb2FkZW5pbmdQZXJtaXNzaW9ucykge1xuICAgICAgdGhpcy5hZGRTZWN1cml0eUNoZWNrKGFwcFN0YWdlLCBvcHRpb25zKTtcbiAgICB9XG5cbiAgICBpZiAoYXNtLnN0YWNrcy5sZW5ndGggPT09IDApIHtcbiAgICAgIC8vIElmIHdlIGRvbid0IGNoZWNrIGhlcmUsIGEgbW9yZSBwdXp6bGluZyBcInN0YWdlIGNvbnRhaW5zIG5vIGFjdGlvbnNcIlxuICAgICAgLy8gZXJyb3Igd2lsbCBiZSB0aHJvd24gY29tZSBkZXBsb3ltZW50IHRpbWUuXG4gICAgICB0aHJvdyBuZXcgRXJyb3IoYFRoZSBnaXZlbiBTdGFnZSBjb25zdHJ1Y3QgKCcke2FwcFN0YWdlLm5vZGUucGF0aH0nKSBzaG91bGQgY29udGFpbiBhdCBsZWFzdCBvbmUgU3RhY2tgKTtcbiAgICB9XG5cbiAgICBjb25zdCBzb3J0ZWRUcmFuY2hlcyA9IHRvcG9sb2dpY2FsU29ydChhc20uc3RhY2tzLFxuICAgICAgc3RhY2sgPT4gc3RhY2suaWQsXG4gICAgICBzdGFjayA9PiBzdGFjay5kZXBlbmRlbmNpZXMubWFwKGQgPT4gZC5pZCkpO1xuXG4gICAgZm9yIChjb25zdCBzdGFja3Mgb2Ygc29ydGVkVHJhbmNoZXMpIHtcbiAgICAgIGNvbnN0IHJ1bk9yZGVyID0gdGhpcy5uZXh0U2VxdWVudGlhbFJ1bk9yZGVyKGV4dHJhUnVuT3JkZXJTcGFjZSArIDIpOyAvLyAyIGFjdGlvbnMgZm9yIFByZXBhcmUvRXhlY3V0ZSBDaGFuZ2VTZXRcbiAgICAgIGxldCBleGVjdXRlUnVuT3JkZXIgPSBydW5PcmRlciArIGV4dHJhUnVuT3JkZXJTcGFjZSArIDE7XG5cbiAgICAgIC8vIElmIHdlIG5lZWQgdG8gaW5zZXJ0IGEgbWFudWFsIGFwcHJvdmFsIGFjdGlvbiwgdGhlbiB3aGF0J3MgdGhlIGV4ZWN1dGVSdW5PcmRlclxuICAgICAgLy8gbm93IGlzIHdoZXJlIHdlIGFkZCBhIG1hbnVhbCBhcHByb3ZhbCBzdGVwLCBhbmQgd2UgYWxsb2NhdGUgMSBtb3JlIHJ1bk9yZGVyXG4gICAgICAvLyBmb3IgdGhlIGV4ZWN1dGUuXG4gICAgICBpZiAob3B0aW9ucy5tYW51YWxBcHByb3ZhbHMpIHtcbiAgICAgICAgdGhpcy5hZGRNYW51YWxBcHByb3ZhbEFjdGlvbih7IHJ1bk9yZGVyOiBydW5PcmRlciArIDEgfSk7XG4gICAgICAgIGV4ZWN1dGVSdW5PcmRlciA9IHRoaXMubmV4dFNlcXVlbnRpYWxSdW5PcmRlcigpO1xuICAgICAgfVxuXG4gICAgICAvLyBUaGVzZSBkb24ndCBoYXZlIGEgZGVwZW5kZW5jeSBvbiBlYWNoIG90aGVyLCBzbyBjYW4gYWxsIGJlIGFkZGVkIGluIHBhcmFsbGVsXG4gICAgICBmb3IgKGNvbnN0IHN0YWNrIG9mIHN0YWNrcykge1xuICAgICAgICB0aGlzLmFkZFN0YWNrQXJ0aWZhY3REZXBsb3ltZW50KHN0YWNrLCB7IHJ1bk9yZGVyLCBleGVjdXRlUnVuT3JkZXIgfSk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIEdldCBhIGNhY2hlZCB2ZXJzaW9uIG9mIGFuIEFwcGxpY2F0aW9uU2VjdXJpdHlDaGVjaywgd2hpY2ggY29uc2lzdHMgb2Y6XG4gICAqICAtIENvZGVCdWlsZCBQcm9qZWN0IHRvIGNoZWNrIGZvciBzZWN1cml0eSBjaGFuZ2VzIGluIGEgc3RhZ2VcbiAgICogIC0gTGFtYmRhIEZ1bmN0aW9uIHRoYXQgYXBwcm92ZXMgdGhlIG1hbnVhbCBhcHByb3ZhbCBpZiBubyBzZWN1cml0eSBjaGFuZ2VzIGFyZSBkZXRlY3RlZFxuICAgKlxuICAgKiBUaGUgQXBwbGljYXRpb25TZWN1cml0eUNoZWNrIGlzIGNhY2hlZCBmcm9tIHRoZSBwaXBlbGluZSAqKmlmKiogdGhpcyBzdGFnZSBpcyBzY29wZWRcbiAgICogdG8gYSBDREsgUGlwZWxpbmUuIElmIHRoaXMgc3RhZ2UgKippcyBub3QqKiBzY29wZWQgdG8gYSBwaXBlbGluZSwgY3JlYXRlIGFuIEFwcGxpY2F0aW9uU2VjdXJpdHlDaGVja1xuICAgKiBzY29wZWQgdG8gdGhlIHN0YWdlIGl0c2VsZi5cbiAgICpcbiAgICogQGludGVybmFsXG4gICAqL1xuICBwcml2YXRlIGdldEFwcGxpY2F0aW9uU2VjdXJpdHlDaGVjaygpOiBBcHBsaWNhdGlvblNlY3VyaXR5Q2hlY2sge1xuICAgIGlmICh0aGlzLl9hcHBsaWNhdGlvblNlY3VyaXR5Q2hlY2spIHtcbiAgICAgIHJldHVybiB0aGlzLl9hcHBsaWNhdGlvblNlY3VyaXR5Q2hlY2s7XG4gICAgfVxuXG4gICAgdGhpcy5fYXBwbGljYXRpb25TZWN1cml0eUNoZWNrID0gdGhpcy5waXBlbGluZVxuICAgICAgPyB0aGlzLnBpcGVsaW5lLl9nZXRBcHBsaWNhdGlvblNlY3VyaXR5Q2hlY2soKVxuICAgICAgOiBuZXcgQXBwbGljYXRpb25TZWN1cml0eUNoZWNrKHRoaXMsICdTdGFnZUFwcGxpY2F0aW9uU2VjdXJpdHlDaGVjaycsIHtcbiAgICAgICAgY29kZVBpcGVsaW5lOiB0aGlzLnBpcGVsaW5lU3RhZ2UucGlwZWxpbmUgYXMgY29kZXBpcGVsaW5lLlBpcGVsaW5lLFxuICAgICAgfSk7XG4gICAgcmV0dXJuIHRoaXMuX2FwcGxpY2F0aW9uU2VjdXJpdHlDaGVjaztcbiAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcbiAgcHVibGljIGFkZFN0YWNrQXJ0aWZhY3REZXBsb3ltZW50KHN0YWNrQXJ0aWZhY3Q6IGN4YXBpLkNsb3VkRm9ybWF0aW9uU3RhY2tBcnRpZmFjdCwgb3B0aW9uczogQWRkU3RhY2tPcHRpb25zID0ge30pIHtcbiAgICAvLyBHZXQgYWxsIGFzc2V0cyBtYW5pZmVzdHMgYW5kIGFkZCB0aGUgYXNzZXRzIGluICdlbSB0byB0aGUgYXNzZXQgcHVibGlzaGluZyBzdGFnZS5cbiAgICB0aGlzLnB1Ymxpc2hBc3NldERlcGVuZGVuY2llcyhzdGFja0FydGlmYWN0KTtcblxuICAgIC8vIFJlbWVtYmVyIGZvciBsYXRlciwgc2VlICdwcmVwYXJlKCknXG4gICAgLy8gV2Uga25vdyB0aGF0IGRlcGxveWluZyBhIHN0YWNrIGlzIGdvaW5nIHRvIHRha2UgdXAgMiBydW5vcmRlciBzbG90cyBsYXRlciBvbi5cbiAgICBjb25zdCBydW5PcmRlciA9IG9wdGlvbnMucnVuT3JkZXIgPz8gdGhpcy5uZXh0U2VxdWVudGlhbFJ1bk9yZGVyKDIpO1xuICAgIGNvbnN0IGV4ZWN1dGVSdW5PcmRlciA9IG9wdGlvbnMuZXhlY3V0ZVJ1bk9yZGVyID8/IHJ1bk9yZGVyICsgMTtcbiAgICB0aGlzLnN0YWNrc1RvRGVwbG95LnB1c2goe1xuICAgICAgcHJlcGFyZVJ1bk9yZGVyOiBydW5PcmRlcixcbiAgICAgIGV4ZWN1dGVSdW5PcmRlcixcbiAgICAgIHN0YWNrQXJ0aWZhY3QsXG4gICAgfSk7XG5cbiAgICB0aGlzLmFkdmFuY2VSdW5PcmRlclBhc3QocnVuT3JkZXIpO1xuICAgIHRoaXMuYWR2YW5jZVJ1bk9yZGVyUGFzdChleGVjdXRlUnVuT3JkZXIpO1xuICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcbiAgcHVibGljIGFkZE1hbnVhbEFwcHJvdmFsQWN0aW9uKG9wdGlvbnM6IEFkZE1hbnVhbEFwcHJvdmFsT3B0aW9ucyA9IHt9KSB7XG4gICAgbGV0IGFjdGlvbk5hbWUgPSBvcHRpb25zLmFjdGlvbk5hbWU7XG4gICAgaWYgKCFhY3Rpb25OYW1lKSB7XG4gICAgICBhY3Rpb25OYW1lID0gYE1hbnVhbEFwcHJvdmFsJHt0aGlzLl9tYW51YWxBcHByb3ZhbENvdW50ZXIgPiAxID8gdGhpcy5fbWFudWFsQXBwcm92YWxDb3VudGVyIDogJyd9YDtcbiAgICAgIHRoaXMuX21hbnVhbEFwcHJvdmFsQ291bnRlciArPSAxO1xuICAgIH1cblxuICAgIHRoaXMuYWRkQWN0aW9ucyhuZXcgY3BhY3Rpb25zLk1hbnVhbEFwcHJvdmFsQWN0aW9uKHtcbiAgICAgIGFjdGlvbk5hbWUsXG4gICAgICBydW5PcmRlcjogb3B0aW9ucy5ydW5PcmRlciA/PyB0aGlzLm5leHRTZXF1ZW50aWFsUnVuT3JkZXIoKSxcbiAgICB9KSk7XG4gIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxuICBwdWJsaWMgYWRkQWN0aW9ucyguLi5hY3Rpb25zOiBjb2RlcGlwZWxpbmUuSUFjdGlvbltdKSB7XG4gICAgZm9yIChjb25zdCBhY3Rpb24gb2YgYWN0aW9ucykge1xuICAgICAgdGhpcy5waXBlbGluZVN0YWdlLmFkZEFjdGlvbihhY3Rpb24pO1xuICAgIH1cbiAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcbiAgcHVibGljIG5leHRTZXF1ZW50aWFsUnVuT3JkZXIoY291bnQ6IG51bWJlciA9IDEpOiBudW1iZXIge1xuICAgIGNvbnN0IHJldCA9IHRoaXMuX25leHRTZXF1ZW50aWFsUnVuT3JkZXI7XG4gICAgdGhpcy5fbmV4dFNlcXVlbnRpYWxSdW5PcmRlciArPSBjb3VudDtcbiAgICByZXR1cm4gcmV0O1xuICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxuICBwdWJsaWMgZGVwbG95c1N0YWNrKGFydGlmYWN0SWQ6IHN0cmluZykge1xuICAgIHJldHVybiB0aGlzLnN0YWNrc1RvRGVwbG95Lm1hcChzID0+IHMuc3RhY2tBcnRpZmFjdC5pZCkuaW5jbHVkZXMoYXJ0aWZhY3RJZCk7XG4gIH1cblxuICAvKipcbiAgICogQWN0dWFsbHkgYWRkIGFsbCB0aGUgRGVwbG95U3RhY2sgYWN0aW9ucyB0byB0aGUgc3RhZ2UuXG4gICAqXG4gICAqIFdlIGRvIHRoaXMgbGF0ZSBiZWNhdXNlIGJlZm9yZSB3ZSBjYW4gcmVuZGVyIHRoZSBhY3R1YWwgRGVwbG95QWN0aW9ucyxcbiAgICogd2UgbmVlZCB0byBrbm93IHdoZXRoZXIgb3Igbm90IHdlIG5lZWQgdG8gY2FwdHVyZSB0aGUgc3RhY2sgb3V0cHV0cy5cbiAgICpcbiAgICogRklYTUU6IFRoaXMgaXMgaGVyZSBiZWNhdXNlIEFjdGlvbnMgYXJlIGltbXV0YWJsZSBhbmQgY2FuJ3QgYmUgcmVvcmRlcmVkXG4gICAqIGFmdGVyIGNyZWF0aW9uLCBub3IgaXMgdGhlcmUgYSB3YXkgdG8gc3BlY2lmeSByZWxhdGl2ZSBwcmlvcml0aWVzLCB3aGljaFxuICAgKiBpcyBhIGxpbWl0YXRpb24gdGhhdCB3ZSBzaG91bGQgdGFrZSBhd2F5IGluIHRoZSBiYXNlIGxpYnJhcnkuXG4gICAqL1xuICBwcml2YXRlIHByZXBhcmVTdGFnZSgpIHtcbiAgICAvLyBGSVhNRTogTWFrZSBzdXJlIHRoaXMgb25seSBnZXRzIHJ1biBvbmNlLiBUaGVyZSBzZWVtcyB0byBiZSBhbiBpc3N1ZSBpbiB0aGUgcmVjb25jaWxpYXRpb25cbiAgICAvLyBsb29wIHRoYXQgbWF5IHRyaWdnZXIgdGhpcyBtb3JlIHRoYW4gb25jZSBpZiBpdCB0aHJvd3MgYW4gZXJyb3Igc29tZXdoZXJlLCBhbmQgdGhlIGV4Y2VwdGlvblxuICAgIC8vIHRoYXQgZ2V0cyB0aHJvd24gaGVyZSB3aWxsIHRoZW4gb3ZlcnJpZGUgdGhlIGFjdHVhbCBmYWlsdXJlLlxuICAgIGlmICh0aGlzLl9wcmVwYXJlZCkgeyByZXR1cm47IH1cbiAgICB0aGlzLl9wcmVwYXJlZCA9IHRydWU7XG5cbiAgICBmb3IgKGNvbnN0IHsgcHJlcGFyZVJ1bk9yZGVyLCBzdGFja0FydGlmYWN0LCBleGVjdXRlUnVuT3JkZXIgfSBvZiB0aGlzLnN0YWNrc1RvRGVwbG95KSB7XG4gICAgICBjb25zdCBhcnRpZmFjdCA9IHRoaXMuaG9zdC5zdGFja091dHB1dEFydGlmYWN0KHN0YWNrQXJ0aWZhY3QuaWQpO1xuXG4gICAgICB0aGlzLnBpcGVsaW5lU3RhZ2UuYWRkQWN0aW9uKERlcGxveUNka1N0YWNrQWN0aW9uLmZyb21TdGFja0FydGlmYWN0KHRoaXMsIHN0YWNrQXJ0aWZhY3QsIHtcbiAgICAgICAgYmFzZUFjdGlvbk5hbWU6IHRoaXMuc2ltcGxpZnlTdGFja05hbWUoc3RhY2tBcnRpZmFjdC5zdGFja05hbWUpLFxuICAgICAgICBjbG91ZEFzc2VtYmx5SW5wdXQ6IHRoaXMuY2xvdWRBc3NlbWJseUFydGlmYWN0LFxuICAgICAgICBvdXRwdXQ6IGFydGlmYWN0LFxuICAgICAgICBvdXRwdXRGaWxlTmFtZTogYXJ0aWZhY3QgPyAnb3V0cHV0cy5qc29uJyA6IHVuZGVmaW5lZCxcbiAgICAgICAgcHJlcGFyZVJ1bk9yZGVyLFxuICAgICAgICBleGVjdXRlUnVuT3JkZXIsXG4gICAgICB9KSk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIEFkdmFuY2UgdGhlIHJ1bm9yZGVyIGNvdW50ZXIgc28gdGhhdCB0aGUgbmV4dCBzZXF1ZW50aWFsIG51bWJlciBpcyBoaWdoZXIgdGhhbiB0aGUgZ2l2ZW4gb25lXG4gICAqL1xuICBwcml2YXRlIGFkdmFuY2VSdW5PcmRlclBhc3QobGFzdFVzZWQ6IG51bWJlcikge1xuICAgIHRoaXMuX25leHRTZXF1ZW50aWFsUnVuT3JkZXIgPSBNYXRoLm1heChsYXN0VXNlZCArIDEsIHRoaXMuX25leHRTZXF1ZW50aWFsUnVuT3JkZXIpO1xuICB9XG5cbiAgLyoqXG4gICAqIFNpbXBsaWZ5IHRoZSBzdGFjayBuYW1lIGJ5IHJlbW92aW5nIHRoZSBgU3RhZ2UtYCBwcmVmaXggaWYgaXQgZXhpc3RzLlxuICAgKi9cbiAgcHJpdmF0ZSBzaW1wbGlmeVN0YWNrTmFtZShzOiBzdHJpbmcpIHtcbiAgICByZXR1cm4gc3RyaXBQcmVmaXgocywgYCR7dGhpcy5zdGFnZU5hbWV9LWApO1xuICB9XG5cbiAgLyoqXG4gICAqIEFkZCBhIHNlY3VyaXR5IGNoZWNrIGJlZm9yZSB0aGUgcHJlcGFyZS9kZXBsb3kgYWN0aW9ucyBvZiBhbiBDREsgc3RhZ2UuXG4gICAqIFRoZSBzZWN1cml0eSBjaGVjayBjb25zaXN0cyBvZiB0d28gYWN0aW9uczpcbiAgICogIC0gQ29kZUJ1aWxkIEFjdGlvbiB0byBjaGVjayBmb3Igc2VjdXJpdHkgY2hhbmdlcyBpbiBhIHN0YWdlXG4gICAqICAtIE1hbnVhbCBBcHByb3ZhbCBBY3Rpb24gdGhhdCBpcyBhdXRvIGFwcHJvdmVkIHZpYSBhIExhbWJkYSBpZiBubyBzZWN1cml0eSBjaGFuZ2VzIGRldGVjdGVkXG4gICAqL1xuICBwcml2YXRlIGFkZFNlY3VyaXR5Q2hlY2soYXBwU3RhZ2U6IFN0YWdlLCBvcHRpb25zPzogQmFzZVN0YWdlT3B0aW9ucykge1xuICAgIGNvbnN0IHsgY2RrRGlmZlByb2plY3QgfSA9IHRoaXMuZ2V0QXBwbGljYXRpb25TZWN1cml0eUNoZWNrKCk7XG4gICAgY29uc3Qgbm90aWZpY2F0aW9uVG9waWM6IHNucy5JVG9waWMgfCB1bmRlZmluZWQgPSBvcHRpb25zPy5zZWN1cml0eU5vdGlmaWNhdGlvblRvcGljID8/IHRoaXMuc2VjdXJpdHlOb3RpZmljYXRpb25Ub3BpYztcbiAgICBub3RpZmljYXRpb25Ub3BpYz8uZ3JhbnRQdWJsaXNoKGNka0RpZmZQcm9qZWN0KTtcblxuICAgIGNvbnN0IGFwcFN0YWdlTmFtZSA9IGFwcFN0YWdlLnN0YWdlTmFtZTtcbiAgICBjb25zdCBhcHByb3ZlQWN0aW9uTmFtZSA9IGAke2FwcFN0YWdlTmFtZX1NYW51YWxBcHByb3ZhbGA7XG4gICAgY29uc3QgZGlmZkFjdGlvbiA9IG5ldyBDb2RlQnVpbGRBY3Rpb24oe1xuICAgICAgcnVuT3JkZXI6IHRoaXMubmV4dFNlcXVlbnRpYWxSdW5PcmRlcigpLFxuICAgICAgYWN0aW9uTmFtZTogYCR7YXBwU3RhZ2VOYW1lfVNlY3VyaXR5Q2hlY2tgLFxuICAgICAgaW5wdXQ6IHRoaXMuY2xvdWRBc3NlbWJseUFydGlmYWN0LFxuICAgICAgcHJvamVjdDogY2RrRGlmZlByb2plY3QsXG4gICAgICB2YXJpYWJsZXNOYW1lc3BhY2U6IGAke2FwcFN0YWdlTmFtZX1TZWN1cml0eUNoZWNrYCxcbiAgICAgIGVudmlyb25tZW50VmFyaWFibGVzOiB7XG4gICAgICAgIFNUQUdFX1BBVEg6IHtcbiAgICAgICAgICB2YWx1ZTogTm9kZS5vZihhcHBTdGFnZSkucGF0aCxcbiAgICAgICAgICB0eXBlOiBjb2RlYnVpbGQuQnVpbGRFbnZpcm9ubWVudFZhcmlhYmxlVHlwZS5QTEFJTlRFWFQsXG4gICAgICAgIH0sXG4gICAgICAgIFNUQUdFX05BTUU6IHtcbiAgICAgICAgICB2YWx1ZTogdGhpcy5zdGFnZU5hbWUsXG4gICAgICAgICAgdHlwZTogY29kZWJ1aWxkLkJ1aWxkRW52aXJvbm1lbnRWYXJpYWJsZVR5cGUuUExBSU5URVhULFxuICAgICAgICB9LFxuICAgICAgICBBQ1RJT05fTkFNRToge1xuICAgICAgICAgIHZhbHVlOiBhcHByb3ZlQWN0aW9uTmFtZSxcbiAgICAgICAgICB0eXBlOiBjb2RlYnVpbGQuQnVpbGRFbnZpcm9ubWVudFZhcmlhYmxlVHlwZS5QTEFJTlRFWFQsXG4gICAgICAgIH0sXG4gICAgICAgIC4uLm5vdGlmaWNhdGlvblRvcGljID8ge1xuICAgICAgICAgIE5PVElGSUNBVElPTl9BUk46IHtcbiAgICAgICAgICAgIHZhbHVlOiBub3RpZmljYXRpb25Ub3BpYy50b3BpY0FybixcbiAgICAgICAgICAgIHR5cGU6IGNvZGVidWlsZC5CdWlsZEVudmlyb25tZW50VmFyaWFibGVUeXBlLlBMQUlOVEVYVCxcbiAgICAgICAgICB9LFxuICAgICAgICAgIE5PVElGSUNBVElPTl9TVUJKRUNUOiB7XG4gICAgICAgICAgICB2YWx1ZTogYENvbmZpcm0gcGVybWlzc2lvbiBicm9hZGVuaW5nIGluICR7YXBwU3RhZ2VOYW1lfWAsXG4gICAgICAgICAgICB0eXBlOiBjb2RlYnVpbGQuQnVpbGRFbnZpcm9ubWVudFZhcmlhYmxlVHlwZS5QTEFJTlRFWFQsXG4gICAgICAgICAgfSxcbiAgICAgICAgfSA6IHt9LFxuICAgICAgfSxcbiAgICB9KTtcblxuICAgIGNvbnN0IGFwcHJvdmUgPSBuZXcgY3BhY3Rpb25zLk1hbnVhbEFwcHJvdmFsQWN0aW9uKHtcbiAgICAgIGFjdGlvbk5hbWU6IGFwcHJvdmVBY3Rpb25OYW1lLFxuICAgICAgcnVuT3JkZXI6IHRoaXMubmV4dFNlcXVlbnRpYWxSdW5PcmRlcigpLFxuICAgICAgYWRkaXRpb25hbEluZm9ybWF0aW9uOiBgI3ske2FwcFN0YWdlTmFtZX1TZWN1cml0eUNoZWNrLk1FU1NBR0V9YCxcbiAgICAgIGV4dGVybmFsRW50aXR5TGluazogYCN7JHthcHBTdGFnZU5hbWV9U2VjdXJpdHlDaGVjay5MSU5LfWAsXG4gICAgfSk7XG5cbiAgICB0aGlzLmFkZEFjdGlvbnMoZGlmZkFjdGlvbiwgYXBwcm92ZSk7XG4gIH1cblxuICAvKipcbiAgICogTWFrZSBzdXJlIGFsbCBhc3NldHMgZGVwZW5kZWQgb24gYnkgdGhpcyBzdGFjayBhcmUgcHVibGlzaGVkIGluIHRoaXMgcGlwZWxpbmVcbiAgICpcbiAgICogVGFraW5nIGNhcmUgdG8gZXhjbHVkZSB0aGUgc3RhY2sgdGVtcGxhdGUgaXRzZWxmIC0tIGl0IGlzIGJlaW5nIHB1Ymxpc2hlZFxuICAgKiBhcyBhbiBhc3NldCBiZWNhdXNlIHRoZSBDTEkgbmVlZHMgdG8ga25vdyB0aGUgYXNzZXQgcHVibGlzaGluZyByb2xlIHdoZW5cbiAgICogcHVzaGluZyB0aGUgdGVtcGxhdGUgdG8gUzMsIGJ1dCBpbiB0aGUgY2FzZSBvZiBDb2RlUGlwZWxpbmUgd2UgYWx3YXlzXG4gICAqIHJlZmVyZW5jZSB0aGUgdGVtcGxhdGUgZnJvbSB0aGUgYXJ0aWZhY3QgYnVja2V0LlxuICAgKlxuICAgKiAoTk9URTogdGhpcyBpcyBvbmx5IHRydWUgZm9yIHRvcC1sZXZlbCBzdGFja3MsIG5vdCBuZXN0ZWQgc3RhY2tzLiBOZXN0ZWRcbiAgICogU3RhY2sgdGVtcGxhdGVzIGFyZSBhbHdheXMgcHVibGlzaGVkIGFzIGFzc2V0cykuXG4gICAqL1xuICBwcml2YXRlIHB1Ymxpc2hBc3NldERlcGVuZGVuY2llcyhzdGFja0FydGlmYWN0OiBjeGFwaS5DbG91ZEZvcm1hdGlvblN0YWNrQXJ0aWZhY3QpIHtcbiAgICBjb25zdCBhc3NldE1hbmlmZXN0cyA9IHN0YWNrQXJ0aWZhY3QuZGVwZW5kZW5jaWVzLmZpbHRlcihpc0Fzc2V0TWFuaWZlc3QpO1xuXG4gICAgZm9yIChjb25zdCBtYW5pZmVzdEFydGlmYWN0IG9mIGFzc2V0TWFuaWZlc3RzKSB7XG4gICAgICBjb25zdCBtYW5pZmVzdCA9IEFzc2V0TWFuaWZlc3RSZWFkZXIuZnJvbUZpbGUobWFuaWZlc3RBcnRpZmFjdC5maWxlKTtcblxuICAgICAgZm9yIChjb25zdCBlbnRyeSBvZiBtYW5pZmVzdC5lbnRyaWVzKSB7XG4gICAgICAgIGxldCBhc3NldFR5cGU6IEFzc2V0VHlwZTtcbiAgICAgICAgaWYgKGVudHJ5IGluc3RhbmNlb2YgRG9ja2VySW1hZ2VNYW5pZmVzdEVudHJ5KSB7XG4gICAgICAgICAgYXNzZXRUeXBlID0gQXNzZXRUeXBlLkRPQ0tFUl9JTUFHRTtcbiAgICAgICAgfSBlbHNlIGlmIChlbnRyeSBpbnN0YW5jZW9mIEZpbGVNYW5pZmVzdEVudHJ5KSB7XG4gICAgICAgICAgLy8gRG9uJ3QgcHVibGlzaCB0aGUgdGVtcGxhdGUgZm9yIHRoaXMgc3RhY2tcbiAgICAgICAgICBpZiAoZW50cnkuc291cmNlLnBhY2thZ2luZyA9PT0gJ2ZpbGUnICYmIGVudHJ5LnNvdXJjZS5wYXRoID09PSBzdGFja0FydGlmYWN0LnRlbXBsYXRlRmlsZSkge1xuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgYXNzZXRUeXBlID0gQXNzZXRUeXBlLkZJTEU7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBVbnJlY29nbml6ZWQgYXNzZXQgdHlwZTogJHtlbnRyeS50eXBlfWApO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCFlbnRyeS5kZXN0aW5hdGlvbi5hc3N1bWVSb2xlQXJuKSB7XG4gICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdhc3N1bWVSb2xlQXJuIGlzIG1pc3Npbmcgb24gYXNzZXQgYW5kIHJlcXVpcmVkJyk7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLmhvc3QucHVibGlzaEFzc2V0KHtcbiAgICAgICAgICBhc3NldE1hbmlmZXN0UGF0aDogbWFuaWZlc3RBcnRpZmFjdC5maWxlLFxuICAgICAgICAgIGFzc2V0SWQ6IGVudHJ5LmlkLmFzc2V0SWQsXG4gICAgICAgICAgYXNzZXRTZWxlY3RvcjogZW50cnkuaWQudG9TdHJpbmcoKSxcbiAgICAgICAgICBhc3NldFR5cGUsXG4gICAgICAgICAgYXNzZXRQdWJsaXNoaW5nUm9sZUFybjogZW50cnkuZGVzdGluYXRpb24uYXNzdW1lUm9sZUFybixcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfVxuICB9XG59XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXG5leHBvcnQgaW50ZXJmYWNlIEFkZFN0YWNrT3B0aW9ucyB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXG4gIHJlYWRvbmx5IHJ1bk9yZGVyPzogbnVtYmVyO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXG4gIHJlYWRvbmx5IGV4ZWN1dGVSdW5PcmRlcj86IG51bWJlcjtcbn1cblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxuZXhwb3J0IGNsYXNzIFN0YWNrT3V0cHV0IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXG4gIHB1YmxpYyByZWFkb25seSBhcnRpZmFjdEZpbGU6IGNvZGVwaXBlbGluZS5BcnRpZmFjdFBhdGg7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcbiAgcHVibGljIHJlYWRvbmx5IG91dHB1dE5hbWU6IHN0cmluZztcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcbiAgY29uc3RydWN0b3IoYXJ0aWZhY3RGaWxlOiBjb2RlcGlwZWxpbmUuQXJ0aWZhY3RQYXRoLCBvdXRwdXROYW1lOiBzdHJpbmcpIHtcbiAgICB0aGlzLmFydGlmYWN0RmlsZSA9IGFydGlmYWN0RmlsZTtcbiAgICB0aGlzLm91dHB1dE5hbWUgPSBvdXRwdXROYW1lO1xuICB9XG59XG5cbmZ1bmN0aW9uIHN0cmlwUHJlZml4KHM6IHN0cmluZywgcHJlZml4OiBzdHJpbmcpIHtcbiAgcmV0dXJuIHMuc3RhcnRzV2l0aChwcmVmaXgpID8gcy5zdWJzdHIocHJlZml4Lmxlbmd0aCkgOiBzO1xufVxuXG5mdW5jdGlvbiBpc0Fzc2V0TWFuaWZlc3QoczogY3hhcGkuQ2xvdWRBcnRpZmFjdCk6IHMgaXMgY3hhcGkuQXNzZXRNYW5pZmVzdEFydGlmYWN0IHtcbiAgLy8gaW5zdGFuY2VvZiBpcyB0b28gcmlza3ksIGFuZCB3ZSdyZSBhdCBhIHRvbyBsYXRlIHN0YWdlIHRvIHByb3Blcmx5IGZpeC5cbiAgLy8gcmV0dXJuIHMgaW5zdGFuY2VvZiBjeGFwaS5Bc3NldE1hbmlmZXN0QXJ0aWZhY3Q7XG4gIHJldHVybiBzLmNvbnN0cnVjdG9yLm5hbWUgPT09ICdBc3NldE1hbmlmZXN0QXJ0aWZhY3QnO1xufVxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXG5leHBvcnQgaW50ZXJmYWNlIElTdGFnZUhvc3Qge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxuICBwdWJsaXNoQXNzZXQoY29tbWFuZDogQXNzZXRQdWJsaXNoaW5nQ29tbWFuZCk6IHZvaWQ7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXG4gIHN0YWNrT3V0cHV0QXJ0aWZhY3Qoc3RhY2tBcnRpZmFjdElkOiBzdHJpbmcpOiBjb2RlcGlwZWxpbmUuQXJ0aWZhY3QgfCB1bmRlZmluZWQ7XG59XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcbmV4cG9ydCBpbnRlcmZhY2UgQXNzZXRQdWJsaXNoaW5nQ29tbWFuZCB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcbiAgcmVhZG9ubHkgYXNzZXRNYW5pZmVzdFBhdGg6IHN0cmluZztcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXG4gIHJlYWRvbmx5IGFzc2V0SWQ6IHN0cmluZztcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcbiAgcmVhZG9ubHkgYXNzZXRTZWxlY3Rvcjogc3RyaW5nO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxuICByZWFkb25seSBhc3NldFR5cGU6IEFzc2V0VHlwZTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxuICByZWFkb25seSBhc3NldFB1Ymxpc2hpbmdSb2xlQXJuOiBzdHJpbmc7XG59XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxuZXhwb3J0IGludGVyZmFjZSBCYXNlU3RhZ2VPcHRpb25zIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcbiAgcmVhZG9ubHkgY29uZmlybUJyb2FkZW5pbmdQZXJtaXNzaW9ucz86IGJvb2xlYW47XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxuICByZWFkb25seSBzZWN1cml0eU5vdGlmaWNhdGlvblRvcGljPzogc25zLklUb3BpYztcbn1cblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxuZXhwb3J0IGludGVyZmFjZSBBZGRTdGFnZU9wdGlvbnMgZXh0ZW5kcyBCYXNlU3RhZ2VPcHRpb25zIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxuICByZWFkb25seSBtYW51YWxBcHByb3ZhbHM/OiBib29sZWFuO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxuICByZWFkb25seSBleHRyYVJ1bk9yZGVyU3BhY2U/OiBudW1iZXI7XG59XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcbmV4cG9ydCBpbnRlcmZhY2UgQWRkTWFudWFsQXBwcm92YWxPcHRpb25zIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxuICByZWFkb25seSBhY3Rpb25OYW1lPzogc3RyaW5nO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxuICByZWFkb25seSBydW5PcmRlcj86IG51bWJlcjtcbn1cblxuLyoqXG4gKiBRdWV1ZWQgXCJkZXBsb3kgc3RhY2tcIiBjb21tYW5kIHRoYXQgaXMgcmVpZmllZCBkdXJpbmcgcHJlcGFyZSgpXG4gKi9cbmludGVyZmFjZSBEZXBsb3lTdGFja0NvbW1hbmQge1xuICBwcmVwYXJlUnVuT3JkZXI6IG51bWJlcjtcbiAgZXhlY3V0ZVJ1bk9yZGVyOiBudW1iZXI7XG4gIHN0YWNrQXJ0aWZhY3Q6IGN4YXBpLkNsb3VkRm9ybWF0aW9uU3RhY2tBcnRpZmFjdDtcbn1cbiJdfQ==
"use strict";
var _a, _b;
Object.defineProperty(exports, "__esModule", { value: true });
exports.CodePipelineFileSet = exports.ArtifactMap = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const crypto = require("crypto");
const cp = require("@aws-cdk/aws-codepipeline");
const blueprint_1 = require("../blueprint");
const helpers_internal_1 = require("../helpers-internal");
/**
 * Translate FileSets to CodePipeline Artifacts.
 *
 * @stability stable
 */
class ArtifactMap {
    constructor() {
        this.artifacts = new Map();
        this.usedNames = new Set();
    }
    /**
     * Return the matching CodePipeline artifact for a FileSet.
     *
     * @stability stable
     */
    toCodePipeline(x) {
        if (x instanceof CodePipelineFileSet) {
            return x._artifact;
        }
        let ret = this.artifacts.get(x);
        if (!ret) {
            // They all need a name
            const artifactName = this.makeUniqueName(`${x.producer.id}.${x.id}`);
            this.usedNames.add(artifactName);
            this.artifacts.set(x, ret = new cp.Artifact(artifactName));
        }
        return ret;
    }
    makeUniqueName(baseName) {
        let i = 1;
        baseName = sanitizeArtifactName(baseName);
        let name = baseName;
        while (this.usedNames.has(name)) {
            name = `${baseName}${++i}`;
        }
        return name;
    }
}
exports.ArtifactMap = ArtifactMap;
_a = JSII_RTTI_SYMBOL_1;
ArtifactMap[_a] = { fqn: "@aws-cdk/pipelines.ArtifactMap", version: "1.121.0" };
/**
 * Sanitize a string to be a valid artifact name
 *
 * This must comport to both the rules of artifacts in CodePipeline, as well
 * as the names of Source Identifiers in CodeBuild.
 *
 * Artifact Name limits aren't documented.
 *
 * Source Identifier limits are documented here:
 * https://docs.aws.amazon.com/codebuild/latest/APIReference/API_ProjectSource.html#CodeBuild-Type-ProjectSource-sourceIdentifier
 */
function sanitizeArtifactName(x) {
    let sani = x.replace(/[^A-Za-z0-9_]/g, '_'); // Charset requirement is imposed by CodeBuild
    const maxLength = 100; // Max length of 100 is imposed by CodePipeline library
    if (sani.length > maxLength) {
        const fingerprint = crypto.createHash('sha256').update(sani).digest('hex').substr(0, 8);
        sani = sani.substr(0, maxLength - fingerprint.length) + fingerprint;
    }
    return sani;
}
/**
 * A FileSet created from a CodePipeline artifact.
 *
 * You only need to use this if you want to add CDK Pipeline stages
 * add the end of an existing CodePipeline, which should be very rare.
 *
 * @stability stable
 */
class CodePipelineFileSet extends blueprint_1.FileSet {
    constructor(artifact) {
        var _c;
        super((_c = artifact.artifactName) !== null && _c !== void 0 ? _c : 'Imported', helpers_internal_1.PipelineGraph.NO_STEP);
        this._artifact = artifact;
    }
    /**
     * Turn a CodePipeline Artifact into a FileSet.
     *
     * @stability stable
     */
    static fromArtifact(artifact) {
        return new CodePipelineFileSet(artifact);
    }
}
exports.CodePipelineFileSet = CodePipelineFileSet;
_b = JSII_RTTI_SYMBOL_1;
CodePipelineFileSet[_b] = { fqn: "@aws-cdk/pipelines.CodePipelineFileSet", version: "1.121.0" };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXJ0aWZhY3QtbWFwLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiYXJ0aWZhY3QtbWFwLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQUEsaUNBQWlDO0FBQ2pDLGdEQUFnRDtBQUNoRCw0Q0FBdUM7QUFDdkMsMERBQW9EOzs7Ozs7QUFHcEQsTUFBYSxXQUFXO0lBQXhCO1FBQ1UsY0FBUyxHQUFHLElBQUksR0FBRyxFQUF3QixDQUFDO1FBQzVDLGNBQVMsR0FBRyxJQUFJLEdBQUcsRUFBVSxDQUFDO0tBMkJ2Qzs7Ozs7O0lBeEJRLGNBQWMsQ0FBQyxDQUFVO1FBQzlCLElBQUksQ0FBQyxZQUFZLG1CQUFtQixFQUFFO1lBQ3BDLE9BQU8sQ0FBQyxDQUFDLFNBQVMsQ0FBQztTQUNwQjtRQUVELElBQUksR0FBRyxHQUFHLElBQUksQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ2hDLElBQUksQ0FBQyxHQUFHLEVBQUU7WUFDUix1QkFBdUI7WUFDdkIsTUFBTSxZQUFZLEdBQUcsSUFBSSxDQUFDLGNBQWMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxRQUFRLENBQUMsRUFBRSxJQUFJLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDO1lBQ3JFLElBQUksQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDLFlBQVksQ0FBQyxDQUFDO1lBQ2pDLElBQUksQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBRSxHQUFHLEdBQUcsSUFBSSxFQUFFLENBQUMsUUFBUSxDQUFDLFlBQVksQ0FBQyxDQUFDLENBQUM7U0FDNUQ7UUFDRCxPQUFPLEdBQUcsQ0FBQztJQUNiLENBQUM7SUFFTyxjQUFjLENBQUMsUUFBZ0I7UUFDckMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQ1YsUUFBUSxHQUFHLG9CQUFvQixDQUFDLFFBQVEsQ0FBQyxDQUFDO1FBQzFDLElBQUksSUFBSSxHQUFHLFFBQVEsQ0FBQztRQUNwQixPQUFPLElBQUksQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxFQUFFO1lBQy9CLElBQUksR0FBRyxHQUFHLFFBQVEsR0FBRyxFQUFFLENBQUMsRUFBRSxDQUFDO1NBQzVCO1FBQ0QsT0FBTyxJQUFJLENBQUM7SUFDZCxDQUFDOztBQTVCSCxrQ0E2QkM7OztBQUVEOzs7Ozs7Ozs7O0dBVUc7QUFDSCxTQUFTLG9CQUFvQixDQUFDLENBQVM7SUFDckMsSUFBSSxJQUFJLEdBQUcsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxnQkFBZ0IsRUFBRSxHQUFHLENBQUMsQ0FBQyxDQUFDLDhDQUE4QztJQUMzRixNQUFNLFNBQVMsR0FBRyxHQUFHLENBQUMsQ0FBQyx1REFBdUQ7SUFFOUUsSUFBSSxJQUFJLENBQUMsTUFBTSxHQUFHLFNBQVMsRUFBRTtRQUMzQixNQUFNLFdBQVcsR0FBRyxNQUFNLENBQUMsVUFBVSxDQUFDLFFBQVEsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztRQUN4RixJQUFJLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDLEVBQUUsU0FBUyxHQUFHLFdBQVcsQ0FBQyxNQUFNLENBQUMsR0FBRyxXQUFXLENBQUM7S0FDckU7SUFFRCxPQUFPLElBQUksQ0FBQztBQUNkLENBQUM7Ozs7Ozs7OztBQUdELE1BQWEsbUJBQW9CLFNBQVEsbUJBQU87SUFhOUMsWUFBb0IsUUFBcUI7O1FBQ3ZDLEtBQUssT0FBQyxRQUFRLENBQUMsWUFBWSxtQ0FBSSxVQUFVLEVBQUUsZ0NBQWEsQ0FBQyxPQUFPLENBQUMsQ0FBQztRQUNsRSxJQUFJLENBQUMsU0FBUyxHQUFHLFFBQVEsQ0FBQztJQUM1QixDQUFDOzs7Ozs7SUFkTSxNQUFNLENBQUMsWUFBWSxDQUFDLFFBQXFCO1FBQzlDLE9BQU8sSUFBSSxtQkFBbUIsQ0FBQyxRQUFRLENBQUMsQ0FBQztJQUMzQyxDQUFDOztBQUpILGtEQWlCQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIGNyeXB0byBmcm9tICdjcnlwdG8nO1xuaW1wb3J0ICogYXMgY3AgZnJvbSAnQGF3cy1jZGsvYXdzLWNvZGVwaXBlbGluZSc7XG5pbXBvcnQgeyBGaWxlU2V0IH0gZnJvbSAnLi4vYmx1ZXByaW50JztcbmltcG9ydCB7IFBpcGVsaW5lR3JhcGggfSBmcm9tICcuLi9oZWxwZXJzLWludGVybmFsJztcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxuZXhwb3J0IGNsYXNzIEFydGlmYWN0TWFwIHtcbiAgcHJpdmF0ZSBhcnRpZmFjdHMgPSBuZXcgTWFwPEZpbGVTZXQsIGNwLkFydGlmYWN0PigpO1xuICBwcml2YXRlIHVzZWROYW1lcyA9IG5ldyBTZXQ8c3RyaW5nPigpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcbiAgcHVibGljIHRvQ29kZVBpcGVsaW5lKHg6IEZpbGVTZXQpOiBjcC5BcnRpZmFjdCB7XG4gICAgaWYgKHggaW5zdGFuY2VvZiBDb2RlUGlwZWxpbmVGaWxlU2V0KSB7XG4gICAgICByZXR1cm4geC5fYXJ0aWZhY3Q7XG4gICAgfVxuXG4gICAgbGV0IHJldCA9IHRoaXMuYXJ0aWZhY3RzLmdldCh4KTtcbiAgICBpZiAoIXJldCkge1xuICAgICAgLy8gVGhleSBhbGwgbmVlZCBhIG5hbWVcbiAgICAgIGNvbnN0IGFydGlmYWN0TmFtZSA9IHRoaXMubWFrZVVuaXF1ZU5hbWUoYCR7eC5wcm9kdWNlci5pZH0uJHt4LmlkfWApO1xuICAgICAgdGhpcy51c2VkTmFtZXMuYWRkKGFydGlmYWN0TmFtZSk7XG4gICAgICB0aGlzLmFydGlmYWN0cy5zZXQoeCwgcmV0ID0gbmV3IGNwLkFydGlmYWN0KGFydGlmYWN0TmFtZSkpO1xuICAgIH1cbiAgICByZXR1cm4gcmV0O1xuICB9XG5cbiAgcHJpdmF0ZSBtYWtlVW5pcXVlTmFtZShiYXNlTmFtZTogc3RyaW5nKSB7XG4gICAgbGV0IGkgPSAxO1xuICAgIGJhc2VOYW1lID0gc2FuaXRpemVBcnRpZmFjdE5hbWUoYmFzZU5hbWUpO1xuICAgIGxldCBuYW1lID0gYmFzZU5hbWU7XG4gICAgd2hpbGUgKHRoaXMudXNlZE5hbWVzLmhhcyhuYW1lKSkge1xuICAgICAgbmFtZSA9IGAke2Jhc2VOYW1lfSR7KytpfWA7XG4gICAgfVxuICAgIHJldHVybiBuYW1lO1xuICB9XG59XG5cbi8qKlxuICogU2FuaXRpemUgYSBzdHJpbmcgdG8gYmUgYSB2YWxpZCBhcnRpZmFjdCBuYW1lXG4gKlxuICogVGhpcyBtdXN0IGNvbXBvcnQgdG8gYm90aCB0aGUgcnVsZXMgb2YgYXJ0aWZhY3RzIGluIENvZGVQaXBlbGluZSwgYXMgd2VsbFxuICogYXMgdGhlIG5hbWVzIG9mIFNvdXJjZSBJZGVudGlmaWVycyBpbiBDb2RlQnVpbGQuXG4gKlxuICogQXJ0aWZhY3QgTmFtZSBsaW1pdHMgYXJlbid0IGRvY3VtZW50ZWQuXG4gKlxuICogU291cmNlIElkZW50aWZpZXIgbGltaXRzIGFyZSBkb2N1bWVudGVkIGhlcmU6XG4gKiBodHRwczovL2RvY3MuYXdzLmFtYXpvbi5jb20vY29kZWJ1aWxkL2xhdGVzdC9BUElSZWZlcmVuY2UvQVBJX1Byb2plY3RTb3VyY2UuaHRtbCNDb2RlQnVpbGQtVHlwZS1Qcm9qZWN0U291cmNlLXNvdXJjZUlkZW50aWZpZXJcbiAqL1xuZnVuY3Rpb24gc2FuaXRpemVBcnRpZmFjdE5hbWUoeDogc3RyaW5nKTogc3RyaW5nIHtcbiAgbGV0IHNhbmkgPSB4LnJlcGxhY2UoL1teQS1aYS16MC05X10vZywgJ18nKTsgLy8gQ2hhcnNldCByZXF1aXJlbWVudCBpcyBpbXBvc2VkIGJ5IENvZGVCdWlsZFxuICBjb25zdCBtYXhMZW5ndGggPSAxMDA7IC8vIE1heCBsZW5ndGggb2YgMTAwIGlzIGltcG9zZWQgYnkgQ29kZVBpcGVsaW5lIGxpYnJhcnlcblxuICBpZiAoc2FuaS5sZW5ndGggPiBtYXhMZW5ndGgpIHtcbiAgICBjb25zdCBmaW5nZXJwcmludCA9IGNyeXB0by5jcmVhdGVIYXNoKCdzaGEyNTYnKS51cGRhdGUoc2FuaSkuZGlnZXN0KCdoZXgnKS5zdWJzdHIoMCwgOCk7XG4gICAgc2FuaSA9IHNhbmkuc3Vic3RyKDAsIG1heExlbmd0aCAtIGZpbmdlcnByaW50Lmxlbmd0aCkgKyBmaW5nZXJwcmludDtcbiAgfVxuXG4gIHJldHVybiBzYW5pO1xufVxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXG5leHBvcnQgY2xhc3MgQ29kZVBpcGVsaW5lRmlsZVNldCBleHRlbmRzIEZpbGVTZXQge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXG4gIHB1YmxpYyBzdGF0aWMgZnJvbUFydGlmYWN0KGFydGlmYWN0OiBjcC5BcnRpZmFjdCkge1xuICAgIHJldHVybiBuZXcgQ29kZVBpcGVsaW5lRmlsZVNldChhcnRpZmFjdCk7XG4gIH1cblxuICAvKipcbiAgICogVGhlIGFydGlmYWN0IHRoaXMgY2xhc3MgaXMgd3JhcHBpbmdcbiAgICpcbiAgICogQGludGVybmFsXG4gICAqL1xuICBwdWJsaWMgcmVhZG9ubHkgX2FydGlmYWN0OiBjcC5BcnRpZmFjdDtcblxuICBwcml2YXRlIGNvbnN0cnVjdG9yKGFydGlmYWN0OiBjcC5BcnRpZmFjdCkge1xuICAgIHN1cGVyKGFydGlmYWN0LmFydGlmYWN0TmFtZSA/PyAnSW1wb3J0ZWQnLCBQaXBlbGluZUdyYXBoLk5PX1NURVApO1xuICAgIHRoaXMuX2FydGlmYWN0ID0gYXJ0aWZhY3Q7XG4gIH1cbn0iXX0=
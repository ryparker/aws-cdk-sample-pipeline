"use strict";
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.CodePipelineSource = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const cp_actions = require("@aws-cdk/aws-codepipeline-actions");
const core_1 = require("@aws-cdk/core");
const constructs_1 = require("constructs");
const blueprint_1 = require("../blueprint");
/**
 * CodePipeline source steps.
 *
 * This class contains a number of factory methods for the different types
 * of sources that CodePipeline supports.
 *
 * @stability stable
 */
class CodePipelineSource extends blueprint_1.Step {
    constructor() {
        super(...arguments);
        // tells `PipelineGraph` to hoist a "Source" step
        /**
         * Whether or not this is a Source step.
         *
         * What it means to be a Source step depends on the engine.
         *
         * @stability stable
         */
        this.isSource = true;
    }
    /**
     * Returns a GitHub source, using OAuth tokens to authenticate with GitHub and a separate webhook to detect changes.
     *
     * This is no longer
     * the recommended method. Please consider using `connection()`
     * instead.
     *
     * Pass in the owner and repository in a single string, like this:
     *
     * ```ts
     * CodePipelineSource.gitHub('owner/repo', 'main');
     * ```
     *
     * Authentication will be done by a secret called `github-token` in AWS
     * Secrets Manager (unless specified otherwise).
     *
     * The token should have these permissions:
     *
     * * **repo** - to read the repository
     * * **admin:repo_hook** - if you plan to use webhooks (true by default)
     *
     * @stability stable
     */
    static gitHub(repoString, branch, props = {}) {
        return new GitHubSource(repoString, branch, props);
    }
    /**
     * Returns an S3 source.
     *
     * @param bucket The bucket where the source code is located.
     * @param props The options, which include the key that identifies the source code file and and how the pipeline should be triggered.
     * @stability stable
     */
    static s3(bucket, objectKey, props = {}) {
        return new S3Source(bucket, objectKey, props);
    }
    /**
     * Returns a CodeStar connection source.
     *
     * A CodeStar connection allows AWS CodePipeline to
     * access external resources, such as repositories in GitHub, GitHub Enterprise or
     * BitBucket.
     *
     * To use this method, you first need to create a CodeStar connection
     * using the AWS console. In the process, you may have to sign in to the external provider
     * -- GitHub, for example -- to authorize AWS to read and modify your repository.
     * Once you have done this, copy the connection ARN and use it to create the source.
     *
     * Example:
     *
     * ```ts
     * CodePipelineSource.connection('owner/repo', 'main', {
     *    connectionArn: 'arn:aws:codestar-connections:us-east-1:222222222222:connection/7d2469ff-514a-4e4f-9003-5ca4a43cdc41', // Created using the AWS console
     * });
     * ```
     *
     * @param repoString A string that encodes owner and repository separated by a slash (e.g. 'owner/repo').
     * @param branch The branch to use.
     * @param props The source properties, including the connection ARN.
     * @see https://docs.aws.amazon.com/dtconsole/latest/userguide/welcome-connections.html
     * @stability stable
     */
    static connection(repoString, branch, props) {
        return new CodeStarConnectionSource(repoString, branch, props);
    }
    /**
     * Returns a CodeCommit source.
     *
     * @param repository The CodeCommit repository.
     * @param branch The branch to use.
     * @param props The source properties.
     * @stability stable
     */
    static codeCommit(repository, branch, props = {}) {
        return new CodeCommitSource(repository, branch, props);
    }
    /**
     * Create the desired Action and add it to the pipeline.
     *
     * @stability stable
     */
    produceAction(stage, options) {
        const output = options.artifacts.toCodePipeline(this.primaryOutput);
        const action = this.getAction(output, options.actionName, options.runOrder);
        stage.addAction(action);
        return { runOrdersConsumed: 1 };
    }
}
exports.CodePipelineSource = CodePipelineSource;
_a = JSII_RTTI_SYMBOL_1;
CodePipelineSource[_a] = { fqn: "@aws-cdk/pipelines.CodePipelineSource", version: "1.121.0" };
/**
 * Extend CodePipelineSource so we can type-test in the CodePipelineEngine.
 */
class GitHubSource extends CodePipelineSource {
    constructor(repoString, branch, props) {
        var _b;
        super(repoString);
        this.branch = branch;
        this.props = props;
        const parts = repoString.split('/');
        if (core_1.Token.isUnresolved(repoString) || parts.length !== 2) {
            throw new Error(`GitHub repository name should be a resolved string like '<owner>/<repo>', got '${repoString}'`);
        }
        this.owner = parts[0];
        this.repo = parts[1];
        this.authentication = (_b = props.authentication) !== null && _b !== void 0 ? _b : core_1.SecretValue.secretsManager('github-token');
        this.configurePrimaryOutput(new blueprint_1.FileSet('Source', this));
    }
    getAction(output, actionName, runOrder) {
        return new cp_actions.GitHubSourceAction({
            output,
            actionName,
            runOrder,
            oauthToken: this.authentication,
            owner: this.owner,
            repo: this.repo,
            branch: this.branch,
            trigger: this.props.trigger,
        });
    }
}
class S3Source extends CodePipelineSource {
    constructor(bucket, objectKey, props) {
        super(constructs_1.Node.of(bucket).addr);
        this.bucket = bucket;
        this.objectKey = objectKey;
        this.props = props;
        this.configurePrimaryOutput(new blueprint_1.FileSet('Source', this));
    }
    getAction(output, _actionName, runOrder) {
        var _b;
        return new cp_actions.S3SourceAction({
            output,
            // Bucket names are guaranteed to conform to ActionName restrictions
            actionName: (_b = this.props.actionName) !== null && _b !== void 0 ? _b : this.bucket.bucketName,
            runOrder,
            bucketKey: this.objectKey,
            trigger: this.props.trigger,
            bucket: this.bucket,
        });
    }
}
class CodeStarConnectionSource extends CodePipelineSource {
    constructor(repoString, branch, props) {
        super(repoString);
        this.branch = branch;
        this.props = props;
        const parts = repoString.split('/');
        if (core_1.Token.isUnresolved(repoString) || parts.length !== 2) {
            throw new Error(`CodeStar repository name should be a resolved string like '<owner>/<repo>', got '${repoString}'`);
        }
        this.owner = parts[0];
        this.repo = parts[1];
        this.configurePrimaryOutput(new blueprint_1.FileSet('Source', this));
    }
    getAction(output, actionName, runOrder) {
        return new cp_actions.CodeStarConnectionsSourceAction({
            output,
            actionName,
            runOrder,
            connectionArn: this.props.connectionArn,
            owner: this.owner,
            repo: this.repo,
            branch: this.branch,
            codeBuildCloneOutput: this.props.codeBuildCloneOutput,
            triggerOnPush: this.props.triggerOnPush,
        });
    }
}
class CodeCommitSource extends CodePipelineSource {
    constructor(repository, branch, props) {
        super(core_1.Token.isUnresolved(repository.repositoryName)
            ? constructs_1.Node.of(repository).addr
            : repository.repositoryName);
        this.repository = repository;
        this.branch = branch;
        this.props = props;
        this.configurePrimaryOutput(new blueprint_1.FileSet('Source', this));
    }
    getAction(output, _actionName, runOrder) {
        return new cp_actions.CodeCommitSourceAction({
            output,
            // Guaranteed to be okay as action name
            actionName: this.repository.repositoryName,
            runOrder,
            branch: this.branch,
            trigger: this.props.trigger,
            repository: this.repository,
            eventRole: this.props.eventRole,
            codeBuildCloneOutput: this.props.codeBuildCloneOutput,
        });
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29kZXBpcGVsaW5lLXNvdXJjZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbImNvZGVwaXBlbGluZS1zb3VyY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFHQSxnRUFBZ0U7QUFJaEUsd0NBQW1EO0FBQ25ELDJDQUFrQztBQUNsQyw0Q0FBNkM7Ozs7Ozs7OztBQUk3QyxNQUFzQixrQkFBbUIsU0FBUSxnQkFBSTtJQUFyRDs7UUFxQkUsaURBQWlEOzs7Ozs7OztRQUNqQyxhQUFRLEdBQUcsSUFBSSxDQUFDO0tBVWpDOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7SUE5QlEsTUFBTSxDQUFDLE1BQU0sQ0FBQyxVQUFrQixFQUFFLE1BQWMsRUFBRSxRQUE2QixFQUFFO1FBQ3RGLE9BQU8sSUFBSSxZQUFZLENBQUMsVUFBVSxFQUFFLE1BQU0sRUFBRSxLQUFLLENBQUMsQ0FBQztJQUNyRCxDQUFDOzs7Ozs7OztJQUdNLE1BQU0sQ0FBQyxFQUFFLENBQUMsTUFBZSxFQUFFLFNBQWlCLEVBQUUsUUFBeUIsRUFBRTtRQUM5RSxPQUFPLElBQUksUUFBUSxDQUFDLE1BQU0sRUFBRSxTQUFTLEVBQUUsS0FBSyxDQUFDLENBQUM7SUFDaEQsQ0FBQzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0lBR00sTUFBTSxDQUFDLFVBQVUsQ0FBQyxVQUFrQixFQUFFLE1BQWMsRUFBRSxLQUE4QjtRQUN6RixPQUFPLElBQUksd0JBQXdCLENBQUMsVUFBVSxFQUFFLE1BQU0sRUFBRSxLQUFLLENBQUMsQ0FBQztJQUNqRSxDQUFDOzs7Ozs7Ozs7SUFHTSxNQUFNLENBQUMsVUFBVSxDQUFDLFVBQWtDLEVBQUUsTUFBYyxFQUFFLFFBQWlDLEVBQUU7UUFDOUcsT0FBTyxJQUFJLGdCQUFnQixDQUFDLFVBQVUsRUFBRSxNQUFNLEVBQUUsS0FBSyxDQUFDLENBQUM7SUFDekQsQ0FBQzs7Ozs7O0lBS00sYUFBYSxDQUFDLEtBQWdCLEVBQUUsT0FBNkI7UUFDbEUsTUFB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QUNGO0FBY0QsTUFBTSxnQkFBaUIsU0FBUSxrQkFBa0I7SUFDL0MsWUFBNkIsVUFBa0MsRUFBbUIsTUFBYyxFQUFtQixLQUE4QjtRQUMvSSxLQUFLLENBQUMsWUFBSyxDQUFDLFlBQVksQ0FBQyxVQUFVLENBQUMsY0FBYyxDQUFDO1lBQ2pELENBQUMsQ0FBQyxpQkFBSSxDQUFDLEVBQUUsQ0FBQyxVQUFVLENBQUMsQ0FBQyxJQUFJO1lBQzFCLENBQUMsQ0FBQyxVQUFVLENBQUMsY0FBYyxDQUFDLENBQUM7UUFISixlQUFVLEdBQVYsVUFBVSxDQUF3QjtRQUFtQixXQUFNLEdBQU4sTUFBTSxDQUFRO1FBQW1CLFVBQUssR0FBTCxLQUFLLENBQXlCO1FBSy9JLElBQUksQ0FBQyxzQkFBc0IsQ0FBQyxJQUFJLG1CQUFPLENBQUMsUUFBUSxFQUFFLElBQUksQ0FBQyxDQUFDLENBQUM7SUFDM0QsQ0FBQztJQUVTLFNBQVMsQ0FBQyxNQUFnQixFQUFFLFdBQW1CLEVBQUUsUUFBZ0I7UUFDekUsT0FBTyxJQUFJLFVBQVUsQ0FBQyxzQkFBc0IsQ0FBQztZQUMzQyxNQUFNO1lBQ04sdUNBQXVDO1lBQ3ZDLFVBQVUsRUFBRSxJQUFJLENBQUMsVUFBVSxDQUFDLGNBQWM7WUFDMUMsUUFBUTtZQUNSLE1BQU0sRUFBRSxJQUFJLENBQUMsTUFBTTtZQUNuQixPQUFPLEVBQUUsSUFBSSxDQUFDLEtBQUssQ0FBQyxPQUFPO1lBQzNCLFVBQVUsRUFBRSxJQUFJLENBQUMsVUFBVTtZQUMzQixTQUFTLEVBQUUsSUFBSSxDQUFDLEtBQUssQ0FBQyxTQUFTO1lBQy9CLG9CQUFvQixFQUFFLElBQUksQ0FBQyxLQUFLLENBQUMsb0JBQW9CO1NBQ3RELENBQUMsQ0FBQztJQUNMLENBQUM7Q0FDRiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIGNvZGVjb21taXQgZnJvbSAnQGF3cy1jZGsvYXdzLWNvZGVjb21taXQnO1xuaW1wb3J0ICogYXMgY3AgZnJvbSAnQGF3cy1jZGsvYXdzLWNvZGVwaXBlbGluZSc7XG5pbXBvcnQgeyBBcnRpZmFjdCB9IGZyb20gJ0Bhd3MtY2RrL2F3cy1jb2RlcGlwZWxpbmUnO1xuaW1wb3J0ICogYXMgY3BfYWN0aW9ucyBmcm9tICdAYXdzLWNkay9hd3MtY29kZXBpcGVsaW5lLWFjdGlvbnMnO1xuaW1wb3J0IHsgQWN0aW9uLCBDb2RlQ29tbWl0VHJpZ2dlciwgR2l0SHViVHJpZ2dlciwgUzNUcmlnZ2VyIH0gZnJvbSAnQGF3cy1jZGsvYXdzLWNvZGVwaXBlbGluZS1hY3Rpb25zJztcbmltcG9ydCAqIGFzIGlhbSBmcm9tICdAYXdzLWNkay9hd3MtaWFtJztcbmltcG9ydCB7IElCdWNrZXQgfSBmcm9tICdAYXdzLWNkay9hd3MtczMnO1xuaW1wb3J0IHsgU2VjcmV0VmFsdWUsIFRva2VuIH0gZnJvbSAnQGF3cy1jZGsvY29yZSc7XG5pbXBvcnQgeyBOb2RlIH0gZnJvbSAnY29uc3RydWN0cyc7XG5pbXBvcnQgeyBGaWxlU2V0LCBTdGVwIH0gZnJvbSAnLi4vYmx1ZXByaW50JztcbmltcG9ydCB7IENvZGVQaXBlbGluZUFjdGlvbkZhY3RvcnlSZXN1bHQsIFByb2R1Y2VBY3Rpb25PcHRpb25zLCBJQ29kZVBpcGVsaW5lQWN0aW9uRmFjdG9yeSB9IGZyb20gJy4vY29kZXBpcGVsaW5lLWFjdGlvbi1mYWN0b3J5JztcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXG5leHBvcnQgYWJzdHJhY3QgY2xhc3MgQ29kZVBpcGVsaW5lU291cmNlIGV4dGVuZHMgU3RlcCBpbXBsZW1lbnRzIElDb2RlUGlwZWxpbmVBY3Rpb25GYWN0b3J5IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcbiAgcHVibGljIHN0YXRpYyBnaXRIdWIocmVwb1N0cmluZzogc3RyaW5nLCBicmFuY2g6IHN0cmluZywgcHJvcHM6IEdpdEh1YlNvdXJjZU9wdGlvbnMgPSB7fSk6IENvZGVQaXBlbGluZVNvdXJjZSB7XG4gICAgcmV0dXJuIG5ldyBHaXRIdWJTb3VyY2UocmVwb1N0cmluZywgYnJhbmNoLCBwcm9wcyk7XG4gIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxuICBwdWJsaWMgc3RhdGljIHMzKGJ1Y2tldDogSUJ1Y2tldCwgb2JqZWN0S2V5OiBzdHJpbmcsIHByb3BzOiBTM1NvdXJjZU9wdGlvbnMgPSB7fSk6IENvZGVQaXBlbGluZVNvdXJjZSB7XG4gICAgcmV0dXJuIG5ldyBTM1NvdXJjZShidWNrZXQsIG9iamVjdEtleSwgcHJvcHMpO1xuICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcbiAgcHVibGljIHN0YXRpYyBjb25uZWN0aW9uKHJlcG9TdHJpbmc6IHN0cmluZywgYnJhbmNoOiBzdHJpbmcsIHByb3BzOiBDb25uZWN0aW9uU291cmNlT3B0aW9ucyk6IENvZGVQaXBlbGluZVNvdXJjZSB7XG4gICAgcmV0dXJuIG5ldyBDb2RlU3RhckNvbm5lY3Rpb25Tb3VyY2UocmVwb1N0cmluZywgYnJhbmNoLCBwcm9wcyk7XG4gIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcbiAgcHVibGljIHN0YXRpYyBjb2RlQ29tbWl0KHJlcG9zaXRvcnk6IGNvZGVjb21taXQuSVJlcG9zaXRvcnksIGJyYW5jaDogc3RyaW5nLCBwcm9wczogQ29kZUNvbW1pdFNvdXJjZU9wdGlvbnMgPSB7fSk6IENvZGVQaXBlbGluZVNvdXJjZSB7XG4gICAgcmV0dXJuIG5ldyBDb2RlQ29tbWl0U291cmNlKHJlcG9zaXRvcnksIGJyYW5jaCwgcHJvcHMpO1xuICB9XG5cbiAgLy8gdGVsbHMgYFBpcGVsaW5lR3JhcGhgIHRvIGhvaXN0IGEgXCJTb3VyY2VcIiBzdGVwXG4gIHB1YmxpYyByZWFkb25seSBpc1NvdXJjZSA9IHRydWU7XG5cbiAgcHVibGljIHByb2R1Y2VBY3Rpb24oc3RhZ2U6IGNwLklTdGFnZSwgb3B0aW9uczogUHJvZHVjZUFjdGlvbk9wdGlvbnMpOiBDb2RlUGlwZWxpbmVBY3Rpb25GYWN0b3J5UmVzdWx0IHtcbiAgICBjb25zdCBvdXRwdXQgPSBvcHRpb25zLmFydGlmYWN0cy50b0NvZGVQaXBlbGluZSh0aGlzLnByaW1hcnlPdXRwdXQhKTtcbiAgICBjb25zdCBhY3Rpb24gPSB0aGlzLmdldEFjdGlvbihvdXRwdXQsIG9wdGlvbnMuYWN0aW9uTmFtZSwgb3B0aW9ucy5ydW5PcmRlcik7XG4gICAgc3RhZ2UuYWRkQWN0aW9uKGFjdGlvbik7XG4gICAgcmV0dXJuIHsgcnVuT3JkZXJzQ29uc3VtZWQ6IDEgfTtcbiAgfVxuXG4gIHByb3RlY3RlZCBhYnN0cmFjdCBnZXRBY3Rpb24ob3V0cHV0OiBBcnRpZmFjdCwgYWN0aW9uTmFtZTogc3RyaW5nLCBydW5PcmRlcjogbnVtYmVyKTogQWN0aW9uO1xufVxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXG5leHBvcnQgaW50ZXJmYWNlIEdpdEh1YlNvdXJjZU9wdGlvbnMge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXG4gIHJlYWRvbmx5IGF1dGhlbnRpY2F0aW9uPzogU2VjcmV0VmFsdWU7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxuICByZWFkb25seSB0cmlnZ2VyPzogR2l0SHViVHJpZ2dlcjtcblxufVxuXG4vKipcbiAqIEV4dGVuZCBDb2RlUGlwZWxpbmVTb3VyY2Ugc28gd2UgY2FuIHR5cGUtdGVzdCBpbiB0aGUgQ29kZVBpcGVsaW5lRW5naW5lLlxuICovXG5jbGFzcyBHaXRIdWJTb3VyY2UgZXh0ZW5kcyBDb2RlUGlwZWxpbmVTb3VyY2Uge1xuICBwcml2YXRlIHJlYWRvbmx5IG93bmVyOiBzdHJpbmc7XG4gIHByaXZhdGUgcmVhZG9ubHkgcmVwbzogc3RyaW5nO1xuICBwcml2YXRlIHJlYWRvbmx5IGF1dGhlbnRpY2F0aW9uOiBTZWNyZXRWYWx1ZTtcblxuICBjb25zdHJ1Y3RvcihyZXBvU3RyaW5nOiBzdHJpbmcsIHJlYWRvbmx5IGJyYW5jaDogc3RyaW5nLCByZWFkb25seSBwcm9wczogR2l0SHViU291cmNlT3B0aW9ucykge1xuICAgIHN1cGVyKHJlcG9TdHJpbmcpO1xuXG4gICAgY29uc3QgcGFydHMgPSByZXBvU3RyaW5nLnNwbGl0KCcvJyk7XG4gICAgaWYgKFRva2VuLmlzVW5yZXNvbHZlZChyZXBvU3RyaW5nKSB8fCBwYXJ0cy5sZW5ndGggIT09IDIpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihgR2l0SHViIHJlcG9zaXRvcnkgbmFtZSBzaG91bGQgYmUgYSByZXNvbHZlZCBzdHJpbmcgbGlrZSAnPG93bmVyPi88cmVwbz4nLCBnb3QgJyR7cmVwb1N0cmluZ30nYCk7XG4gICAgfVxuICAgIHRoaXMub3duZXIgPSBwYXJ0c1swXTtcbiAgICB0aGlzLnJlcG8gPSBwYXJ0c1sxXTtcbiAgICB0aGlzLmF1dGhlbnRpY2F0aW9uID0gcHJvcHMuYXV0aGVudGljYXRpb24gPz8gU2VjcmV0VmFsdWUuc2VjcmV0c01hbmFnZXIoJ2dpdGh1Yi10b2tlbicpO1xuICAgIHRoaXMuY29uZmlndXJlUHJpbWFyeU91dHB1dChuZXcgRmlsZVNldCgnU291cmNlJywgdGhpcykpO1xuICB9XG5cbiAgcHJvdGVjdGVkIGdldEFjdGlvbihvdXRwdXQ6IEFydGlmYWN0LCBhY3Rpb25OYW1lOiBzdHJpbmcsIHJ1bk9yZGVyOiBudW1iZXIpIHtcbiAgICByZXR1cm4gbmV3IGNwX2FjdGlvbnMuR2l0SHViU291cmNlQWN0aW9uKHtcbiAgICAgIG91dHB1dCxcbiAgICAgIGFjdGlvbk5hbWUsXG4gICAgICBydW5PcmRlcixcbiAgICAgIG9hdXRoVG9rZW46IHRoaXMuYXV0aGVudGljYXRpb24sXG4gICAgICBvd25lcjogdGhpcy5vd25lcixcbiAgICAgIHJlcG86IHRoaXMucmVwbyxcbiAgICAgIGJyYW5jaDogdGhpcy5icmFuY2gsXG4gICAgICB0cmlnZ2VyOiB0aGlzLnByb3BzLnRyaWdnZXIsXG4gICAgfSk7XG4gIH1cbn1cblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXG5leHBvcnQgaW50ZXJmYWNlIFMzU291cmNlT3B0aW9ucyB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXG4gIHJlYWRvbmx5IHRyaWdnZXI/OiBTM1RyaWdnZXI7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXG4gIHJlYWRvbmx5IGFjdGlvbk5hbWU/OiBzdHJpbmc7XG59XG5cbmNsYXNzIFMzU291cmNlIGV4dGVuZHMgQ29kZVBpcGVsaW5lU291cmNlIHtcbiAgY29uc3RydWN0b3IocmVhZG9ubHkgYnVja2V0OiBJQnVja2V0LCBwcml2YXRlIHJlYWRvbmx5IG9iamVjdEtleTogc3RyaW5nLCByZWFkb25seSBwcm9wczogUzNTb3VyY2VPcHRpb25zKSB7XG4gICAgc3VwZXIoTm9kZS5vZihidWNrZXQpLmFkZHIpO1xuXG4gICAgdGhpcy5jb25maWd1cmVQcmltYXJ5T3V0cHV0KG5ldyBGaWxlU2V0KCdTb3VyY2UnLCB0aGlzKSk7XG4gIH1cblxuICBwcm90ZWN0ZWQgZ2V0QWN0aW9uKG91dHB1dDogQXJ0aWZhY3QsIF9hY3Rpb25OYW1lOiBzdHJpbmcsIHJ1bk9yZGVyOiBudW1iZXIpIHtcbiAgICByZXR1cm4gbmV3IGNwX2FjdGlvbnMuUzNTb3VyY2VBY3Rpb24oe1xuICAgICAgb3V0cHV0LFxuICAgICAgLy8gQnVja2V0IG5hbWVzIGFyZSBndWFyYW50ZWVkIHRvIGNvbmZvcm0gdG8gQWN0aW9uTmFtZSByZXN0cmljdGlvbnNcbiAgICAgIGFjdGlvbk5hbWU6IHRoaXMucHJvcHMuYWN0aW9uTmFtZSA/PyB0aGlzLmJ1Y2tldC5idWNrZXROYW1lLFxuICAgICAgcnVuT3JkZXIsXG4gICAgICBidWNrZXRLZXk6IHRoaXMub2JqZWN0S2V5LFxuICAgICAgdHJpZ2dlcjogdGhpcy5wcm9wcy50cmlnZ2VyLFxuICAgICAgYnVja2V0OiB0aGlzLmJ1Y2tldCxcbiAgICB9KTtcbiAgfVxufVxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXG5leHBvcnQgaW50ZXJmYWNlIENvbm5lY3Rpb25Tb3VyY2VPcHRpb25zIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXG4gIHJlYWRvbmx5IGNvbm5lY3Rpb25Bcm46IHN0cmluZztcblxuXG4gIC8vIGxvbmcgVVJMIGluIEBzZWVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcbiAgcmVhZG9ubHkgY29kZUJ1aWxkQ2xvbmVPdXRwdXQ/OiBib29sZWFuO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXG4gIHJlYWRvbmx5IHRyaWdnZXJPblB1c2g/OiBib29sZWFuO1xufVxuXG5jbGFzcyBDb2RlU3RhckNvbm5lY3Rpb25Tb3VyY2UgZXh0ZW5kcyBDb2RlUGlwZWxpbmVTb3VyY2Uge1xuICBwcml2YXRlIHJlYWRvbmx5IG93bmVyOiBzdHJpbmc7XG4gIHByaXZhdGUgcmVhZG9ubHkgcmVwbzogc3RyaW5nO1xuXG4gIGNvbnN0cnVjdG9yKHJlcG9TdHJpbmc6IHN0cmluZywgcmVhZG9ubHkgYnJhbmNoOiBzdHJpbmcsIHJlYWRvbmx5IHByb3BzOiBDb25uZWN0aW9uU291cmNlT3B0aW9ucykge1xuICAgIHN1cGVyKHJlcG9TdHJpbmcpO1xuXG4gICAgY29uc3QgcGFydHMgPSByZXBvU3RyaW5nLnNwbGl0KCcvJyk7XG4gICAgaWYgKFRva2VuLmlzVW5yZXNvbHZlZChyZXBvU3RyaW5nKSB8fCBwYXJ0cy5sZW5ndGggIT09IDIpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihgQ29kZVN0YXIgcmVwb3NpdG9yeSBuYW1lIHNob3VsZCBiZSBhIHJlc29sdmVkIHN0cmluZyBsaWtlICc8b3duZXI+LzxyZXBvPicsIGdvdCAnJHtyZXBvU3RyaW5nfSdgKTtcbiAgICB9XG4gICAgdGhpcy5vd25lciA9IHBhcnRzWzBdO1xuICAgIHRoaXMucmVwbyA9IHBhcnRzWzFdO1xuICAgIHRoaXMuY29uZmlndXJlUHJpbWFyeU91dHB1dChuZXcgRmlsZVNldCgnU291cmNlJywgdGhpcykpO1xuICB9XG5cbiAgcHJvdGVjdGVkIGdldEFjdGlvbihvdXRwdXQ6IEFydGlmYWN0LCBhY3Rpb25OYW1lOiBzdHJpbmcsIHJ1bk9yZGVyOiBudW1iZXIpIHtcbiAgICByZXR1cm4gbmV3IGNwX2FjdGlvbnMuQ29kZVN0YXJDb25uZWN0aW9uc1NvdXJjZUFjdGlvbih7XG4gICAgICBvdXRwdXQsXG4gICAgICBhY3Rpb25OYW1lLFxuICAgICAgcnVuT3JkZXIsXG4gICAgICBjb25uZWN0aW9uQXJuOiB0aGlzLnByb3BzLmNvbm5lY3Rpb25Bcm4sXG4gICAgICBvd25lcjogdGhpcy5vd25lcixcbiAgICAgIHJlcG86IHRoaXMucmVwbyxcbiAgICAgIGJyYW5jaDogdGhpcy5icmFuY2gsXG4gICAgICBjb2RlQnVpbGRDbG9uZU91dHB1dDogdGhpcy5wcm9wcy5jb2RlQnVpbGRDbG9uZU91dHB1dCxcbiAgICAgIHRyaWdnZXJPblB1c2g6IHRoaXMucHJvcHMudHJpZ2dlck9uUHVzaCxcbiAgICB9KTtcbiAgfVxufVxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxuZXhwb3J0IGludGVyZmFjZSBDb2RlQ29tbWl0U291cmNlT3B0aW9ucyB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcbiAgcmVhZG9ubHkgdHJpZ2dlcj86IENvZGVDb21taXRUcmlnZ2VyO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxuICByZWFkb25seSBldmVudFJvbGU/OiBpYW0uSVJvbGU7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcbiAgcmVhZG9ubHkgY29kZUJ1aWxkQ2xvbmVPdXRwdXQ/OiBib29sZWFuO1xufVxuXG5jbGFzcyBDb2RlQ29tbWl0U291cmNlIGV4dGVuZHMgQ29kZVBpcGVsaW5lU291cmNlIHtcbiAgY29uc3RydWN0b3IocHJpdmF0ZSByZWFkb25seSByZXBvc2l0b3J5OiBjb2RlY29tbWl0LklSZXBvc2l0b3J5LCBwcml2YXRlIHJlYWRvbmx5IGJyYW5jaDogc3RyaW5nLCBwcml2YXRlIHJlYWRvbmx5IHByb3BzOiBDb2RlQ29tbWl0U291cmNlT3B0aW9ucykge1xuICAgIHN1cGVyKFRva2VuLmlzVW5yZXNvbHZlZChyZXBvc2l0b3J5LnJlcG9zaXRvcnlOYW1lKVxuICAgICAgPyBOb2RlLm9mKHJlcG9zaXRvcnkpLmFkZHJcbiAgICAgIDogcmVwb3NpdG9yeS5yZXBvc2l0b3J5TmFtZSk7XG5cbiAgICB0aGlzLmNvbmZpZ3VyZVByaW1hcnlPdXRwdXQobmV3IEZpbGVTZXQoJ1NvdXJjZScsIHRoaXMpKTtcbiAgfVxuXG4gIHByb3RlY3RlZCBnZXRBY3Rpb24ob3V0cHV0OiBBcnRpZmFjdCwgX2FjdGlvbk5hbWU6IHN0cmluZywgcnVuT3JkZXI6IG51bWJlcikge1xuICAgIHJldHVybiBuZXcgY3BfYWN0aW9ucy5Db2RlQ29tbWl0U291cmNlQWN0aW9uKHtcbiAgICAgIG91dHB1dCxcbiAgICAgIC8vIEd1YXJhbnRlZWQgdG8gYmUgb2theSBhcyBhY3Rpb24gbmFtZVxuICAgICAgYWN0aW9uTmFtZTogdGhpcy5yZXBvc2l0b3J5LnJlcG9zaXRvcnlOYW1lLFxuICAgICAgcnVuT3JkZXIsXG4gICAgICBicmFuY2g6IHRoaXMuYnJhbmNoLFxuICAgICAgdHJpZ2dlcjogdGhpcy5wcm9wcy50cmlnZ2VyLFxuICAgICAgcmVwb3NpdG9yeTogdGhpcy5yZXBvc2l0b3J5LFxuICAgICAgZXZlbnRSb2xlOiB0aGlzLnByb3BzLmV2ZW50Um9sZSxcbiAgICAgIGNvZGVCdWlsZENsb25lT3V0cHV0OiB0aGlzLnByb3BzLmNvZGVCdWlsZENsb25lT3V0cHV0LFxuICAgIH0pO1xuICB9XG59Il19
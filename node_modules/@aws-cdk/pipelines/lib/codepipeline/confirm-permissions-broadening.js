"use strict";
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.ConfirmPermissionsBroadening = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const cpa = require("@aws-cdk/aws-codepipeline-actions");
const constructs_1 = require("constructs");
const blueprint_1 = require("../blueprint");
const application_security_check_1 = require("../private/application-security-check");
/**
 * Pause the pipeline if a deployment would add IAM permissions or Security Group rules.
 *
 * This step is only supported in CodePipeline pipelines.
 *
 * @stability stable
 */
class ConfirmPermissionsBroadening extends blueprint_1.Step {
    /**
     * @stability stable
     */
    constructor(id, props) {
        super(id);
        this.props = props;
    }
    /**
     * Create the desired Action and add it to the pipeline.
     *
     * @stability stable
     */
    produceAction(stage, options) {
        var _b;
        const sec = this.getOrCreateSecCheck(options.pipeline);
        (_b = this.props.notificationTopic) === null || _b === void 0 ? void 0 : _b.grantPublish(sec.cdkDiffProject);
        const variablesNamespace = constructs_1.Node.of(this.props.stage).addr;
        const approveActionName = `${options.actionName}.Confirm`;
        stage.addAction(new cpa.CodeBuildAction({
            runOrder: options.runOrder,
            actionName: `${options.actionName}.Check`,
            input: options.artifacts.toCodePipeline(options.pipeline.cloudAssemblyFileSet),
            project: sec.cdkDiffProject,
            variablesNamespace,
            environmentVariables: {
                STAGE_PATH: { value: constructs_1.Node.of(this.props.stage).path },
                STAGE_NAME: { value: stage.stageName },
                ACTION_NAME: { value: approveActionName },
                ...this.props.notificationTopic ? {
                    NOTIFICATION_ARN: { value: this.props.notificationTopic.topicArn },
                    NOTIFICATION_SUBJECT: { value: `Confirm permission broadening in ${this.props.stage.stageName}` },
                } : {},
            },
        }));
        stage.addAction(new cpa.ManualApprovalAction({
            actionName: approveActionName,
            runOrder: options.runOrder + 1,
            additionalInformation: `#{${variablesNamespace}.MESSAGE}`,
            externalEntityLink: `#{${variablesNamespace}.LINK}`,
        }));
        return { runOrdersConsumed: 2 };
    }
    getOrCreateSecCheck(pipeline) {
        const id = 'PipelinesSecurityCheck';
        const existing = constructs_1.Node.of(pipeline).tryFindChild(id);
        if (existing) {
            if (!(existing instanceof application_security_check_1.ApplicationSecurityCheck)) {
                throw new Error(`Expected '${constructs_1.Node.of(existing).path}' to be 'ApplicationSecurityCheck' but was '${existing}'`);
            }
            return existing;
        }
        return new application_security_check_1.ApplicationSecurityCheck(pipeline, id, {
            codePipeline: pipeline.pipeline,
        });
    }
}
exports.ConfirmPermissionsBroadening = ConfirmPermissionsBroadening;
_a = JSII_RTTI_SYMBOL_1;
ConfirmPermissionsBroadening[_a] = { fqn: "@aws-cdk/pipelines.ConfirmPermissionsBroadening", version: "1.121.0" };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uZmlybS1wZXJtaXNzaW9ucy1icm9hZGVuaW5nLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiY29uZmlybS1wZXJtaXNzaW9ucy1icm9hZGVuaW5nLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQ0EseURBQXlEO0FBR3pELDJDQUFrQztBQUNsQyw0Q0FBb0M7QUFDcEMsc0ZBQWlGOzs7Ozs7OztBQWNqRixNQUFhLDRCQUE2QixTQUFRLGdCQUFJOzs7O0lBQ3BELFlBQVksRUFBVSxFQUFtQixLQUFzQztRQUM3RSxLQUFLLENBQUMsRUFBRSxDQUFDLENBQUM7UUFENkIsVUFBSyxHQUFMLEtBQUssQ0FBaUM7SUFFL0UsQ0FBQzs7Ozs7O0lBRU0sYUFBYSxDQUFDLEtBQWEsRUFBRSxPQUE2Qjs7UUFDL0QsTUFBTSxHQUFHLEdBQUcsSUFBSSxDQUFDLG1CQUFtQixDQUFDLE9BQU8sQ0FBQyxRQUFRLENBQUMsQ0FBQztRQUN2RCxNQUFBLElBQUksQ0FBQyxLQUFLLENBQUMsaUJBQWlCLDBDQUFFLFlBQVksQ0FBQyxHQUFHLENBQUMsY0FBYyxFQUFFO1FBRS9ELE1BQU0sa0JBQWtCLEdBQUcsaUJBQUksQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsQ0FBQyxJQUFJLENBQUM7UUFFMUQsTUFBTSxpQkFBaUIsR0FBRyxHQUFHLE9BQU8sQ0FBQyxVQUFVLFVBQVUsQ0FBQztRQUMxRCxLQUFLLENBQUMsU0FBUyxDQUFDLElBQUksR0FBRyxDQUFDLGVBQWUsQ0FBQztZQUN0QyxRQUFRLEVBQUUsT0FBTyxDQUFDLFFBQVE7WUFDMUIsVUFBVSxFQUFFLEdBQUcsT0FBTyxDQUFDLFVBQVUsUUFBUTtZQUN6QyxLQUFLLEVBQUUsT0FBTyxDQUFDLFNBQVMsQ0FBQyxjQUFjLENBQUMsT0FBTyxDQUFDLFFBQVEsQ0FBQyxvQkFBb0IsQ0FBQztZQUM5RSxPQUFPLEVBQUUsR0FBRyxDQUFDLGNBQWM7WUFDM0Isa0JBQWtCO1lBQ2xCLG9CQUFvQixFQUFFO2dCQUNwQixVQUFVLEVBQUUsRUFBRSxLQUFLLEVBQUUsaUJBQUksQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsQ0FBQyxJQUFJLEVBQUU7Z0JBQ3JELFVBQVUsRUFBRSxFQUFFLEtBQUssRUFBRSxLQUFLLENBQUMsU0FBUyxFQUFFO2dCQUN0QyxXQUFXLEVBQUUsRUFBRSxLQUFLLEVBQUUsaUJBQWlCLEVBQUU7Z0JBQ3pDLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDLENBQUM7b0JBQ2hDLGdCQUFnQixFQUFFLEVBQUUsS0FBSyxFQUFFLElBQUksQ0FBQyxLQUFLLENBQUMsaUJBQWlCLENBQUMsUUFBUSxFQUFFO29CQUNsRSxvQkFBb0IsRUFBRSxFQUFFLEtBQUssRUFBRSxvQ0FBb0MsSUFBSSxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsU0FBUyxFQUFFLEVBQUU7aUJBQ2xHLENBQUMsQ0FBQyxDQUFDLEVBQUU7YUFDUDtTQUNGLENBQUMsQ0FBQyxDQUFDO1FBRUosS0FBSyxDQUFDLFNBQVMsQ0FBQyxJQUFJLEdBQUcsQ0FBQyxvQkFBb0IsQ0FBQztZQUMzQyxVQUFVLEVBQUUsaUJBQWlCO1lBQzdCLFFBQVEsRUFBRSxPQUFPLENBQUMsUUFBUSxHQUFHLENBQUM7WUFDOUIscUJBQXFCLEVBQUUsS0FBSyxrQkFBa0IsV0FBVztZQUN6RCxrQkFBa0IsRUFBRSxLQUFLLGtCQUFrQixRQUFRO1NBQ3BELENBQUMsQ0FBQyxDQUFDO1FBRUosT0FBTyxFQUFFLGlCQUFpQixFQUFFLENBQUMsRUFBRSxDQUFDO0lBQ2xDLENBQUM7SUFFTyxtQkFBbUIsQ0FBQyxRQUFzQjtRQUNoRCxNQUFNLEVBQUUsR0FBRyx3QkFBd0IsQ0FBQztRQUNwQyxNQUFNLFFBQVEsR0FBRyxpQkFBSSxDQUFDLEVBQUUsQ0FBQyxRQUFRLENBQUMsQ0FBQyxZQUFZLENBQUMsRUFBRSxDQUFDLENBQUM7UUFDcEQsSUFBSSxRQUFRLEVBQUU7WUFDWixJQUFJLENBQUMsQ0FBQyxRQUFRLFlBQVkscURBQXdCLENBQUMsRUFBRTtnQkFDbkQsTUFBTSxJQUFJLEtBQUssQ0FBQyxhQUFhLGlCQUFJLENBQUMsRUFBRSxDQUFDLFFBQVEsQ0FBQyxDQUFDLElBQUksK0NBQStDLFFBQVEsR0FBRyxDQUFDLENBQUM7YUFDaEg7WUFDRCxPQUFPLFFBQVEsQ0FBQztTQUNqQjtRQUVELE9BQU8sSUFBSSxxREFBd0IsQ0FBQyxRQUFRLEVBQUUsRUFBRSxFQUFFO1lBQ2hELFlBQVksRUFBRSxRQUFRLENBQUMsUUFBUTtTQUNoQyxDQUFDLENBQUM7SUFDTCxDQUFDOztBQXBESCxvRUFxREMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJU3RhZ2UgfSBmcm9tICdAYXdzLWNkay9hd3MtY29kZXBpcGVsaW5lJztcbmltcG9ydCAqIGFzIGNwYSBmcm9tICdAYXdzLWNkay9hd3MtY29kZXBpcGVsaW5lLWFjdGlvbnMnO1xuaW1wb3J0ICogYXMgc25zIGZyb20gJ0Bhd3MtY2RrL2F3cy1zbnMnO1xuaW1wb3J0IHsgU3RhZ2UgfSBmcm9tICdAYXdzLWNkay9jb3JlJztcbmltcG9ydCB7IE5vZGUgfSBmcm9tICdjb25zdHJ1Y3RzJztcbmltcG9ydCB7IFN0ZXAgfSBmcm9tICcuLi9ibHVlcHJpbnQnO1xuaW1wb3J0IHsgQXBwbGljYXRpb25TZWN1cml0eUNoZWNrIH0gZnJvbSAnLi4vcHJpdmF0ZS9hcHBsaWNhdGlvbi1zZWN1cml0eS1jaGVjayc7XG5pbXBvcnQgeyBDb2RlUGlwZWxpbmUgfSBmcm9tICcuL2NvZGVwaXBlbGluZSc7XG5pbXBvcnQgeyBDb2RlUGlwZWxpbmVBY3Rpb25GYWN0b3J5UmVzdWx0LCBJQ29kZVBpcGVsaW5lQWN0aW9uRmFjdG9yeSwgUHJvZHVjZUFjdGlvbk9wdGlvbnMgfSBmcm9tICcuL2NvZGVwaXBlbGluZS1hY3Rpb24tZmFjdG9yeSc7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXG5leHBvcnQgaW50ZXJmYWNlIFBlcm1pc3Npb25zQnJvYWRlbmluZ0NoZWNrUHJvcHMge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcbiAgcmVhZG9ubHkgc3RhZ2U6IFN0YWdlO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxuICByZWFkb25seSBub3RpZmljYXRpb25Ub3BpYz86IHNucy5JVG9waWNcbn1cblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXG5leHBvcnQgY2xhc3MgQ29uZmlybVBlcm1pc3Npb25zQnJvYWRlbmluZyBleHRlbmRzIFN0ZXAgaW1wbGVtZW50cyBJQ29kZVBpcGVsaW5lQWN0aW9uRmFjdG9yeSB7XG4gIGNvbnN0cnVjdG9yKGlkOiBzdHJpbmcsIHByaXZhdGUgcmVhZG9ubHkgcHJvcHM6IFBlcm1pc3Npb25zQnJvYWRlbmluZ0NoZWNrUHJvcHMpIHtcbiAgICBzdXBlcihpZCk7XG4gIH1cblxuICBwdWJsaWMgcHJvZHVjZUFjdGlvbihzdGFnZTogSVN0YWdlLCBvcHRpb25zOiBQcm9kdWNlQWN0aW9uT3B0aW9ucyk6IENvZGVQaXBlbGluZUFjdGlvbkZhY3RvcnlSZXN1bHQge1xuICAgIGNvbnN0IHNlYyA9IHRoaXMuZ2V0T3JDcmVhdGVTZWNDaGVjayhvcHRpb25zLnBpcGVsaW5lKTtcbiAgICB0aGlzLnByb3BzLm5vdGlmaWNhdGlvblRvcGljPy5ncmFudFB1Ymxpc2goc2VjLmNka0RpZmZQcm9qZWN0KTtcblxuICAgIGNvbnN0IHZhcmlhYmxlc05hbWVzcGFjZSA9IE5vZGUub2YodGhpcy5wcm9wcy5zdGFnZSkuYWRkcjtcblxuICAgIGNvbnN0IGFwcHJvdmVBY3Rpb25OYW1lID0gYCR7b3B0aW9ucy5hY3Rpb25OYW1lfS5Db25maXJtYDtcbiAgICBzdGFnZS5hZGRBY3Rpb24obmV3IGNwYS5Db2RlQnVpbGRBY3Rpb24oe1xuICAgICAgcnVuT3JkZXI6IG9wdGlvbnMucnVuT3JkZXIsXG4gICAgICBhY3Rpb25OYW1lOiBgJHtvcHRpb25zLmFjdGlvbk5hbWV9LkNoZWNrYCxcbiAgICAgIGlucHV0OiBvcHRpb25zLmFydGlmYWN0cy50b0NvZGVQaXBlbGluZShvcHRpb25zLnBpcGVsaW5lLmNsb3VkQXNzZW1ibHlGaWxlU2V0KSxcbiAgICAgIHByb2plY3Q6IHNlYy5jZGtEaWZmUHJvamVjdCxcbiAgICAgIHZhcmlhYmxlc05hbWVzcGFjZSxcbiAgICAgIGVudmlyb25tZW50VmFyaWFibGVzOiB7XG4gICAgICAgIFNUQUdFX1BBVEg6IHsgdmFsdWU6IE5vZGUub2YodGhpcy5wcm9wcy5zdGFnZSkucGF0aCB9LFxuICAgICAgICBTVEFHRV9OQU1FOiB7IHZhbHVlOiBzdGFnZS5zdGFnZU5hbWUgfSxcbiAgICAgICAgQUNUSU9OX05BTUU6IHsgdmFsdWU6IGFwcHJvdmVBY3Rpb25OYW1lIH0sXG4gICAgICAgIC4uLnRoaXMucHJvcHMubm90aWZpY2F0aW9uVG9waWMgPyB7XG4gICAgICAgICAgTk9USUZJQ0FUSU9OX0FSTjogeyB2YWx1ZTogdGhpcy5wcm9wcy5ub3RpZmljYXRpb25Ub3BpYy50b3BpY0FybiB9LFxuICAgICAgICAgIE5PVElGSUNBVElPTl9TVUJKRUNUOiB7IHZhbHVlOiBgQ29uZmlybSBwZXJtaXNzaW9uIGJyb2FkZW5pbmcgaW4gJHt0aGlzLnByb3BzLnN0YWdlLnN0YWdlTmFtZX1gIH0sXG4gICAgICAgIH0gOiB7fSxcbiAgICAgIH0sXG4gICAgfSkpO1xuXG4gICAgc3RhZ2UuYWRkQWN0aW9uKG5ldyBjcGEuTWFudWFsQXBwcm92YWxBY3Rpb24oe1xuICAgICAgYWN0aW9uTmFtZTogYXBwcm92ZUFjdGlvbk5hbWUsXG4gICAgICBydW5PcmRlcjogb3B0aW9ucy5ydW5PcmRlciArIDEsXG4gICAgICBhZGRpdGlvbmFsSW5mb3JtYXRpb246IGAjeyR7dmFyaWFibGVzTmFtZXNwYWNlfS5NRVNTQUdFfWAsXG4gICAgICBleHRlcm5hbEVudGl0eUxpbms6IGAjeyR7dmFyaWFibGVzTmFtZXNwYWNlfS5MSU5LfWAsXG4gICAgfSkpO1xuXG4gICAgcmV0dXJuIHsgcnVuT3JkZXJzQ29uc3VtZWQ6IDIgfTtcbiAgfVxuXG4gIHByaXZhdGUgZ2V0T3JDcmVhdGVTZWNDaGVjayhwaXBlbGluZTogQ29kZVBpcGVsaW5lKTogQXBwbGljYXRpb25TZWN1cml0eUNoZWNrIHtcbiAgICBjb25zdCBpZCA9ICdQaXBlbGluZXNTZWN1cml0eUNoZWNrJztcbiAgICBjb25zdCBleGlzdGluZyA9IE5vZGUub2YocGlwZWxpbmUpLnRyeUZpbmRDaGlsZChpZCk7XG4gICAgaWYgKGV4aXN0aW5nKSB7XG4gICAgICBpZiAoIShleGlzdGluZyBpbnN0YW5jZW9mIEFwcGxpY2F0aW9uU2VjdXJpdHlDaGVjaykpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBFeHBlY3RlZCAnJHtOb2RlLm9mKGV4aXN0aW5nKS5wYXRofScgdG8gYmUgJ0FwcGxpY2F0aW9uU2VjdXJpdHlDaGVjaycgYnV0IHdhcyAnJHtleGlzdGluZ30nYCk7XG4gICAgICB9XG4gICAgICByZXR1cm4gZXhpc3Rpbmc7XG4gICAgfVxuXG4gICAgcmV0dXJuIG5ldyBBcHBsaWNhdGlvblNlY3VyaXR5Q2hlY2socGlwZWxpbmUsIGlkLCB7XG4gICAgICBjb2RlUGlwZWxpbmU6IHBpcGVsaW5lLnBpcGVsaW5lLFxuICAgIH0pO1xuICB9XG59Il19
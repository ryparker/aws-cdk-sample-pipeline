import * as codecommit from '@aws-cdk/aws-codecommit';
import * as cp from '@aws-cdk/aws-codepipeline';
import { Artifact } from '@aws-cdk/aws-codepipeline';
import { Action, CodeCommitTrigger, GitHubTrigger, S3Trigger } from '@aws-cdk/aws-codepipeline-actions';
import * as iam from '@aws-cdk/aws-iam';
import { IBucket } from '@aws-cdk/aws-s3';
import { SecretValue } from '@aws-cdk/core';
import { Step } from '../blueprint';
import { CodePipelineActionFactoryResult, ProduceActionOptions, ICodePipelineActionFactory } from './codepipeline-action-factory';
/**
 * CodePipeline source steps.
 *
 * This class contains a number of factory methods for the different types
 * of sources that CodePipeline supports.
 *
 * @stability stable
 */
export declare abstract class CodePipelineSource extends Step implements ICodePipelineActionFactory {
    /**
     * Returns a GitHub source, using OAuth tokens to authenticate with GitHub and a separate webhook to detect changes.
     *
     * This is no longer
     * the recommended method. Please consider using `connection()`
     * instead.
     *
     * Pass in the owner and repository in a single string, like this:
     *
     * ```ts
     * CodePipelineSource.gitHub('owner/repo', 'main');
     * ```
     *
     * Authentication will be done by a secret called `github-token` in AWS
     * Secrets Manager (unless specified otherwise).
     *
     * The token should have these permissions:
     *
     * * **repo** - to read the repository
     * * **admin:repo_hook** - if you plan to use webhooks (true by default)
     *
     * @stability stable
     */
    static gitHub(repoString: string, branch: string, props?: GitHubSourceOptions): CodePipelineSource;
    /**
     * Returns an S3 source.
     *
     * @param bucket The bucket where the source code is located.
     * @param props The options, which include the key that identifies the source code file and and how the pipeline should be triggered.
     * @stability stable
     */
    static s3(bucket: IBucket, objectKey: string, props?: S3SourceOptions): CodePipelineSource;
    /**
     * Returns a CodeStar connection source.
     *
     * A CodeStar connection allows AWS CodePipeline to
     * access external resources, such as repositories in GitHub, GitHub Enterprise or
     * BitBucket.
     *
     * To use this method, you first need to create a CodeStar connection
     * using the AWS console. In the process, you may have to sign in to the external provider
     * -- GitHub, for example -- to authorize AWS to read and modify your repository.
     * Once you have done this, copy the connection ARN and use it to create the source.
     *
     * Example:
     *
     * ```ts
     * CodePipelineSource.connection('owner/repo', 'main', {
     *    connectionArn: 'arn:aws:codestar-connections:us-east-1:222222222222:connection/7d2469ff-514a-4e4f-9003-5ca4a43cdc41', // Created using the AWS console
     * });
     * ```
     *
     * @param repoString A string that encodes owner and repository separated by a slash (e.g. 'owner/repo').
     * @param branch The branch to use.
     * @param props The source properties, including the connection ARN.
     * @see https://docs.aws.amazon.com/dtconsole/latest/userguide/welcome-connections.html
     * @stability stable
     */
    static connection(repoString: string, branch: string, props: ConnectionSourceOptions): CodePipelineSource;
    /**
     * Returns a CodeCommit source.
     *
     * @param repository The CodeCommit repository.
     * @param branch The branch to use.
     * @param props The source properties.
     * @stability stable
     */
    static codeCommit(repository: codecommit.IRepository, branch: string, props?: CodeCommitSourceOptions): CodePipelineSource;
    /**
     * Whether or not this is a Source step.
     *
     * What it means to be a Source step depends on the engine.
     *
     * @stability stable
     */
    readonly isSource = true;
    /**
     * Create the desired Action and add it to the pipeline.
     *
     * @stability stable
     */
    produceAction(stage: cp.IStage, options: ProduceActionOptions): CodePipelineActionFactoryResult;
    /**
     * @stability stable
     */
    protected abstract getAction(output: Artifact, actionName: string, runOrder: number): Action;
}
/**
 * Options for GitHub sources.
 *
 * @stability stable
 */
export interface GitHubSourceOptions {
    /**
     * A GitHub OAuth token to use for authentication.
     *
     * It is recommended to use a Secrets Manager `Secret` to obtain the token:
     *
     * ```ts
     * const oauth = cdk.SecretValue.secretsManager('my-github-token');
     * new GitHubSource(this, 'GitHubSource', { authentication: oauth, ... });
     * ```
     *
     * The GitHub Personal Access Token should have these scopes:
     *
     * * **repo** - to read the repository
     * * **admin:repo_hook** - if you plan to use webhooks (true by default)
     *
     * @default - SecretValue.secretsManager('github-token')
     * @see https://docs.aws.amazon.com/codepipeline/latest/userguide/GitHub-create-personal-token-CLI.html
     * @stability stable
     */
    readonly authentication?: SecretValue;
    /**
     * How AWS CodePipeline should be triggered.
     *
     * With the default value "WEBHOOK", a webhook is created in GitHub that triggers the action.
     * With "POLL", CodePipeline periodically checks the source for changes.
     * With "None", the action is not triggered through changes in the source.
     *
     * To use `WEBHOOK`, your GitHub Personal Access Token should have
     * **admin:repo_hook** scope (in addition to the regular **repo** scope).
     *
     * @default GitHubTrigger.WEBHOOK
     * @stability stable
     */
    readonly trigger?: GitHubTrigger;
}
/**
 * Options for S3 sources.
 *
 * @stability stable
 */
export interface S3SourceOptions {
    /**
     * How should CodePipeline detect source changes for this Action.
     *
     * Note that if this is S3Trigger.EVENTS, you need to make sure to include the source Bucket in a CloudTrail Trail,
     * as otherwise the CloudWatch Events will not be emitted.
     *
     * @default S3Trigger.POLL
     * @see https://docs.aws.amazon.com/AmazonCloudWatch/latest/events/log-s3-data-events.html
     * @stability stable
     */
    readonly trigger?: S3Trigger;
    /**
     * The action name used for this source in the CodePipeline.
     *
     * @default - The bucket name
     * @stability stable
     */
    readonly actionName?: string;
}
/**
 * Configuration options for CodeStar source.
 *
 * @stability stable
 */
export interface ConnectionSourceOptions {
    /**
     * The ARN of the CodeStar Connection created in the AWS console that has permissions to access this GitHub or BitBucket repository.
     *
     * @see https://docs.aws.amazon.com/codepipeline/latest/userguide/connections-create.html
     * @stability stable
     * @example
     *
     * 'arn:aws:codestar-connections:us-east-1:123456789012:connection/12345678-abcd-12ab-34cdef5678gh'
     */
    readonly connectionArn: string;
    /**
     * Whether the output should be the contents of the repository (which is the default), or a link that allows CodeBuild to clone the repository before building.
     *
     * **Note**: if this option is true,
     * then only CodeBuild actions can use the resulting {@link output}.
     *
     * @default false
     * @see https://docs.aws.amazon.com/codepipeline/latest/userguide/action-reference-CodestarConnectionSource.html#action-reference-CodestarConnectionSource-config
     * @stability stable
     */
    readonly codeBuildCloneOutput?: boolean;
    /**
     * Controls automatically starting your pipeline when a new commit is made on the configured repository and branch.
     *
     * If unspecified,
     * the default value is true, and the field does not display by default.
     *
     * @default true
     * @see https://docs.aws.amazon.com/codepipeline/latest/userguide/action-reference-CodestarConnectionSource.html
     * @stability stable
     */
    readonly triggerOnPush?: boolean;
}
/**
 * Configuration options for a CodeCommit source.
 *
 * @stability stable
 */
export interface CodeCommitSourceOptions {
    /**
     * How should CodePipeline detect source changes for this Action.
     *
     * @default CodeCommitTrigger.EVENTS
     * @stability stable
     */
    readonly trigger?: CodeCommitTrigger;
    /**
     * Role to be used by on commit event rule.
     *
     * Used only when trigger value is CodeCommitTrigger.EVENTS.
     *
     * @default a new role will be created.
     * @stability stable
     */
    readonly eventRole?: iam.IRole;
    /**
     * Whether the output should be the contents of the repository (which is the default), or a link that allows CodeBuild to clone the repository before building.
     *
     * **Note**: if this option is true,
     * then only CodeBuild actions can use the resulting {@link output}.
     *
     * @default false
     * @see https://docs.aws.amazon.com/codepipeline/latest/userguide/action-reference-CodeCommit.html
     * @stability stable
     */
    readonly codeBuildCloneOutput?: boolean;
}

"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.PipelineQueries = void 0;
const blueprint_1 = require("../blueprint");
/**
 * Answer some questions about a pipeline blueprint
 */
class PipelineQueries {
    constructor(pipeline) {
        this.pipeline = pipeline;
    }
    /**
     * Return the names of all outputs for the given stack that are referenced in this blueprint
     */
    stackOutputsReferenced(stack) {
        const steps = new Array();
        for (const wave of this.pipeline.waves) {
            steps.push(...wave.pre, ...wave.post);
            for (const stage of wave.stages) {
                steps.push(...stage.pre, ...stage.post);
            }
        }
        const ret = new Array();
        for (const step of steps) {
            if (!(step instanceof blueprint_1.ShellStep)) {
                continue;
            }
            for (const outputRef of Object.values(step.envFromCfnOutputs)) {
                if (outputRef.isProducedBy(stack)) {
                    ret.push(outputRef.outputName);
                }
            }
        }
        return ret;
    }
    /**
     * Find the stack deployment that is producing the given reference
     */
    producingStack(outputReference) {
        for (const wave of this.pipeline.waves) {
            for (const stage of wave.stages) {
                for (const stack of stage.stacks) {
                    if (outputReference.isProducedBy(stack)) {
                        return stack;
                    }
                }
            }
        }
        throw new Error(`Stack '${outputReference.stackDescription}' (producing output '${outputReference.outputName}') is not in the pipeline; call 'addStage()' to add the stack's Stage to the pipeline`);
    }
    /**
     * All assets referenced in all the Stacks of a StageDeployment
     */
    assetsInStage(stage) {
        const assets = new Map();
        for (const stack of stage.stacks) {
            for (const asset of stack.assets) {
                assets.set(asset.assetSelector, asset);
            }
        }
        return Array.from(assets.values());
    }
}
exports.PipelineQueries = PipelineQueries;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGlwZWxpbmUtcXVlcmllcy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbInBpcGVsaW5lLXF1ZXJpZXMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQUEsNENBQW1IO0FBR25IOztHQUVHO0FBQ0gsTUFBYSxlQUFlO0lBQzFCLFlBQTZCLFFBQXNCO1FBQXRCLGFBQVEsR0FBUixRQUFRLENBQWM7SUFDbkQsQ0FBQztJQUVEOztPQUVHO0lBQ0ksc0JBQXNCLENBQUMsS0FBc0I7UUFDbEQsTUFBTSxLQUFLLEdBQUcsSUFBSSxLQUFLLEVBQVEsQ0FBQztRQUNoQyxLQUFLLE1BQU0sSUFBSSxJQUFJLElBQUksQ0FBQyxRQUFRLENBQUMsS0FBSyxFQUFFO1lBQ3RDLEtBQUssQ0FBQyxJQUFJLENBQUMsR0FBRyxJQUFJLENBQUMsR0FBRyxFQUFFLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO1lBQ3RDLEtBQUssTUFBTSxLQUFLLElBQUksSUFBSSxDQUFDLE1BQU0sRUFBRTtnQkFDL0IsS0FBSyxDQUFDLElBQUksQ0FBQyxHQUFHLEtBQUssQ0FBQyxHQUFHLEVBQUUsR0FBRyxLQUFLLENBQUMsSUFBSSxDQUFDLENBQUM7YUFDekM7U0FDRjtRQUVELE1BQU0sR0FBRyxHQUFHLElBQUksS0FBSyxFQUFVLENBQUM7UUFDaEMsS0FBSyxNQUFNLElBQUksSUFBSSxLQUFLLEVBQUU7WUFDeEIsSUFBSSxDQUFDLENBQUMsSUFBSSxZQUFZLHFCQUFTLENBQUMsRUFBRTtnQkFBRSxTQUFTO2FBQUU7WUFFL0MsS0FBSyxNQUFNLFNBQVMsSUFBSSxNQUFNLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxFQUFFO2dCQUM3RCxJQUFJLFNBQVMsQ0FBQyxZQUFZLENBQUMsS0FBSyxDQUFDLEVBQUU7b0JBQ2pDLEdBQUcsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLFVBQVUsQ0FBQyxDQUFDO2lCQUNoQzthQUNGO1NBQ0Y7UUFDRCxPQUFPLEdBQUcsQ0FBQztJQUNiLENBQUM7SUFFRDs7T0FFRztJQUNJLGNBQWMsQ0FBQyxlQUFxQztRQUN6RCxLQUFLLE1BQU0sSUFBSSxJQUFJLElBQUksQ0FBQyxRQUFRLENBQUMsS0FBSyxFQUFFO1lBQ3RDLEtBQUssTUFBTSxLQUFLLElBQUksSUFBSSxDQUFDLE1BQU0sRUFBRTtnQkFDL0IsS0FBSyxNQUFNLEtBQUssSUFBSSxLQUFLLENBQUMsTUFBTSxFQUFFO29CQUNoQyxJQUFJLGVBQWUsQ0FBQyxZQUFZLENBQUMsS0FBSyxDQUFDLEVBQUU7d0JBQ3ZDLE9BQU8sS0FBSyxDQUFDO3FCQUNkO2lCQUNGO2FBQ0Y7U0FDRjtRQUVELE1BQU0sSUFBSSxLQUFLLENBQUMsVUFBVSxlQUFlLENBQUMsZ0JBQWdCLHdCQUF3QixlQUFlLENBQUMsVUFBVSx1RkFBdUYsQ0FBQyxDQUFDO0lBQ3ZNLENBQUM7SUFFRDs7T0FFRztJQUNJLGFBQWEsQ0FBQyxLQUFzQjtRQUN6QyxNQUFNLE1BQU0sR0FBRyxJQUFJLEdBQUcsRUFBc0IsQ0FBQztRQUU3QyxLQUFLLE1BQU0sS0FBSyxJQUFJLEtBQUssQ0FBQyxNQUFNLEVBQUU7WUFDaEMsS0FBSyxNQUFNLEtBQUssSUFBSSxLQUFLLENBQUMsTUFBTSxFQUFFO2dCQUNoQyxNQUFNLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxhQUFhLEVBQUUsS0FBSyxDQUFDLENBQUM7YUFDeEM7U0FDRjtRQUVELE9BQU8sS0FBSyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsTUFBTSxFQUFFLENBQUMsQ0FBQztJQUNyQyxDQUFDO0NBQ0Y7QUE1REQsMENBNERDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgU3RlcCwgU2hlbGxTdGVwLCBTdGFja091dHB1dFJlZmVyZW5jZSwgU3RhY2tEZXBsb3ltZW50LCBTdGFja0Fzc2V0LCBTdGFnZURlcGxveW1lbnQgfSBmcm9tICcuLi9ibHVlcHJpbnQnO1xuaW1wb3J0IHsgUGlwZWxpbmVCYXNlIH0gZnJvbSAnLi4vbWFpbi9waXBlbGluZS1iYXNlJztcblxuLyoqXG4gKiBBbnN3ZXIgc29tZSBxdWVzdGlvbnMgYWJvdXQgYSBwaXBlbGluZSBibHVlcHJpbnRcbiAqL1xuZXhwb3J0IGNsYXNzIFBpcGVsaW5lUXVlcmllcyB7XG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgcmVhZG9ubHkgcGlwZWxpbmU6IFBpcGVsaW5lQmFzZSkge1xuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybiB0aGUgbmFtZXMgb2YgYWxsIG91dHB1dHMgZm9yIHRoZSBnaXZlbiBzdGFjayB0aGF0IGFyZSByZWZlcmVuY2VkIGluIHRoaXMgYmx1ZXByaW50XG4gICAqL1xuICBwdWJsaWMgc3RhY2tPdXRwdXRzUmVmZXJlbmNlZChzdGFjazogU3RhY2tEZXBsb3ltZW50KTogc3RyaW5nW10ge1xuICAgIGNvbnN0IHN0ZXBzID0gbmV3IEFycmF5PFN0ZXA+KCk7XG4gICAgZm9yIChjb25zdCB3YXZlIG9mIHRoaXMucGlwZWxpbmUud2F2ZXMpIHtcbiAgICAgIHN0ZXBzLnB1c2goLi4ud2F2ZS5wcmUsIC4uLndhdmUucG9zdCk7XG4gICAgICBmb3IgKGNvbnN0IHN0YWdlIG9mIHdhdmUuc3RhZ2VzKSB7XG4gICAgICAgIHN0ZXBzLnB1c2goLi4uc3RhZ2UucHJlLCAuLi5zdGFnZS5wb3N0KTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBjb25zdCByZXQgPSBuZXcgQXJyYXk8c3RyaW5nPigpO1xuICAgIGZvciAoY29uc3Qgc3RlcCBvZiBzdGVwcykge1xuICAgICAgaWYgKCEoc3RlcCBpbnN0YW5jZW9mIFNoZWxsU3RlcCkpIHsgY29udGludWU7IH1cblxuICAgICAgZm9yIChjb25zdCBvdXRwdXRSZWYgb2YgT2JqZWN0LnZhbHVlcyhzdGVwLmVudkZyb21DZm5PdXRwdXRzKSkge1xuICAgICAgICBpZiAob3V0cHV0UmVmLmlzUHJvZHVjZWRCeShzdGFjaykpIHtcbiAgICAgICAgICByZXQucHVzaChvdXRwdXRSZWYub3V0cHV0TmFtZSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHJldDtcbiAgfVxuXG4gIC8qKlxuICAgKiBGaW5kIHRoZSBzdGFjayBkZXBsb3ltZW50IHRoYXQgaXMgcHJvZHVjaW5nIHRoZSBnaXZlbiByZWZlcmVuY2VcbiAgICovXG4gIHB1YmxpYyBwcm9kdWNpbmdTdGFjayhvdXRwdXRSZWZlcmVuY2U6IFN0YWNrT3V0cHV0UmVmZXJlbmNlKTogU3RhY2tEZXBsb3ltZW50IHtcbiAgICBmb3IgKGNvbnN0IHdhdmUgb2YgdGhpcy5waXBlbGluZS53YXZlcykge1xuICAgICAgZm9yIChjb25zdCBzdGFnZSBvZiB3YXZlLnN0YWdlcykge1xuICAgICAgICBmb3IgKGNvbnN0IHN0YWNrIG9mIHN0YWdlLnN0YWNrcykge1xuICAgICAgICAgIGlmIChvdXRwdXRSZWZlcmVuY2UuaXNQcm9kdWNlZEJ5KHN0YWNrKSkge1xuICAgICAgICAgICAgcmV0dXJuIHN0YWNrO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIHRocm93IG5ldyBFcnJvcihgU3RhY2sgJyR7b3V0cHV0UmVmZXJlbmNlLnN0YWNrRGVzY3JpcHRpb259JyAocHJvZHVjaW5nIG91dHB1dCAnJHtvdXRwdXRSZWZlcmVuY2Uub3V0cHV0TmFtZX0nKSBpcyBub3QgaW4gdGhlIHBpcGVsaW5lOyBjYWxsICdhZGRTdGFnZSgpJyB0byBhZGQgdGhlIHN0YWNrJ3MgU3RhZ2UgdG8gdGhlIHBpcGVsaW5lYCk7XG4gIH1cblxuICAvKipcbiAgICogQWxsIGFzc2V0cyByZWZlcmVuY2VkIGluIGFsbCB0aGUgU3RhY2tzIG9mIGEgU3RhZ2VEZXBsb3ltZW50XG4gICAqL1xuICBwdWJsaWMgYXNzZXRzSW5TdGFnZShzdGFnZTogU3RhZ2VEZXBsb3ltZW50KTogU3RhY2tBc3NldFtdIHtcbiAgICBjb25zdCBhc3NldHMgPSBuZXcgTWFwPHN0cmluZywgU3RhY2tBc3NldD4oKTtcblxuICAgIGZvciAoY29uc3Qgc3RhY2sgb2Ygc3RhZ2Uuc3RhY2tzKSB7XG4gICAgICBmb3IgKGNvbnN0IGFzc2V0IG9mIHN0YWNrLmFzc2V0cykge1xuICAgICAgICBhc3NldHMuc2V0KGFzc2V0LmFzc2V0U2VsZWN0b3IsIGFzc2V0KTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gQXJyYXkuZnJvbShhc3NldHMudmFsdWVzKCkpO1xuICB9XG59Il19
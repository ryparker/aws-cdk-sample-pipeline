"use strict";
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.FileSet = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
/**
 * A set of files traveling through the deployment pipeline.
 *
 * Individual steps in the pipeline produce or consume
 * `FileSet`s.
 *
 * @stability stable
 */
class FileSet {
    /**
     * @param id Human-readable descriptor for this file set (does not need to be unique).
     * @stability stable
     */
    constructor(
    /** Human-readable descriptor for this file set (does not need to be unique) */
    id, producer) {
        this.id = id;
        /**
         * The primary output of a file set producer.
         *
         * The primary output of a FileSet is itself.
         *
         * @stability stable
         */
        this.primaryOutput = this;
        this._producer = producer;
    }
    /**
     * The Step that produces this FileSet.
     *
     * @stability stable
     */
    get producer() {
        if (!this._producer) {
            throw new Error(`FileSet '${this.id}' doesn\'t have a producer; call 'fileSet.producedBy()'`);
        }
        return this._producer;
    }
    /**
     * Mark the given Step as the producer for this FileSet.
     *
     * This method can only be called once.
     *
     * @stability stable
     */
    producedBy(producer) {
        if (this._producer) {
            throw new Error(`FileSet '${this.id}' already has a producer (${this._producer}) while setting producer: ${producer}`);
        }
        this._producer = producer;
    }
    /**
     * Return a string representation of this FileSet.
     *
     * @stability stable
     */
    toString() {
        return `FileSet(${this.id})`;
    }
}
exports.FileSet = FileSet;
_a = JSII_RTTI_SYMBOL_1;
FileSet[_a] = { fqn: "@aws-cdk/pipelines.FileSet", version: "1.121.0" };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmlsZS1zZXQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJmaWxlLXNldC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7O0FBR0EsTUFBYSxPQUFPOzs7OztJQUtsQjtJQUNFLCtFQUErRTtJQUMvRCxFQUFVLEVBQUUsUUFBZTtRQUEzQixPQUFFLEdBQUYsRUFBRSxDQUFROzs7Ozs7OztRQUxaLGtCQUFhLEdBQWEsSUFBSSxDQUFDO1FBTTdDLElBQUksQ0FBQyxTQUFTLEdBQUcsUUFBUSxDQUFDO0lBQzVCLENBQUM7Ozs7OztJQUdELElBQVcsUUFBUTtRQUNqQixJQUFJLENBQUMsSUFBSSxDQUFDLFNBQVMsRUFBRTtZQUNuQixNQUFNLElBQUksS0FBSyxDQUFDLFlBQVksSUFBSSxDQUFDLEVBQUUseURBQXlELENBQUMsQ0FBQztTQUMvRjtRQUNELE9BQU8sSUFBSSxDQUFDLFNBQVMsQ0FBQztJQUN4QixDQUFDOzs7Ozs7OztJQUdNLFVBQVUsQ0FBQyxRQUFlO1FBQy9CLElBQUksSUFBSSxDQUFDLFNBQVMsRUFBRTtZQUNsQixNQUFNLElBQUksS0FBSyxDQUFDLFlBQVksSUFBSSxDQUFDLEVBQUUsNkJBQTZCLElBQUksQ0FBQyxTQUFTLDZCQUE2QixRQUFRLEVBQUUsQ0FBQyxDQUFDO1NBQ3hIO1FBQ0QsSUFBSSxDQUFDLFNBQVMsR0FBRyxRQUFRLENBQUM7SUFDNUIsQ0FBQzs7Ozs7O0lBR00sUUFBUTtRQUNiLE9BQU8sV0FBVyxJQUFJLENBQUMsRUFBRSxHQUFHLENBQUM7SUFDL0IsQ0FBQzs7QUE5QkgsMEJBK0JDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgU3RlcCB9IGZyb20gJy4vc3RlcCc7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXG5leHBvcnQgY2xhc3MgRmlsZVNldCBpbXBsZW1lbnRzIElGaWxlU2V0UHJvZHVjZXIge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXG4gIHB1YmxpYyByZWFkb25seSBwcmltYXJ5T3V0cHV0PzogRmlsZVNldCA9IHRoaXM7XG4gIHByaXZhdGUgX3Byb2R1Y2VyPzogU3RlcDtcblxuICBjb25zdHJ1Y3RvcihcbiAgICAvKiogSHVtYW4tcmVhZGFibGUgZGVzY3JpcHRvciBmb3IgdGhpcyBmaWxlIHNldCAoZG9lcyBub3QgbmVlZCB0byBiZSB1bmlxdWUpICovXG4gICAgcHVibGljIHJlYWRvbmx5IGlkOiBzdHJpbmcsIHByb2R1Y2VyPzogU3RlcCkge1xuICAgIHRoaXMuX3Byb2R1Y2VyID0gcHJvZHVjZXI7XG4gIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxuICBwdWJsaWMgZ2V0IHByb2R1Y2VyKCkge1xuICAgIGlmICghdGhpcy5fcHJvZHVjZXIpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihgRmlsZVNldCAnJHt0aGlzLmlkfScgZG9lc25cXCd0IGhhdmUgYSBwcm9kdWNlcjsgY2FsbCAnZmlsZVNldC5wcm9kdWNlZEJ5KCknYCk7XG4gICAgfVxuICAgIHJldHVybiB0aGlzLl9wcm9kdWNlcjtcbiAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxuICBwdWJsaWMgcHJvZHVjZWRCeShwcm9kdWNlcj86IFN0ZXApIHtcbiAgICBpZiAodGhpcy5fcHJvZHVjZXIpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihgRmlsZVNldCAnJHt0aGlzLmlkfScgYWxyZWFkeSBoYXMgYSBwcm9kdWNlciAoJHt0aGlzLl9wcm9kdWNlcn0pIHdoaWxlIHNldHRpbmcgcHJvZHVjZXI6ICR7cHJvZHVjZXJ9YCk7XG4gICAgfVxuICAgIHRoaXMuX3Byb2R1Y2VyID0gcHJvZHVjZXI7XG4gIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXG4gIHB1YmxpYyB0b1N0cmluZygpIHtcbiAgICByZXR1cm4gYEZpbGVTZXQoJHt0aGlzLmlkfSlgO1xuICB9XG59XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcbmV4cG9ydCBpbnRlcmZhY2UgSUZpbGVTZXRQcm9kdWNlciB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcbiAgcmVhZG9ubHkgcHJpbWFyeU91dHB1dD86IEZpbGVTZXQ7XG59Il19
"use strict";
var _a, _b;
Object.defineProperty(exports, "__esModule", { value: true });
exports.StackOutputReference = exports.ShellStep = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const core_1 = require("@aws-cdk/core");
const javascript_1 = require("../private/javascript");
const file_set_1 = require("./file-set");
const step_1 = require("./step");
/**
 * Run shell script commands in the pipeline.
 *
 * @stability stable
 */
class ShellStep extends step_1.Step {
    /**
     * @stability stable
     */
    constructor(id, props) {
        var _c, _d, _e, _f;
        super(id);
        /**
         * Input FileSets.
         *
         * A list of `(FileSet, directory)` pairs, which are a copy of the
         * input properties. This list should not be modified directly.
         *
         * @stability stable
         */
        this.inputs = [];
        /**
         * Output FileSets.
         *
         * A list of `(FileSet, directory)` pairs, which are a copy of the
         * input properties. This list should not be modified directly.
         *
         * @stability stable
         */
        this.outputs = [];
        this._additionalOutputs = {};
        this.commands = props.commands;
        this.installCommands = (_c = props.installCommands) !== null && _c !== void 0 ? _c : [];
        this.env = (_d = props.env) !== null && _d !== void 0 ? _d : {};
        this.envFromCfnOutputs = javascript_1.mapValues((_e = props.envFromCfnOutputs) !== null && _e !== void 0 ? _e : {}, StackOutputReference.fromCfnOutput);
        // Inputs
        if (props.input) {
            const fileSet = props.input.primaryOutput;
            if (!fileSet) {
                throw new Error(`'${id}': primary input should be a step that produces a file set, got ${props.input}`);
            }
            this.addDependencyFileSet(fileSet);
            this.inputs.push({ directory: '.', fileSet });
        }
        for (const [directory, step] of Object.entries((_f = props.additionalInputs) !== null && _f !== void 0 ? _f : {})) {
            if (directory === '.') {
                throw new Error(`'${id}': input for directory '.' should be passed via 'input' property`);
            }
            const fileSet = step.primaryOutput;
            if (!fileSet) {
                throw new Error(`'${id}': additionalInput for directory '${directory}' should be a step that produces a file set, got ${step}`);
            }
            this.addDependencyFileSet(fileSet);
            this.inputs.push({ directory, fileSet });
        }
        // Outputs
        if (props.primaryOutputDirectory) {
            this._primaryOutputDirectory = props.primaryOutputDirectory;
            const fileSet = new file_set_1.FileSet('Output', this);
            this.configurePrimaryOutput(fileSet);
            this.outputs.push({ directory: props.primaryOutputDirectory, fileSet });
        }
    }
    /**
     * Configure the given output directory as primary output.
     *
     * If no primary output has been configured yet, this directory
     * will become the primary output of this ShellStep, otherwise this
     * method will throw if the given directory is different than the
     * currently configured primary output directory.
     *
     * @stability stable
     */
    primaryOutputDirectory(directory) {
        if (this._primaryOutputDirectory !== undefined) {
            if (this._primaryOutputDirectory !== directory) {
                throw new Error(`${this}: primaryOutputDirectory is '${this._primaryOutputDirectory}', cannot be changed to '${directory}'`);
            }
            return this.primaryOutput;
        }
        this._primaryOutputDirectory = directory;
        const fileSet = new file_set_1.FileSet('Output', this);
        this.configurePrimaryOutput(fileSet);
        this.outputs.push({ directory: directory, fileSet });
        return fileSet;
    }
    /**
     * Add an additional output FileSet based on a directory.
     *
     * After running the script, the contents of the given directory
     * will be exported as a `FileSet`. Use the `FileSet` as the
     * input to another step.
     *
     * Multiple calls with the exact same directory name string (not normalized)
     * will return the same FileSet.
     *
     * @stability stable
     */
    addOutputDirectory(directory) {
        let fileSet = this._additionalOutputs[directory];
        if (!fileSet) {
            fileSet = new file_set_1.FileSet(directory, this);
            this._additionalOutputs[directory] = fileSet;
            this.outputs.push({ directory, fileSet });
        }
        return fileSet;
    }
}
exports.ShellStep = ShellStep;
_a = JSII_RTTI_SYMBOL_1;
ShellStep[_a] = { fqn: "@aws-cdk/pipelines.ShellStep", version: "1.121.0" };
/**
 * A Reference to a Stack Output.
 *
 * @stability stable
 */
class StackOutputReference {
    constructor(
    /** A human-readable description of the producing stack */
    stackDescription, 
    /** Artifact id of the producing stack */
    stackArtifactId, 
    /** Output name of the producing stack */
    outputName) {
        this.stackDescription = stackDescription;
        this.stackArtifactId = stackArtifactId;
        this.outputName = outputName;
    }
    /**
     * Create a StackOutputReference that references the given CfnOutput.
     *
     * @stability stable
     */
    static fromCfnOutput(output) {
        const stack = core_1.Stack.of(output);
        return new StackOutputReference(stack.node.path, stack.artifactId, stack.resolve(output.logicalId));
    }
    /**
     * Whether or not this stack output is being produced by the given Stack deployment.
     *
     * @stability stable
     */
    isProducedBy(stack) {
        return stack.stackArtifactId === this.stackArtifactId;
    }
}
exports.StackOutputReference = StackOutputReference;
_b = JSII_RTTI_SYMBOL_1;
StackOutputReference[_b] = { fqn: "@aws-cdk/pipelines.StackOutputReference", version: "1.121.0" };
//# sourceMappingURL=data:application/json;base64,
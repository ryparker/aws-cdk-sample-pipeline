"use strict";
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.StageDeployment = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const cloud_assembly_internals_1 = require("../private/cloud-assembly-internals");
const construct_internals_1 = require("../private/construct-internals");
const stack_deployment_1 = require("./stack-deployment");
/**
 * Deployment of a single `Stage`.
 *
 * A `Stage` consists of one or more `Stacks`, which will be
 * deployed in dependency order.
 *
 * @stability stable
 */
class StageDeployment {
    constructor(
    /** The stacks deployed in this stage */
    stacks, props = {}) {
        var _b, _c, _d;
        this.stacks = stacks;
        this.stageName = (_b = props.stageName) !== null && _b !== void 0 ? _b : '';
        this.pre = (_c = props.pre) !== null && _c !== void 0 ? _c : [];
        this.post = (_d = props.post) !== null && _d !== void 0 ? _d : [];
    }
    /**
     * Create a new `StageDeployment` from a `Stage`.
     *
     * Synthesizes the target stage, and deployes the stacks found inside
     * in dependency order.
     *
     * @stability stable
     */
    static fromStage(stage, props = {}) {
        const assembly = construct_internals_1.pipelineSynth(stage);
        if (assembly.stacks.length === 0) {
            // If we don't check here, a more puzzling "stage contains no actions"
            // error will be thrown come deployment time.
            throw new Error(`The given Stage construct ('${stage.node.path}') should contain at least one Stack`);
        }
        const stepFromArtifact = new Map();
        for (const artifact of assembly.stacks) {
            const step = stack_deployment_1.StackDeployment.fromArtifact(artifact);
            stepFromArtifact.set(artifact, step);
        }
        for (const artifact of assembly.stacks) {
            const thisStep = stepFromArtifact.get(artifact);
            if (!thisStep) {
                throw new Error('Logic error: we just added a step for this artifact but it disappeared.');
            }
            const stackDependencies = artifact.dependencies.filter(cloud_assembly_internals_1.isStackArtifact);
            for (const dep of stackDependencies) {
                const depStep = stepFromArtifact.get(dep);
                if (!depStep) {
                    throw new Error(`Stack '${artifact.id}' depends on stack not found in same Stage: '${dep.id}'`);
                }
                thisStep.addStackDependency(depStep);
            }
        }
        return new StageDeployment(Array.from(stepFromArtifact.values()), {
            stageName: stage.stageName,
            ...props,
        });
    }
    /**
     * Add an additional step to run before any of the stacks in this stage.
     *
     * @stability stable
     */
    addPre(...steps) {
        this.pre.push(...steps);
    }
    /**
     * Add an additional step to run after all of the stacks in this stage.
     *
     * @stability stable
     */
    addPost(...steps) {
        this.post.push(...steps);
    }
}
exports.StageDeployment = StageDeployment;
_a = JSII_RTTI_SYMBOL_1;
StageDeployment[_a] = { fqn: "@aws-cdk/pipelines.StageDeployment", version: "1.121.0" };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3RhZ2UtZGVwbG95bWVudC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbInN0YWdlLWRlcGxveW1lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFFQSxrRkFBc0U7QUFDdEUsd0VBQStEO0FBQy9ELHlEQUFxRDs7Ozs7Ozs7O0FBZ0JyRCxNQUFhLGVBQWU7SUErQzFCO0lBQ0Usd0NBQXdDO0lBQ3hCLE1BQXlCLEVBQUUsUUFBOEIsRUFBRTs7UUFBM0QsV0FBTSxHQUFOLE1BQU0sQ0FBbUI7UUFDekMsSUFBSSxDQUFDLFNBQVMsU0FBRyxLQUFLLENBQUMsU0FBUyxtQ0FBSSxFQUFFLENBQUM7UUFDdkMsSUFBSSxDQUFDLEdBQUcsU0FBRyxLQUFLLENBQUMsR0FBRyxtQ0FBSSxFQUFFLENBQUM7UUFDM0IsSUFBSSxDQUFDLElBQUksU0FBRyxLQUFLLENBQUMsSUFBSSxtQ0FBSSxFQUFFLENBQUM7SUFDL0IsQ0FBQzs7Ozs7Ozs7O0lBbkRNLE1BQU0sQ0FBQyxTQUFTLENBQUMsS0FBZ0IsRUFBRSxRQUE4QixFQUFFO1FBQ3hFLE1BQU0sUUFBUSxHQUFHLG1DQUFhLENBQUMsS0FBSyxDQUFDLENBQUM7UUFDdEMsSUFBSSxRQUFRLENBQUMsTUFBTSxDQUFDLE1BQU0sS0FBSyxDQUFDLEVBQUU7WUFDaEMsc0VBQXNFO1lBQ3RFLDZDQUE2QztZQUM3QyxNQUFNLElBQUksS0FBSyxDQUFDLCtCQUErQixLQUFLLENBQUMsSUFBSSxDQUFDLElBQUksc0NBQXNDLENBQUMsQ0FBQztTQUN2RztRQUVELE1BQU0sZ0JBQWdCLEdBQUcsSUFBSSxHQUFHLEVBQWdELENBQUM7UUFDakYsS0FBSyxNQUFNLFFBQVEsSUFBSSxRQUFRLENBQUMsTUFBTSxFQUFFO1lBQ3RDLE1BQU0sSUFBSSxHQUFHLGtDQUFlLENBQUMsWUFBWSxDQUFDLFFBQVEsQ0FBQyxDQUFDO1lBQ3BELGdCQUFnQixDQUFDLEdBQUcsQ0FBQyxRQUFRLEVBQUUsSUFBSSxDQUFDLENBQUM7U0FDdEM7UUFFRCxLQUFLLE1BQU0sUUFBUSxJQUFJLFFBQVEsQ0FBQyxNQUFNLEVBQUU7WUFDdEMsTUFBTSxRQUFRLEdBQUcsZ0JBQWdCLENBQUMsR0FBRyxDQUFDLFFBQVEsQ0FBQyxDQUFDO1lBQ2hELElBQUksQ0FBQyxRQUFRLEVBQUU7Z0JBQ2IsTUFBTSxJQUFJLEtBQUssQ0FBQyx5RUFBeUUsQ0FBQyxDQUFDO2FBQzVGO1lBRUQsTUFBTSxpQkFBaUIsR0FBRyxRQUFRLENBQUMsWUFBWSxDQUFDLE1BQU0sQ0FBQywwQ0FBZSxDQUFDLENBQUM7WUFDeEUsS0FBSyxNQUFNLEdBQUcsSUFBSSxpQkFBaUIsRUFBRTtnQkFDbkMsTUFBTSxPQUFPLEdBQUcsZ0JBQWdCLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDO2dCQUMxQyxJQUFJLENBQUMsT0FBTyxFQUFFO29CQUNaLE1BQU0sSUFBSSxLQUFLLENBQUMsVUFBVSxRQUFRLENBQUMsRUFBRSxnREFBZ0QsR0FBRyxDQUFDLEVBQUUsR0FBRyxDQUFDLENBQUM7aUJBQ2pHO2dCQUNELFFBQVEsQ0FBQyxrQkFBa0IsQ0FBQyxPQUFPLENBQUMsQ0FBQzthQUN0QztTQUNGO1FBRUQsT0FBTyxJQUFJLGVBQWUsQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLGdCQUFnQixDQUFDLE1BQU0sRUFBRSxDQUFDLEVBQUU7WUFDaEUsU0FBUyxFQUFFLEtBQUssQ0FBQyxTQUFTO1lBQzFCLEdBQUcsS0FBSztTQUNULENBQUMsQ0FBQztJQUNMLENBQUM7Ozs7OztJQW9CTSxNQUFNLENBQUMsR0FBRyxLQUFhO1FBQzVCLElBQUksQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLEdBQUcsS0FBSyxDQUFDLENBQUM7SUFDMUIsQ0FBQzs7Ozs7O0lBR00sT0FBTyxDQUFDLEdBQUcsS0FBYTtRQUM3QixJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxHQUFHLEtBQUssQ0FBQyxDQUFDO0lBQzNCLENBQUM7O0FBL0RILDBDQWdFQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIGNkayBmcm9tICdAYXdzLWNkay9jb3JlJztcbmltcG9ydCB7IENsb3VkRm9ybWF0aW9uU3RhY2tBcnRpZmFjdCB9IGZyb20gJ0Bhd3MtY2RrL2N4LWFwaSc7XG5pbXBvcnQgeyBpc1N0YWNrQXJ0aWZhY3QgfSBmcm9tICcuLi9wcml2YXRlL2Nsb3VkLWFzc2VtYmx5LWludGVybmFscyc7XG5pbXBvcnQgeyBwaXBlbGluZVN5bnRoIH0gZnJvbSAnLi4vcHJpdmF0ZS9jb25zdHJ1Y3QtaW50ZXJuYWxzJztcbmltcG9ydCB7IFN0YWNrRGVwbG95bWVudCB9IGZyb20gJy4vc3RhY2stZGVwbG95bWVudCc7XG5pbXBvcnQgeyBTdGVwIH0gZnJvbSAnLi9zdGVwJztcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXG5leHBvcnQgaW50ZXJmYWNlIFN0YWdlRGVwbG95bWVudFByb3BzIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxuICByZWFkb25seSBzdGFnZU5hbWU/OiBzdHJpbmc7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXG4gIHJlYWRvbmx5IHByZT86IFN0ZXBbXTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxuICByZWFkb25seSBwb3N0PzogU3RlcFtdO1xufVxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcbmV4cG9ydCBjbGFzcyBTdGFnZURlcGxveW1lbnQge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXG4gIHB1YmxpYyBzdGF0aWMgZnJvbVN0YWdlKHN0YWdlOiBjZGsuU3RhZ2UsIHByb3BzOiBTdGFnZURlcGxveW1lbnRQcm9wcyA9IHt9KSB7XG4gICAgY29uc3QgYXNzZW1ibHkgPSBwaXBlbGluZVN5bnRoKHN0YWdlKTtcbiAgICBpZiAoYXNzZW1ibHkuc3RhY2tzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgLy8gSWYgd2UgZG9uJ3QgY2hlY2sgaGVyZSwgYSBtb3JlIHB1enpsaW5nIFwic3RhZ2UgY29udGFpbnMgbm8gYWN0aW9uc1wiXG4gICAgICAvLyBlcnJvciB3aWxsIGJlIHRocm93biBjb21lIGRlcGxveW1lbnQgdGltZS5cbiAgICAgIHRocm93IG5ldyBFcnJvcihgVGhlIGdpdmVuIFN0YWdlIGNvbnN0cnVjdCAoJyR7c3RhZ2Uubm9kZS5wYXRofScpIHNob3VsZCBjb250YWluIGF0IGxlYXN0IG9uZSBTdGFja2ApO1xuICAgIH1cblxuICAgIGNvbnN0IHN0ZXBGcm9tQXJ0aWZhY3QgPSBuZXcgTWFwPENsb3VkRm9ybWF0aW9uU3RhY2tBcnRpZmFjdCwgU3RhY2tEZXBsb3ltZW50PigpO1xuICAgIGZvciAoY29uc3QgYXJ0aWZhY3Qgb2YgYXNzZW1ibHkuc3RhY2tzKSB7XG4gICAgICBjb25zdCBzdGVwID0gU3RhY2tEZXBsb3ltZW50LmZyb21BcnRpZmFjdChhcnRpZmFjdCk7XG4gICAgICBzdGVwRnJvbUFydGlmYWN0LnNldChhcnRpZmFjdCwgc3RlcCk7XG4gICAgfVxuXG4gICAgZm9yIChjb25zdCBhcnRpZmFjdCBvZiBhc3NlbWJseS5zdGFja3MpIHtcbiAgICAgIGNvbnN0IHRoaXNTdGVwID0gc3RlcEZyb21BcnRpZmFjdC5nZXQoYXJ0aWZhY3QpO1xuICAgICAgaWYgKCF0aGlzU3RlcCkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0xvZ2ljIGVycm9yOiB3ZSBqdXN0IGFkZGVkIGEgc3RlcCBmb3IgdGhpcyBhcnRpZmFjdCBidXQgaXQgZGlzYXBwZWFyZWQuJyk7XG4gICAgICB9XG5cbiAgICAgIGNvbnN0IHN0YWNrRGVwZW5kZW5jaWVzID0gYXJ0aWZhY3QuZGVwZW5kZW5jaWVzLmZpbHRlcihpc1N0YWNrQXJ0aWZhY3QpO1xuICAgICAgZm9yIChjb25zdCBkZXAgb2Ygc3RhY2tEZXBlbmRlbmNpZXMpIHtcbiAgICAgICAgY29uc3QgZGVwU3RlcCA9IHN0ZXBGcm9tQXJ0aWZhY3QuZ2V0KGRlcCk7XG4gICAgICAgIGlmICghZGVwU3RlcCkge1xuICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgU3RhY2sgJyR7YXJ0aWZhY3QuaWR9JyBkZXBlbmRzIG9uIHN0YWNrIG5vdCBmb3VuZCBpbiBzYW1lIFN0YWdlOiAnJHtkZXAuaWR9J2ApO1xuICAgICAgICB9XG4gICAgICAgIHRoaXNTdGVwLmFkZFN0YWNrRGVwZW5kZW5jeShkZXBTdGVwKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gbmV3IFN0YWdlRGVwbG95bWVudChBcnJheS5mcm9tKHN0ZXBGcm9tQXJ0aWZhY3QudmFsdWVzKCkpLCB7XG4gICAgICBzdGFnZU5hbWU6IHN0YWdlLnN0YWdlTmFtZSxcbiAgICAgIC4uLnByb3BzLFxuICAgIH0pO1xuICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXG4gIHB1YmxpYyByZWFkb25seSBzdGFnZU5hbWU6IHN0cmluZztcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXG4gIHB1YmxpYyByZWFkb25seSBwcmU6IFN0ZXBbXTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcbiAgcHVibGljIHJlYWRvbmx5IHBvc3Q6IFN0ZXBbXTtcblxuICBwcml2YXRlIGNvbnN0cnVjdG9yKFxuICAgIC8qKiBUaGUgc3RhY2tzIGRlcGxveWVkIGluIHRoaXMgc3RhZ2UgKi9cbiAgICBwdWJsaWMgcmVhZG9ubHkgc3RhY2tzOiBTdGFja0RlcGxveW1lbnRbXSwgcHJvcHM6IFN0YWdlRGVwbG95bWVudFByb3BzID0ge30pIHtcbiAgICB0aGlzLnN0YWdlTmFtZSA9IHByb3BzLnN0YWdlTmFtZSA/PyAnJztcbiAgICB0aGlzLnByZSA9IHByb3BzLnByZSA/PyBbXTtcbiAgICB0aGlzLnBvc3QgPSBwcm9wcy5wb3N0ID8/IFtdO1xuICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcbiAgcHVibGljIGFkZFByZSguLi5zdGVwczogU3RlcFtdKSB7XG4gICAgdGhpcy5wcmUucHVzaCguLi5zdGVwcyk7XG4gIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXG4gIHB1YmxpYyBhZGRQb3N0KC4uLnN0ZXBzOiBTdGVwW10pIHtcbiAgICB0aGlzLnBvc3QucHVzaCguLi5zdGVwcyk7XG4gIH1cbn0iXX0=